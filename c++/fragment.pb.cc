// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fragment.proto

#include "fragment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace DATA {
PROTOBUF_CONSTEXPR QueryTable::QueryTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._content_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rows_)*/0
  , /*decltype(_impl_.cols_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTableDefaultTypeInternal() {}
  union {
    QueryTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTableDefaultTypeInternal _QueryTable_default_instance_;
PROTOBUF_CONSTEXPR SquaredErrorsTable::SquaredErrorsTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_.rows_)*/0
  , /*decltype(_impl_.cols_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SquaredErrorsTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SquaredErrorsTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SquaredErrorsTableDefaultTypeInternal() {}
  union {
    SquaredErrorsTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SquaredErrorsTableDefaultTypeInternal _SquaredErrorsTable_default_instance_;
PROTOBUF_CONSTEXPR Variable::Variable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.level_error_bounds_)*/{}
  , /*decltype(_impl_.stopping_indices_)*/{}
  , /*decltype(_impl_._stopping_indices_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_content_)*/nullptr
  , /*decltype(_impl_.squared_errors_)*/nullptr
  , /*decltype(_impl_.levels_)*/0u
  , /*decltype(_impl_.tiers_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableDefaultTypeInternal() {}
  union {
    Variable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableDefaultTypeInternal _Variable_default_instance_;
PROTOBUF_CONSTEXPR Tier::Tier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ec_backend_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.encoded_fragment_length_)*/uint64_t{0u}
  , /*decltype(_impl_.hd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TierDefaultTypeInternal() {}
  union {
    Tier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TierDefaultTypeInternal _Tier_default_instance_;
PROTOBUF_CONSTEXPR Fragment::Fragment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_dimensions_)*/{}
  , /*decltype(_impl_._var_dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.var_level_error_bounds_)*/{}
  , /*decltype(_impl_.var_stopping_indices_)*/{}
  , /*decltype(_impl_.ec_backend_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.var_table_content_)*/nullptr
  , /*decltype(_impl_.var_squared_errors_)*/nullptr
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.m_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.hd_)*/0
  , /*decltype(_impl_.encoded_fragment_length_)*/0u
  , /*decltype(_impl_.idx_)*/0u
  , /*decltype(_impl_.orig_data_size_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.chksum_mismatch_)*/0u
  , /*decltype(_impl_.backend_id_)*/0u
  , /*decltype(_impl_.is_data_)*/false
  , /*decltype(_impl_.tier_id_)*/0u
  , /*decltype(_impl_.chunk_id_)*/0u
  , /*decltype(_impl_.fragment_id_)*/0u
  , /*decltype(_impl_.var_levels_)*/0u
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.sequence_number_)*/uint64_t{0u}
  , /*decltype(_impl_.var_tiers_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FragmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FragmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FragmentDefaultTypeInternal() {}
  union {
    Fragment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FragmentDefaultTypeInternal _Fragment_default_instance_;
PROTOBUF_CONSTEXPR VariableCollection::VariableCollection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariableCollectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableCollectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableCollectionDefaultTypeInternal() {}
  union {
    VariableCollection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableCollectionDefaultTypeInternal _VariableCollection_default_instance_;
PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequest_TierRequest::RetransmissionRequest_VariableRequest_TierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_ids_)*/{}
  , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tier_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal() {}
  union {
    RetransmissionRequest_VariableRequest_TierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_TierRequest_default_instance_;
PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequest::RetransmissionRequest_VariableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tiers_)*/{}
  , /*decltype(_impl_.var_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetransmissionRequest_VariableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetransmissionRequest_VariableRequestDefaultTypeInternal() {}
  union {
    RetransmissionRequest_VariableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetransmissionRequest_VariableRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_default_instance_;
PROTOBUF_CONSTEXPR RetransmissionRequest::RetransmissionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RetransmissionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RetransmissionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RetransmissionRequestDefaultTypeInternal() {}
  union {
    RetransmissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RetransmissionRequestDefaultTypeInternal _RetransmissionRequest_default_instance_;
PROTOBUF_CONSTEXPR TierMetadata::TierMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_ids_)*/{}
  , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tier_id_)*/0u
  , /*decltype(_impl_.k_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TierMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TierMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TierMetadataDefaultTypeInternal() {}
  union {
    TierMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TierMetadataDefaultTypeInternal _TierMetadata_default_instance_;
PROTOBUF_CONSTEXPR VariableMetadata::VariableMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tiers_)*/{}
  , /*decltype(_impl_.var_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariableMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableMetadataDefaultTypeInternal() {}
  union {
    VariableMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableMetadataDefaultTypeInternal _VariableMetadata_default_instance_;
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variables_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
PROTOBUF_CONSTEXPR FragmentsReport::FragmentsReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tier_id_)*/0u
  , /*decltype(_impl_.chunks_processed_)*/0u
  , /*decltype(_impl_.total_fragments_)*/0u
  , /*decltype(_impl_.expected_fragments_)*/0u
  , /*decltype(_impl_.time_window_)*/uint64_t{0u}
  , /*decltype(_impl_.lambda_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FragmentsReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FragmentsReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FragmentsReportDefaultTypeInternal() {}
  union {
    FragmentsReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FragmentsReportDefaultTypeInternal _FragmentsReport_default_instance_;
PROTOBUF_CONSTEXPR TierCompleteAck::TierCompleteAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tier_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TierCompleteAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TierCompleteAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TierCompleteAckDefaultTypeInternal() {}
  union {
    TierCompleteAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TierCompleteAckDefaultTypeInternal _TierCompleteAck_default_instance_;
PROTOBUF_CONSTEXPR ControlMessage::ControlMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.var_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.tier_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlMessageDefaultTypeInternal() {}
  union {
    ControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
}  // namespace DATA
static ::_pb::Metadata file_level_metadata_fragment_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_fragment_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_fragment_2eproto = nullptr;

const uint32_t TableStruct_fragment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, _impl_.rows_),
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, _impl_.cols_),
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, _impl_.rows_),
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, _impl_.cols_),
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.levels_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.level_error_bounds_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.stopping_indices_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.table_content_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.squared_errors_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _impl_.tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.hd_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.ec_backend_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _impl_.encoded_fragment_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.hd_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.ec_backend_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.encoded_fragment_length_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.idx_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.orig_data_size_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.chksum_mismatch_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.backend_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.frag_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.is_data_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.chunk_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.fragment_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_dimensions_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_type_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_levels_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_level_error_bounds_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_stopping_indices_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_table_content_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_squared_errors_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.var_tiers_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _impl_.sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableCollection, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, _impl_.tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, _impl_.chunk_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, _impl_.var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, _impl_.tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, _impl_.tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, _impl_.chunk_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, _impl_.var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, _impl_.tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::Metadata, _impl_.variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.chunks_processed_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.total_fragments_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.expected_fragments_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.time_window_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _impl_.lambda_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::TierCompleteAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::TierCompleteAck, _impl_.tier_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DATA::ControlMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::DATA::ControlMessage, _impl_.var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::ControlMessage, _impl_.tier_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::DATA::QueryTable)},
  { 9, -1, -1, sizeof(::DATA::SquaredErrorsTable)},
  { 18, -1, -1, sizeof(::DATA::Variable)},
  { 33, -1, -1, sizeof(::DATA::Tier)},
  { 46, -1, -1, sizeof(::DATA::Fragment)},
  { 79, -1, -1, sizeof(::DATA::VariableCollection)},
  { 86, -1, -1, sizeof(::DATA::RetransmissionRequest_VariableRequest_TierRequest)},
  { 94, -1, -1, sizeof(::DATA::RetransmissionRequest_VariableRequest)},
  { 102, -1, -1, sizeof(::DATA::RetransmissionRequest)},
  { 109, -1, -1, sizeof(::DATA::TierMetadata)},
  { 118, -1, -1, sizeof(::DATA::VariableMetadata)},
  { 126, -1, -1, sizeof(::DATA::Metadata)},
  { 133, -1, -1, sizeof(::DATA::FragmentsReport)},
  { 146, -1, -1, sizeof(::DATA::TierCompleteAck)},
  { 153, -1, -1, sizeof(::DATA::ControlMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::DATA::_QueryTable_default_instance_._instance,
  &::DATA::_SquaredErrorsTable_default_instance_._instance,
  &::DATA::_Variable_default_instance_._instance,
  &::DATA::_Tier_default_instance_._instance,
  &::DATA::_Fragment_default_instance_._instance,
  &::DATA::_VariableCollection_default_instance_._instance,
  &::DATA::_RetransmissionRequest_VariableRequest_TierRequest_default_instance_._instance,
  &::DATA::_RetransmissionRequest_VariableRequest_default_instance_._instance,
  &::DATA::_RetransmissionRequest_default_instance_._instance,
  &::DATA::_TierMetadata_default_instance_._instance,
  &::DATA::_VariableMetadata_default_instance_._instance,
  &::DATA::_Metadata_default_instance_._instance,
  &::DATA::_FragmentsReport_default_instance_._instance,
  &::DATA::_TierCompleteAck_default_instance_._instance,
  &::DATA::_ControlMessage_default_instance_._instance,
};

const char descriptor_table_protodef_fragment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016fragment.proto\022\004DATA\"9\n\nQueryTable\022\014\n\004"
  "rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\017\n\007content\030\003 \003("
  "\004\"A\n\022SquaredErrorsTable\022\014\n\004rows\030\001 \001(\005\022\014\n"
  "\004cols\030\002 \001(\005\022\017\n\007content\030\003 \003(\001\"\352\001\n\010Variabl"
  "e\022\014\n\004name\030\001 \001(\t\022\022\n\ndimensions\030\002 \003(\r\022\014\n\004t"
  "ype\030\003 \001(\t\022\016\n\006levels\030\004 \001(\r\022\032\n\022level_error"
  "_bounds\030\005 \003(\001\022\030\n\020stopping_indices\030\006 \003(\r\022"
  "\'\n\rtable_content\030\007 \001(\0132\020.DATA.QueryTable"
  "\0220\n\016squared_errors\030\010 \001(\0132\030.DATA.SquaredE"
  "rrorsTable\022\r\n\005tiers\030\t \001(\r\"y\n\004Tier\022\n\n\002id\030"
  "\001 \001(\005\022\t\n\001k\030\002 \001(\005\022\t\n\001m\030\003 \001(\005\022\t\n\001w\030\004 \001(\005\022\n"
  "\n\002hd\030\005 \001(\005\022\027\n\017ec_backend_name\030\006 \001(\t\022\037\n\027e"
  "ncoded_fragment_length\030\007 \001(\004\"\330\004\n\010Fragmen"
  "t\022\t\n\001k\030\001 \001(\005\022\t\n\001m\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\n\n\002hd"
  "\030\004 \001(\005\022\027\n\017ec_backend_name\030\005 \001(\014\022\037\n\027encod"
  "ed_fragment_length\030\006 \001(\r\022\013\n\003idx\030\007 \001(\r\022\014\n"
  "\004size\030\010 \001(\r\022\026\n\016orig_data_size\030\t \001(\004\022\027\n\017c"
  "hksum_mismatch\030\n \001(\r\022\022\n\nbackend_id\030\013 \001(\r"
  "\022\014\n\004frag\030\014 \001(\014\022\017\n\007is_data\030\r \001(\010\022\017\n\007tier_"
  "id\030\016 \001(\r\022\020\n\010chunk_id\030\017 \001(\r\022\023\n\013fragment_i"
  "d\030\020 \001(\r\022\020\n\010var_name\030\021 \001(\t\022\026\n\016var_dimensi"
  "ons\030\022 \003(\r\022\020\n\010var_type\030\023 \001(\t\022\022\n\nvar_level"
  "s\030\024 \001(\r\022\036\n\026var_level_error_bounds\030\025 \003(\001\022"
  "\034\n\024var_stopping_indices\030\026 \003(\014\022+\n\021var_tab"
  "le_content\030\027 \001(\0132\020.DATA.QueryTable\0224\n\022va"
  "r_squared_errors\030\030 \001(\0132\030.DATA.SquaredErr"
  "orsTable\022\021\n\tvar_tiers\030\031 \001(\r\022\021\n\ttimestamp"
  "\030\032 \001(\004\022\027\n\017sequence_number\030\033 \001(\004\"7\n\022Varia"
  "bleCollection\022!\n\tvariables\030\001 \003(\0132\016.DATA."
  "Variable\"\370\001\n\025RetransmissionRequest\022>\n\tva"
  "riables\030\001 \003(\0132+.DATA.RetransmissionReque"
  "st.VariableRequest\032\236\001\n\017VariableRequest\022\020"
  "\n\010var_name\030\001 \001(\t\022F\n\005tiers\030\002 \003(\01327.DATA.R"
  "etransmissionRequest.VariableRequest.Tie"
  "rRequest\0321\n\013TierRequest\022\017\n\007tier_id\030\001 \001(\005"
  "\022\021\n\tchunk_ids\030\002 \003(\005\"=\n\014TierMetadata\022\017\n\007t"
  "ier_id\030\001 \001(\r\022\t\n\001k\030\002 \001(\r\022\021\n\tchunk_ids\030\003 \003"
  "(\r\"G\n\020VariableMetadata\022\020\n\010var_name\030\001 \001(\t"
  "\022!\n\005tiers\030\002 \003(\0132\022.DATA.TierMetadata\"5\n\010M"
  "etadata\022)\n\tvariables\030\001 \003(\0132\026.DATA.Variab"
  "leMetadata\"\250\001\n\017FragmentsReport\022\020\n\010var_na"
  "me\030\001 \001(\014\022\017\n\007tier_id\030\002 \001(\r\022\030\n\020chunks_proc"
  "essed\030\003 \001(\r\022\027\n\017total_fragments\030\004 \001(\r\022\032\n\022"
  "expected_fragments\030\005 \001(\r\022\023\n\013time_window\030"
  "\006 \001(\004\022\016\n\006lambda\030\007 \001(\001\"\"\n\017TierCompleteAck"
  "\022\017\n\007tier_id\030\001 \001(\r\"\262\001\n\016ControlMessage\022.\n\004"
  "type\030\001 \001(\0162 .DATA.ControlMessage.Control"
  "Type\022\020\n\010var_name\030\002 \001(\t\022\017\n\007tier_id\030\003 \001(\r\""
  "M\n\013ControlType\022\013\n\007UNKNOWN\020\000\022\014\n\010TIER_END\020"
  "\001\022\021\n\rTIER_COMPLETE\020\002\022\020\n\014ALL_COMPLETE\020\003b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_fragment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_fragment_2eproto = {
    false, false, 2006, descriptor_table_protodef_fragment_2eproto,
    "fragment.proto",
    &descriptor_table_fragment_2eproto_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_fragment_2eproto::offsets,
    file_level_metadata_fragment_2eproto, file_level_enum_descriptors_fragment_2eproto,
    file_level_service_descriptors_fragment_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_fragment_2eproto_getter() {
  return &descriptor_table_fragment_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_fragment_2eproto(&descriptor_table_fragment_2eproto);
namespace DATA {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_ControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fragment_2eproto);
  return file_level_enum_descriptors_fragment_2eproto[0];
}
bool ControlMessage_ControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlMessage_ControlType ControlMessage::UNKNOWN;
constexpr ControlMessage_ControlType ControlMessage::TIER_END;
constexpr ControlMessage_ControlType ControlMessage::TIER_COMPLETE;
constexpr ControlMessage_ControlType ControlMessage::ALL_COMPLETE;
constexpr ControlMessage_ControlType ControlMessage::ControlType_MIN;
constexpr ControlMessage_ControlType ControlMessage::ControlType_MAX;
constexpr int ControlMessage::ControlType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class QueryTable::_Internal {
 public:
};

QueryTable::QueryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.QueryTable)
}
QueryTable::QueryTable(const QueryTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){from._impl_.content_}
    , /*decltype(_impl_._content_cached_byte_size_)*/{0}
    , decltype(_impl_.rows_){}
    , decltype(_impl_.cols_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cols_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  // @@protoc_insertion_point(copy_constructor:DATA.QueryTable)
}

inline void QueryTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){arena}
    , /*decltype(_impl_._content_cached_byte_size_)*/{0}
    , decltype(_impl_.rows_){0}
    , decltype(_impl_.cols_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTable::~QueryTable() {
  // @@protoc_insertion_point(destructor:DATA.QueryTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedField();
}

void QueryTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.QueryTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.Clear();
  ::memset(&_impl_.rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cols_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_content(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.QueryTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated uint64 content = 3;
  {
    int byte_size = _impl_._content_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_content(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.QueryTable)
  return target;
}

size_t QueryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.QueryTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 content = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.content_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cols());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTable::GetClassData() const { return &_class_data_; }


void QueryTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTable*>(&to_msg);
  auto& from = static_cast<const QueryTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.QueryTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_.MergeFrom(from._impl_.content_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTable::CopyFrom(const QueryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.QueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTable::IsInitialized() const {
  return true;
}

void QueryTable::InternalSwap(QueryTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryTable, _impl_.cols_)
      + sizeof(QueryTable::_impl_.cols_)
      - PROTOBUF_FIELD_OFFSET(QueryTable, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[0]);
}

// ===================================================================

class SquaredErrorsTable::_Internal {
 public:
};

SquaredErrorsTable::SquaredErrorsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.SquaredErrorsTable)
}
SquaredErrorsTable::SquaredErrorsTable(const SquaredErrorsTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SquaredErrorsTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){from._impl_.content_}
    , decltype(_impl_.rows_){}
    , decltype(_impl_.cols_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cols_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  // @@protoc_insertion_point(copy_constructor:DATA.SquaredErrorsTable)
}

inline void SquaredErrorsTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){arena}
    , decltype(_impl_.rows_){0}
    , decltype(_impl_.cols_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SquaredErrorsTable::~SquaredErrorsTable() {
  // @@protoc_insertion_point(destructor:DATA.SquaredErrorsTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SquaredErrorsTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.~RepeatedField();
}

void SquaredErrorsTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SquaredErrorsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.SquaredErrorsTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.Clear();
  ::memset(&_impl_.rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cols_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SquaredErrorsTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_content(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SquaredErrorsTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.SquaredErrorsTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated double content = 3;
  if (this->_internal_content_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.SquaredErrorsTable)
  return target;
}

size_t SquaredErrorsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.SquaredErrorsTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double content = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_content_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cols());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SquaredErrorsTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SquaredErrorsTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SquaredErrorsTable::GetClassData() const { return &_class_data_; }


void SquaredErrorsTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SquaredErrorsTable*>(&to_msg);
  auto& from = static_cast<const SquaredErrorsTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.SquaredErrorsTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.content_.MergeFrom(from._impl_.content_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SquaredErrorsTable::CopyFrom(const SquaredErrorsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.SquaredErrorsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SquaredErrorsTable::IsInitialized() const {
  return true;
}

void SquaredErrorsTable::InternalSwap(SquaredErrorsTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.content_.InternalSwap(&other->_impl_.content_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SquaredErrorsTable, _impl_.cols_)
      + sizeof(SquaredErrorsTable::_impl_.cols_)
      - PROTOBUF_FIELD_OFFSET(SquaredErrorsTable, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SquaredErrorsTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[1]);
}

// ===================================================================

class Variable::_Internal {
 public:
  static const ::DATA::QueryTable& table_content(const Variable* msg);
  static const ::DATA::SquaredErrorsTable& squared_errors(const Variable* msg);
};

const ::DATA::QueryTable&
Variable::_Internal::table_content(const Variable* msg) {
  return *msg->_impl_.table_content_;
}
const ::DATA::SquaredErrorsTable&
Variable::_Internal::squared_errors(const Variable* msg) {
  return *msg->_impl_.squared_errors_;
}
Variable::Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.Variable)
}
Variable::Variable(const Variable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Variable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.level_error_bounds_){from._impl_.level_error_bounds_}
    , decltype(_impl_.stopping_indices_){from._impl_.stopping_indices_}
    , /*decltype(_impl_._stopping_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.table_content_){nullptr}
    , decltype(_impl_.squared_errors_){nullptr}
    , decltype(_impl_.levels_){}
    , decltype(_impl_.tiers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_content()) {
    _this->_impl_.table_content_ = new ::DATA::QueryTable(*from._impl_.table_content_);
  }
  if (from._internal_has_squared_errors()) {
    _this->_impl_.squared_errors_ = new ::DATA::SquaredErrorsTable(*from._impl_.squared_errors_);
  }
  ::memcpy(&_impl_.levels_, &from._impl_.levels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tiers_) -
    reinterpret_cast<char*>(&_impl_.levels_)) + sizeof(_impl_.tiers_));
  // @@protoc_insertion_point(copy_constructor:DATA.Variable)
}

inline void Variable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.level_error_bounds_){arena}
    , decltype(_impl_.stopping_indices_){arena}
    , /*decltype(_impl_._stopping_indices_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.table_content_){nullptr}
    , decltype(_impl_.squared_errors_){nullptr}
    , decltype(_impl_.levels_){0u}
    , decltype(_impl_.tiers_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:DATA.Variable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Variable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
  _impl_.level_error_bounds_.~RepeatedField();
  _impl_.stopping_indices_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_content_;
  if (this != internal_default_instance()) delete _impl_.squared_errors_;
}

void Variable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Variable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _impl_.level_error_bounds_.Clear();
  _impl_.stopping_indices_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.table_content_ != nullptr) {
    delete _impl_.table_content_;
  }
  _impl_.table_content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.squared_errors_ != nullptr) {
    delete _impl_.squared_errors_;
  }
  _impl_.squared_errors_ = nullptr;
  ::memset(&_impl_.levels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tiers_) -
      reinterpret_cast<char*>(&_impl_.levels_)) + sizeof(_impl_.tiers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Variable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Variable.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Variable.type"));
        } else
          goto handle_unusual;
        continue;
      // uint32 levels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double level_error_bounds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_level_error_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_level_error_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stopping_indices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stopping_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_stopping_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DATA.QueryTable table_content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DATA.SquaredErrorsTable squared_errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_squared_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tiers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Variable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Variable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Variable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint32 dimensions = 2;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_dimensions(), byte_size, target);
    }
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Variable.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // uint32 levels = 4;
  if (this->_internal_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_levels(), target);
  }

  // repeated double level_error_bounds = 5;
  if (this->_internal_level_error_bounds_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_level_error_bounds(), target);
  }

  // repeated uint32 stopping_indices = 6;
  {
    int byte_size = _impl_._stopping_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_stopping_indices(), byte_size, target);
    }
  }

  // .DATA.QueryTable table_content = 7;
  if (this->_internal_has_table_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::table_content(this),
        _Internal::table_content(this).GetCachedSize(), target, stream);
  }

  // .DATA.SquaredErrorsTable squared_errors = 8;
  if (this->_internal_has_squared_errors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::squared_errors(this),
        _Internal::squared_errors(this).GetCachedSize(), target, stream);
  }

  // uint32 tiers = 9;
  if (this->_internal_tiers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Variable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dimensions = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double level_error_bounds = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_level_error_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 stopping_indices = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.stopping_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stopping_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .DATA.QueryTable table_content = 7;
  if (this->_internal_has_table_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_content_);
  }

  // .DATA.SquaredErrorsTable squared_errors = 8;
  if (this->_internal_has_squared_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.squared_errors_);
  }

  // uint32 levels = 4;
  if (this->_internal_levels() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_levels());
  }

  // uint32 tiers = 9;
  if (this->_internal_tiers() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tiers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Variable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Variable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Variable::GetClassData() const { return &_class_data_; }


void Variable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Variable*>(&to_msg);
  auto& from = static_cast<const Variable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Variable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.level_error_bounds_.MergeFrom(from._impl_.level_error_bounds_);
  _this->_impl_.stopping_indices_.MergeFrom(from._impl_.stopping_indices_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_has_table_content()) {
    _this->_internal_mutable_table_content()->::DATA::QueryTable::MergeFrom(
        from._internal_table_content());
  }
  if (from._internal_has_squared_errors()) {
    _this->_internal_mutable_squared_errors()->::DATA::SquaredErrorsTable::MergeFrom(
        from._internal_squared_errors());
  }
  if (from._internal_levels() != 0) {
    _this->_internal_set_levels(from._internal_levels());
  }
  if (from._internal_tiers() != 0) {
    _this->_internal_set_tiers(from._internal_tiers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::InternalSwap(Variable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.level_error_bounds_.InternalSwap(&other->_impl_.level_error_bounds_);
  _impl_.stopping_indices_.InternalSwap(&other->_impl_.stopping_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Variable, _impl_.tiers_)
      + sizeof(Variable::_impl_.tiers_)
      - PROTOBUF_FIELD_OFFSET(Variable, _impl_.table_content_)>(
          reinterpret_cast<char*>(&_impl_.table_content_),
          reinterpret_cast<char*>(&other->_impl_.table_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Variable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[2]);
}

// ===================================================================

class Tier::_Internal {
 public:
};

Tier::Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.Tier)
}
Tier::Tier(const Tier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ec_backend_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.w_){}
    , decltype(_impl_.encoded_fragment_length_){}
    , decltype(_impl_.hd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ec_backend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec_backend_name().empty()) {
    _this->_impl_.ec_backend_name_.Set(from._internal_ec_backend_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hd_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hd_));
  // @@protoc_insertion_point(copy_constructor:DATA.Tier)
}

inline void Tier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ec_backend_name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.encoded_fragment_length_){uint64_t{0u}}
    , decltype(_impl_.hd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ec_backend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:DATA.Tier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Tier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ec_backend_name_.Destroy();
}

void Tier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Tier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ec_backend_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hd_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.hd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ec_backend_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ec_backend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Tier.ec_backend_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 encoded_fragment_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.encoded_fragment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Tier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 k = 2;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_k(), target);
  }

  // int32 m = 3;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_m(), target);
  }

  // int32 w = 4;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_w(), target);
  }

  // int32 hd = 5;
  if (this->_internal_hd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hd(), target);
  }

  // string ec_backend_name = 6;
  if (!this->_internal_ec_backend_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ec_backend_name().data(), static_cast<int>(this->_internal_ec_backend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Tier.ec_backend_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ec_backend_name(), target);
  }

  // uint64 encoded_fragment_length = 7;
  if (this->_internal_encoded_fragment_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_encoded_fragment_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Tier)
  return target;
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Tier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ec_backend_name = 6;
  if (!this->_internal_ec_backend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ec_backend_name());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 k = 2;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 m = 3;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  // int32 w = 4;
  if (this->_internal_w() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_w());
  }

  // uint64 encoded_fragment_length = 7;
  if (this->_internal_encoded_fragment_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_encoded_fragment_length());
  }

  // int32 hd = 5;
  if (this->_internal_hd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tier::GetClassData() const { return &_class_data_; }


void Tier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tier*>(&to_msg);
  auto& from = static_cast<const Tier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Tier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ec_backend_name().empty()) {
    _this->_internal_set_ec_backend_name(from._internal_ec_backend_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  if (from._internal_w() != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  if (from._internal_encoded_fragment_length() != 0) {
    _this->_internal_set_encoded_fragment_length(from._internal_encoded_fragment_length());
  }
  if (from._internal_hd() != 0) {
    _this->_internal_set_hd(from._internal_hd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tier::IsInitialized() const {
  return true;
}

void Tier::InternalSwap(Tier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ec_backend_name_, lhs_arena,
      &other->_impl_.ec_backend_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tier, _impl_.hd_)
      + sizeof(Tier::_impl_.hd_)
      - PROTOBUF_FIELD_OFFSET(Tier, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[3]);
}

// ===================================================================

class Fragment::_Internal {
 public:
  static const ::DATA::QueryTable& var_table_content(const Fragment* msg);
  static const ::DATA::SquaredErrorsTable& var_squared_errors(const Fragment* msg);
};

const ::DATA::QueryTable&
Fragment::_Internal::var_table_content(const Fragment* msg) {
  return *msg->_impl_.var_table_content_;
}
const ::DATA::SquaredErrorsTable&
Fragment::_Internal::var_squared_errors(const Fragment* msg) {
  return *msg->_impl_.var_squared_errors_;
}
Fragment::Fragment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.Fragment)
}
Fragment::Fragment(const Fragment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fragment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_dimensions_){from._impl_.var_dimensions_}
    , /*decltype(_impl_._var_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.var_level_error_bounds_){from._impl_.var_level_error_bounds_}
    , decltype(_impl_.var_stopping_indices_){from._impl_.var_stopping_indices_}
    , decltype(_impl_.ec_backend_name_){}
    , decltype(_impl_.frag_){}
    , decltype(_impl_.var_name_){}
    , decltype(_impl_.var_type_){}
    , decltype(_impl_.var_table_content_){nullptr}
    , decltype(_impl_.var_squared_errors_){nullptr}
    , decltype(_impl_.k_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.w_){}
    , decltype(_impl_.hd_){}
    , decltype(_impl_.encoded_fragment_length_){}
    , decltype(_impl_.idx_){}
    , decltype(_impl_.orig_data_size_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.chksum_mismatch_){}
    , decltype(_impl_.backend_id_){}
    , decltype(_impl_.is_data_){}
    , decltype(_impl_.tier_id_){}
    , decltype(_impl_.chunk_id_){}
    , decltype(_impl_.fragment_id_){}
    , decltype(_impl_.var_levels_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.sequence_number_){}
    , decltype(_impl_.var_tiers_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ec_backend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ec_backend_name().empty()) {
    _this->_impl_.ec_backend_name_.Set(from._internal_ec_backend_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frag().empty()) {
    _this->_impl_.frag_.Set(from._internal_frag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_name().empty()) {
    _this->_impl_.var_name_.Set(from._internal_var_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.var_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_type().empty()) {
    _this->_impl_.var_type_.Set(from._internal_var_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_var_table_content()) {
    _this->_impl_.var_table_content_ = new ::DATA::QueryTable(*from._impl_.var_table_content_);
  }
  if (from._internal_has_var_squared_errors()) {
    _this->_impl_.var_squared_errors_ = new ::DATA::SquaredErrorsTable(*from._impl_.var_squared_errors_);
  }
  ::memcpy(&_impl_.k_, &from._impl_.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.var_tiers_) -
    reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.var_tiers_));
  // @@protoc_insertion_point(copy_constructor:DATA.Fragment)
}

inline void Fragment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_dimensions_){arena}
    , /*decltype(_impl_._var_dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.var_level_error_bounds_){arena}
    , decltype(_impl_.var_stopping_indices_){arena}
    , decltype(_impl_.ec_backend_name_){}
    , decltype(_impl_.frag_){}
    , decltype(_impl_.var_name_){}
    , decltype(_impl_.var_type_){}
    , decltype(_impl_.var_table_content_){nullptr}
    , decltype(_impl_.var_squared_errors_){nullptr}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.m_){0}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.hd_){0}
    , decltype(_impl_.encoded_fragment_length_){0u}
    , decltype(_impl_.idx_){0u}
    , decltype(_impl_.orig_data_size_){uint64_t{0u}}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.chksum_mismatch_){0u}
    , decltype(_impl_.backend_id_){0u}
    , decltype(_impl_.is_data_){false}
    , decltype(_impl_.tier_id_){0u}
    , decltype(_impl_.chunk_id_){0u}
    , decltype(_impl_.fragment_id_){0u}
    , decltype(_impl_.var_levels_){0u}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.sequence_number_){uint64_t{0u}}
    , decltype(_impl_.var_tiers_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ec_backend_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.var_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Fragment::~Fragment() {
  // @@protoc_insertion_point(destructor:DATA.Fragment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fragment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_dimensions_.~RepeatedField();
  _impl_.var_level_error_bounds_.~RepeatedField();
  _impl_.var_stopping_indices_.~RepeatedPtrField();
  _impl_.ec_backend_name_.Destroy();
  _impl_.frag_.Destroy();
  _impl_.var_name_.Destroy();
  _impl_.var_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.var_table_content_;
  if (this != internal_default_instance()) delete _impl_.var_squared_errors_;
}

void Fragment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fragment::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Fragment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_dimensions_.Clear();
  _impl_.var_level_error_bounds_.Clear();
  _impl_.var_stopping_indices_.Clear();
  _impl_.ec_backend_name_.ClearToEmpty();
  _impl_.frag_.ClearToEmpty();
  _impl_.var_name_.ClearToEmpty();
  _impl_.var_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.var_table_content_ != nullptr) {
    delete _impl_.var_table_content_;
  }
  _impl_.var_table_content_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.var_squared_errors_ != nullptr) {
    delete _impl_.var_squared_errors_;
  }
  _impl_.var_squared_errors_ = nullptr;
  ::memset(&_impl_.k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.var_tiers_) -
      reinterpret_cast<char*>(&_impl_.k_)) + sizeof(_impl_.var_tiers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fragment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes ec_backend_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ec_backend_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 encoded_fragment_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.encoded_fragment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 orig_data_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.orig_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chksum_mismatch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.chksum_mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 backend_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.backend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes frag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_frag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tier_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunk_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fragment_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_var_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Fragment.var_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 var_dimensions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_var_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_var_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string var_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_var_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.Fragment.var_type"));
        } else
          goto handle_unusual;
        continue;
      // uint32 var_levels = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.var_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double var_level_error_bounds = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_var_level_error_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 169) {
          _internal_add_var_level_error_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes var_stopping_indices = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_var_stopping_indices();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .DATA.QueryTable var_table_content = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_table_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .DATA.SquaredErrorsTable var_squared_errors = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_squared_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 var_tiers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.var_tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 sequence_number = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Fragment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Fragment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // int32 m = 2;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_m(), target);
  }

  // int32 w = 3;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // int32 hd = 4;
  if (this->_internal_hd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hd(), target);
  }

  // bytes ec_backend_name = 5;
  if (!this->_internal_ec_backend_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ec_backend_name(), target);
  }

  // uint32 encoded_fragment_length = 6;
  if (this->_internal_encoded_fragment_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_encoded_fragment_length(), target);
  }

  // uint32 idx = 7;
  if (this->_internal_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_idx(), target);
  }

  // uint32 size = 8;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_size(), target);
  }

  // uint64 orig_data_size = 9;
  if (this->_internal_orig_data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_orig_data_size(), target);
  }

  // uint32 chksum_mismatch = 10;
  if (this->_internal_chksum_mismatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chksum_mismatch(), target);
  }

  // uint32 backend_id = 11;
  if (this->_internal_backend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_backend_id(), target);
  }

  // bytes frag = 12;
  if (!this->_internal_frag().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_frag(), target);
  }

  // bool is_data = 13;
  if (this->_internal_is_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_data(), target);
  }

  // uint32 tier_id = 14;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tier_id(), target);
  }

  // uint32 chunk_id = 15;
  if (this->_internal_chunk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_chunk_id(), target);
  }

  // uint32 fragment_id = 16;
  if (this->_internal_fragment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_fragment_id(), target);
  }

  // string var_name = 17;
  if (!this->_internal_var_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Fragment.var_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_var_name(), target);
  }

  // repeated uint32 var_dimensions = 18;
  {
    int byte_size = _impl_._var_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          18, _internal_var_dimensions(), byte_size, target);
    }
  }

  // string var_type = 19;
  if (!this->_internal_var_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_type().data(), static_cast<int>(this->_internal_var_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Fragment.var_type");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_var_type(), target);
  }

  // uint32 var_levels = 20;
  if (this->_internal_var_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_var_levels(), target);
  }

  // repeated double var_level_error_bounds = 21;
  if (this->_internal_var_level_error_bounds_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_var_level_error_bounds(), target);
  }

  // repeated bytes var_stopping_indices = 22;
  for (int i = 0, n = this->_internal_var_stopping_indices_size(); i < n; i++) {
    const auto& s = this->_internal_var_stopping_indices(i);
    target = stream->WriteBytes(22, s, target);
  }

  // .DATA.QueryTable var_table_content = 23;
  if (this->_internal_has_var_table_content()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::var_table_content(this),
        _Internal::var_table_content(this).GetCachedSize(), target, stream);
  }

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  if (this->_internal_has_var_squared_errors()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::var_squared_errors(this),
        _Internal::var_squared_errors(this).GetCachedSize(), target, stream);
  }

  // uint32 var_tiers = 25;
  if (this->_internal_var_tiers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_var_tiers(), target);
  }

  // uint64 timestamp = 26;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(26, this->_internal_timestamp(), target);
  }

  // uint64 sequence_number = 27;
  if (this->_internal_sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Fragment)
  return target;
}

size_t Fragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Fragment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 var_dimensions = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.var_dimensions_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._var_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double var_level_error_bounds = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_level_error_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated bytes var_stopping_indices = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.var_stopping_indices_.size());
  for (int i = 0, n = _impl_.var_stopping_indices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.var_stopping_indices_.Get(i));
  }

  // bytes ec_backend_name = 5;
  if (!this->_internal_ec_backend_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ec_backend_name());
  }

  // bytes frag = 12;
  if (!this->_internal_frag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frag());
  }

  // string var_name = 17;
  if (!this->_internal_var_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  // string var_type = 19;
  if (!this->_internal_var_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_type());
  }

  // .DATA.QueryTable var_table_content = 23;
  if (this->_internal_has_var_table_content()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.var_table_content_);
  }

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  if (this->_internal_has_var_squared_errors()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.var_squared_errors_);
  }

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 m = 2;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_m());
  }

  // int32 w = 3;
  if (this->_internal_w() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_w());
  }

  // int32 hd = 4;
  if (this->_internal_hd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hd());
  }

  // uint32 encoded_fragment_length = 6;
  if (this->_internal_encoded_fragment_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encoded_fragment_length());
  }

  // uint32 idx = 7;
  if (this->_internal_idx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_idx());
  }

  // uint64 orig_data_size = 9;
  if (this->_internal_orig_data_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_orig_data_size());
  }

  // uint32 size = 8;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // uint32 chksum_mismatch = 10;
  if (this->_internal_chksum_mismatch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chksum_mismatch());
  }

  // uint32 backend_id = 11;
  if (this->_internal_backend_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_backend_id());
  }

  // bool is_data = 13;
  if (this->_internal_is_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tier_id = 14;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_id());
  }

  // uint32 chunk_id = 15;
  if (this->_internal_chunk_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunk_id());
  }

  // uint32 fragment_id = 16;
  if (this->_internal_fragment_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_fragment_id());
  }

  // uint32 var_levels = 20;
  if (this->_internal_var_levels() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_var_levels());
  }

  // uint64 timestamp = 26;
  if (this->_internal_timestamp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 sequence_number = 27;
  if (this->_internal_sequence_number() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint32 var_tiers = 25;
  if (this->_internal_var_tiers() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_var_tiers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fragment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fragment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fragment::GetClassData() const { return &_class_data_; }


void Fragment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fragment*>(&to_msg);
  auto& from = static_cast<const Fragment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Fragment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.var_dimensions_.MergeFrom(from._impl_.var_dimensions_);
  _this->_impl_.var_level_error_bounds_.MergeFrom(from._impl_.var_level_error_bounds_);
  _this->_impl_.var_stopping_indices_.MergeFrom(from._impl_.var_stopping_indices_);
  if (!from._internal_ec_backend_name().empty()) {
    _this->_internal_set_ec_backend_name(from._internal_ec_backend_name());
  }
  if (!from._internal_frag().empty()) {
    _this->_internal_set_frag(from._internal_frag());
  }
  if (!from._internal_var_name().empty()) {
    _this->_internal_set_var_name(from._internal_var_name());
  }
  if (!from._internal_var_type().empty()) {
    _this->_internal_set_var_type(from._internal_var_type());
  }
  if (from._internal_has_var_table_content()) {
    _this->_internal_mutable_var_table_content()->::DATA::QueryTable::MergeFrom(
        from._internal_var_table_content());
  }
  if (from._internal_has_var_squared_errors()) {
    _this->_internal_mutable_var_squared_errors()->::DATA::SquaredErrorsTable::MergeFrom(
        from._internal_var_squared_errors());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  if (from._internal_w() != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  if (from._internal_hd() != 0) {
    _this->_internal_set_hd(from._internal_hd());
  }
  if (from._internal_encoded_fragment_length() != 0) {
    _this->_internal_set_encoded_fragment_length(from._internal_encoded_fragment_length());
  }
  if (from._internal_idx() != 0) {
    _this->_internal_set_idx(from._internal_idx());
  }
  if (from._internal_orig_data_size() != 0) {
    _this->_internal_set_orig_data_size(from._internal_orig_data_size());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_chksum_mismatch() != 0) {
    _this->_internal_set_chksum_mismatch(from._internal_chksum_mismatch());
  }
  if (from._internal_backend_id() != 0) {
    _this->_internal_set_backend_id(from._internal_backend_id());
  }
  if (from._internal_is_data() != 0) {
    _this->_internal_set_is_data(from._internal_is_data());
  }
  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  if (from._internal_chunk_id() != 0) {
    _this->_internal_set_chunk_id(from._internal_chunk_id());
  }
  if (from._internal_fragment_id() != 0) {
    _this->_internal_set_fragment_id(from._internal_fragment_id());
  }
  if (from._internal_var_levels() != 0) {
    _this->_internal_set_var_levels(from._internal_var_levels());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_sequence_number() != 0) {
    _this->_internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from._internal_var_tiers() != 0) {
    _this->_internal_set_var_tiers(from._internal_var_tiers());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fragment::CopyFrom(const Fragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Fragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fragment::IsInitialized() const {
  return true;
}

void Fragment::InternalSwap(Fragment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.var_dimensions_.InternalSwap(&other->_impl_.var_dimensions_);
  _impl_.var_level_error_bounds_.InternalSwap(&other->_impl_.var_level_error_bounds_);
  _impl_.var_stopping_indices_.InternalSwap(&other->_impl_.var_stopping_indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ec_backend_name_, lhs_arena,
      &other->_impl_.ec_backend_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frag_, lhs_arena,
      &other->_impl_.frag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_name_, lhs_arena,
      &other->_impl_.var_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_type_, lhs_arena,
      &other->_impl_.var_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fragment, _impl_.var_tiers_)
      + sizeof(Fragment::_impl_.var_tiers_)
      - PROTOBUF_FIELD_OFFSET(Fragment, _impl_.var_table_content_)>(
          reinterpret_cast<char*>(&_impl_.var_table_content_),
          reinterpret_cast<char*>(&other->_impl_.var_table_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fragment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[4]);
}

// ===================================================================

class VariableCollection::_Internal {
 public:
};

VariableCollection::VariableCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.VariableCollection)
}
VariableCollection::VariableCollection(const VariableCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariableCollection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.VariableCollection)
}

inline void VariableCollection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VariableCollection::~VariableCollection() {
  // @@protoc_insertion_point(destructor:DATA.VariableCollection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariableCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}

void VariableCollection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariableCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.VariableCollection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableCollection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DATA.Variable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableCollection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.VariableCollection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.Variable variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.VariableCollection)
  return target;
}

size_t VariableCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.VariableCollection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.Variable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableCollection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariableCollection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableCollection::GetClassData() const { return &_class_data_; }


void VariableCollection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariableCollection*>(&to_msg);
  auto& from = static_cast<const VariableCollection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.VariableCollection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableCollection::CopyFrom(const VariableCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.VariableCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableCollection::IsInitialized() const {
  return true;
}

void VariableCollection::InternalSwap(VariableCollection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableCollection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[5]);
}

// ===================================================================

class RetransmissionRequest_VariableRequest_TierRequest::_Internal {
 public:
};

RetransmissionRequest_VariableRequest_TierRequest::RetransmissionRequest_VariableRequest_TierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
}
RetransmissionRequest_VariableRequest_TierRequest::RetransmissionRequest_VariableRequest_TierRequest(const RetransmissionRequest_VariableRequest_TierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetransmissionRequest_VariableRequest_TierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_ids_){from._impl_.chunk_ids_}
    , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tier_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tier_id_ = from._impl_.tier_id_;
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
}

inline void RetransmissionRequest_VariableRequest_TierRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_ids_){arena}
    , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tier_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RetransmissionRequest_VariableRequest_TierRequest::~RetransmissionRequest_VariableRequest_TierRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetransmissionRequest_VariableRequest_TierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_ids_.~RepeatedField();
}

void RetransmissionRequest_VariableRequest_TierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetransmissionRequest_VariableRequest_TierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_ids_.Clear();
  _impl_.tier_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest_VariableRequest_TierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 chunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chunk_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetransmissionRequest_VariableRequest_TierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tier_id(), target);
  }

  // repeated int32 chunk_ids = 2;
  {
    int byte_size = _impl_._chunk_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_chunk_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  return target;
}

size_t RetransmissionRequest_VariableRequest_TierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chunk_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.chunk_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chunk_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tier_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetransmissionRequest_VariableRequest_TierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetransmissionRequest_VariableRequest_TierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetransmissionRequest_VariableRequest_TierRequest::GetClassData() const { return &_class_data_; }


void RetransmissionRequest_VariableRequest_TierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetransmissionRequest_VariableRequest_TierRequest*>(&to_msg);
  auto& from = static_cast<const RetransmissionRequest_VariableRequest_TierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunk_ids_.MergeFrom(from._impl_.chunk_ids_);
  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetransmissionRequest_VariableRequest_TierRequest::CopyFrom(const RetransmissionRequest_VariableRequest_TierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest_VariableRequest_TierRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest_VariableRequest_TierRequest::InternalSwap(RetransmissionRequest_VariableRequest_TierRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunk_ids_.InternalSwap(&other->_impl_.chunk_ids_);
  swap(_impl_.tier_id_, other->_impl_.tier_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest_VariableRequest_TierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[6]);
}

// ===================================================================

class RetransmissionRequest_VariableRequest::_Internal {
 public:
};

RetransmissionRequest_VariableRequest::RetransmissionRequest_VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest.VariableRequest)
}
RetransmissionRequest_VariableRequest::RetransmissionRequest_VariableRequest(const RetransmissionRequest_VariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetransmissionRequest_VariableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){from._impl_.tiers_}
    , decltype(_impl_.var_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_name().empty()) {
    _this->_impl_.var_name_.Set(from._internal_var_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest.VariableRequest)
}

inline void RetransmissionRequest_VariableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){arena}
    , decltype(_impl_.var_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RetransmissionRequest_VariableRequest::~RetransmissionRequest_VariableRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest.VariableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetransmissionRequest_VariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tiers_.~RepeatedPtrField();
  _impl_.var_name_.Destroy();
}

void RetransmissionRequest_VariableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetransmissionRequest_VariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest.VariableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tiers_.Clear();
  _impl_.var_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest_VariableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.RetransmissionRequest.VariableRequest.var_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetransmissionRequest_VariableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest.VariableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_name = 1;
  if (!this->_internal_var_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.RetransmissionRequest.VariableRequest.var_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest.VariableRequest)
  return target;
}

size_t RetransmissionRequest_VariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest.VariableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->_impl_.tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string var_name = 1;
  if (!this->_internal_var_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetransmissionRequest_VariableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetransmissionRequest_VariableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetransmissionRequest_VariableRequest::GetClassData() const { return &_class_data_; }


void RetransmissionRequest_VariableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetransmissionRequest_VariableRequest*>(&to_msg);
  auto& from = static_cast<const RetransmissionRequest_VariableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest.VariableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tiers_.MergeFrom(from._impl_.tiers_);
  if (!from._internal_var_name().empty()) {
    _this->_internal_set_var_name(from._internal_var_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetransmissionRequest_VariableRequest::CopyFrom(const RetransmissionRequest_VariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest.VariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest_VariableRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest_VariableRequest::InternalSwap(RetransmissionRequest_VariableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tiers_.InternalSwap(&other->_impl_.tiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_name_, lhs_arena,
      &other->_impl_.var_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest_VariableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[7]);
}

// ===================================================================

class RetransmissionRequest::_Internal {
 public:
};

RetransmissionRequest::RetransmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest)
}
RetransmissionRequest::RetransmissionRequest(const RetransmissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RetransmissionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest)
}

inline void RetransmissionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RetransmissionRequest::~RetransmissionRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RetransmissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}

void RetransmissionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RetransmissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RetransmissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest)
  return target;
}

size_t RetransmissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RetransmissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RetransmissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RetransmissionRequest::GetClassData() const { return &_class_data_; }


void RetransmissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RetransmissionRequest*>(&to_msg);
  auto& from = static_cast<const RetransmissionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RetransmissionRequest::CopyFrom(const RetransmissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest::InternalSwap(RetransmissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[8]);
}

// ===================================================================

class TierMetadata::_Internal {
 public:
};

TierMetadata::TierMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.TierMetadata)
}
TierMetadata::TierMetadata(const TierMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TierMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_ids_){from._impl_.chunk_ids_}
    , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tier_id_){}
    , decltype(_impl_.k_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tier_id_, &from._impl_.tier_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k_) -
    reinterpret_cast<char*>(&_impl_.tier_id_)) + sizeof(_impl_.k_));
  // @@protoc_insertion_point(copy_constructor:DATA.TierMetadata)
}

inline void TierMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_ids_){arena}
    , /*decltype(_impl_._chunk_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tier_id_){0u}
    , decltype(_impl_.k_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TierMetadata::~TierMetadata() {
  // @@protoc_insertion_point(destructor:DATA.TierMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TierMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_ids_.~RepeatedField();
}

void TierMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TierMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.TierMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_ids_.Clear();
  ::memset(&_impl_.tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.k_) -
      reinterpret_cast<char*>(&_impl_.tier_id_)) + sizeof(_impl_.k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TierMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 chunk_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chunk_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TierMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.TierMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tier_id(), target);
  }

  // uint32 k = 2;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_k(), target);
  }

  // repeated uint32 chunk_ids = 3;
  {
    int byte_size = _impl_._chunk_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_chunk_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.TierMetadata)
  return target;
}

size_t TierMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.TierMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 chunk_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chunk_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chunk_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_id());
  }

  // uint32 k = 2;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_k());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TierMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TierMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TierMetadata::GetClassData() const { return &_class_data_; }


void TierMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TierMetadata*>(&to_msg);
  auto& from = static_cast<const TierMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.TierMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunk_ids_.MergeFrom(from._impl_.chunk_ids_);
  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TierMetadata::CopyFrom(const TierMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.TierMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TierMetadata::IsInitialized() const {
  return true;
}

void TierMetadata::InternalSwap(TierMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunk_ids_.InternalSwap(&other->_impl_.chunk_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TierMetadata, _impl_.k_)
      + sizeof(TierMetadata::_impl_.k_)
      - PROTOBUF_FIELD_OFFSET(TierMetadata, _impl_.tier_id_)>(
          reinterpret_cast<char*>(&_impl_.tier_id_),
          reinterpret_cast<char*>(&other->_impl_.tier_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TierMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[9]);
}

// ===================================================================

class VariableMetadata::_Internal {
 public:
};

VariableMetadata::VariableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.VariableMetadata)
}
VariableMetadata::VariableMetadata(const VariableMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariableMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){from._impl_.tiers_}
    , decltype(_impl_.var_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_name().empty()) {
    _this->_impl_.var_name_.Set(from._internal_var_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.VariableMetadata)
}

inline void VariableMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){arena}
    , decltype(_impl_.var_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableMetadata::~VariableMetadata() {
  // @@protoc_insertion_point(destructor:DATA.VariableMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariableMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tiers_.~RepeatedPtrField();
  _impl_.var_name_.Destroy();
}

void VariableMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariableMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.VariableMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tiers_.Clear();
  _impl_.var_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.VariableMetadata.var_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .DATA.TierMetadata tiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.VariableMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_name = 1;
  if (!this->_internal_var_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.VariableMetadata.var_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // repeated .DATA.TierMetadata tiers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.VariableMetadata)
  return target;
}

size_t VariableMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.VariableMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.TierMetadata tiers = 2;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->_impl_.tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string var_name = 1;
  if (!this->_internal_var_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariableMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableMetadata::GetClassData() const { return &_class_data_; }


void VariableMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariableMetadata*>(&to_msg);
  auto& from = static_cast<const VariableMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.VariableMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tiers_.MergeFrom(from._impl_.tiers_);
  if (!from._internal_var_name().empty()) {
    _this->_internal_set_var_name(from._internal_var_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableMetadata::CopyFrom(const VariableMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.VariableMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableMetadata::IsInitialized() const {
  return true;
}

void VariableMetadata::InternalSwap(VariableMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tiers_.InternalSwap(&other->_impl_.tiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_name_, lhs_arena,
      &other->_impl_.var_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[10]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){from._impl_.variables_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.Metadata)
}

inline void Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variables_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:DATA.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variables_.~RepeatedPtrField();
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .DATA.VariableMetadata variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.VariableMetadata variables = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.VariableMetadata variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->_impl_.variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.variables_.MergeFrom(from._impl_.variables_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.variables_.InternalSwap(&other->_impl_.variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[11]);
}

// ===================================================================

class FragmentsReport::_Internal {
 public:
};

FragmentsReport::FragmentsReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.FragmentsReport)
}
FragmentsReport::FragmentsReport(const FragmentsReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FragmentsReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_name_){}
    , decltype(_impl_.tier_id_){}
    , decltype(_impl_.chunks_processed_){}
    , decltype(_impl_.total_fragments_){}
    , decltype(_impl_.expected_fragments_){}
    , decltype(_impl_.time_window_){}
    , decltype(_impl_.lambda_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_name().empty()) {
    _this->_impl_.var_name_.Set(from._internal_var_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tier_id_, &from._impl_.tier_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lambda_) -
    reinterpret_cast<char*>(&_impl_.tier_id_)) + sizeof(_impl_.lambda_));
  // @@protoc_insertion_point(copy_constructor:DATA.FragmentsReport)
}

inline void FragmentsReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_name_){}
    , decltype(_impl_.tier_id_){0u}
    , decltype(_impl_.chunks_processed_){0u}
    , decltype(_impl_.total_fragments_){0u}
    , decltype(_impl_.expected_fragments_){0u}
    , decltype(_impl_.time_window_){uint64_t{0u}}
    , decltype(_impl_.lambda_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FragmentsReport::~FragmentsReport() {
  // @@protoc_insertion_point(destructor:DATA.FragmentsReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FragmentsReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_name_.Destroy();
}

void FragmentsReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FragmentsReport::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.FragmentsReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_name_.ClearToEmpty();
  ::memset(&_impl_.tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lambda_) -
      reinterpret_cast<char*>(&_impl_.tier_id_)) + sizeof(_impl_.lambda_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FragmentsReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 tier_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 chunks_processed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chunks_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 total_fragments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 expected_fragments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.expected_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 time_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.time_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lambda = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.lambda_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FragmentsReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.FragmentsReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes var_name = 1;
  if (!this->_internal_var_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // uint32 tier_id = 2;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tier_id(), target);
  }

  // uint32 chunks_processed = 3;
  if (this->_internal_chunks_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunks_processed(), target);
  }

  // uint32 total_fragments = 4;
  if (this->_internal_total_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_fragments(), target);
  }

  // uint32 expected_fragments = 5;
  if (this->_internal_expected_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expected_fragments(), target);
  }

  // uint64 time_window = 6;
  if (this->_internal_time_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_time_window(), target);
  }

  // double lambda = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda = this->_internal_lambda();
  uint64_t raw_lambda;
  memcpy(&raw_lambda, &tmp_lambda, sizeof(tmp_lambda));
  if (raw_lambda != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_lambda(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.FragmentsReport)
  return target;
}

size_t FragmentsReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.FragmentsReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes var_name = 1;
  if (!this->_internal_var_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_name());
  }

  // uint32 tier_id = 2;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_id());
  }

  // uint32 chunks_processed = 3;
  if (this->_internal_chunks_processed() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chunks_processed());
  }

  // uint32 total_fragments = 4;
  if (this->_internal_total_fragments() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_fragments());
  }

  // uint32 expected_fragments = 5;
  if (this->_internal_expected_fragments() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_expected_fragments());
  }

  // uint64 time_window = 6;
  if (this->_internal_time_window() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time_window());
  }

  // double lambda = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda = this->_internal_lambda();
  uint64_t raw_lambda;
  memcpy(&raw_lambda, &tmp_lambda, sizeof(tmp_lambda));
  if (raw_lambda != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FragmentsReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FragmentsReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FragmentsReport::GetClassData() const { return &_class_data_; }


void FragmentsReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FragmentsReport*>(&to_msg);
  auto& from = static_cast<const FragmentsReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.FragmentsReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_name().empty()) {
    _this->_internal_set_var_name(from._internal_var_name());
  }
  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  if (from._internal_chunks_processed() != 0) {
    _this->_internal_set_chunks_processed(from._internal_chunks_processed());
  }
  if (from._internal_total_fragments() != 0) {
    _this->_internal_set_total_fragments(from._internal_total_fragments());
  }
  if (from._internal_expected_fragments() != 0) {
    _this->_internal_set_expected_fragments(from._internal_expected_fragments());
  }
  if (from._internal_time_window() != 0) {
    _this->_internal_set_time_window(from._internal_time_window());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda = from._internal_lambda();
  uint64_t raw_lambda;
  memcpy(&raw_lambda, &tmp_lambda, sizeof(tmp_lambda));
  if (raw_lambda != 0) {
    _this->_internal_set_lambda(from._internal_lambda());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FragmentsReport::CopyFrom(const FragmentsReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.FragmentsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentsReport::IsInitialized() const {
  return true;
}

void FragmentsReport::InternalSwap(FragmentsReport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_name_, lhs_arena,
      &other->_impl_.var_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FragmentsReport, _impl_.lambda_)
      + sizeof(FragmentsReport::_impl_.lambda_)
      - PROTOBUF_FIELD_OFFSET(FragmentsReport, _impl_.tier_id_)>(
          reinterpret_cast<char*>(&_impl_.tier_id_),
          reinterpret_cast<char*>(&other->_impl_.tier_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FragmentsReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[12]);
}

// ===================================================================

class TierCompleteAck::_Internal {
 public:
};

TierCompleteAck::TierCompleteAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.TierCompleteAck)
}
TierCompleteAck::TierCompleteAck(const TierCompleteAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TierCompleteAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tier_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tier_id_ = from._impl_.tier_id_;
  // @@protoc_insertion_point(copy_constructor:DATA.TierCompleteAck)
}

inline void TierCompleteAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tier_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TierCompleteAck::~TierCompleteAck() {
  // @@protoc_insertion_point(destructor:DATA.TierCompleteAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TierCompleteAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TierCompleteAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TierCompleteAck::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.TierCompleteAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tier_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TierCompleteAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TierCompleteAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.TierCompleteAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tier_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.TierCompleteAck)
  return target;
}

size_t TierCompleteAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.TierCompleteAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 tier_id = 1;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TierCompleteAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TierCompleteAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TierCompleteAck::GetClassData() const { return &_class_data_; }


void TierCompleteAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TierCompleteAck*>(&to_msg);
  auto& from = static_cast<const TierCompleteAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.TierCompleteAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TierCompleteAck::CopyFrom(const TierCompleteAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.TierCompleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TierCompleteAck::IsInitialized() const {
  return true;
}

void TierCompleteAck::InternalSwap(TierCompleteAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.tier_id_, other->_impl_.tier_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TierCompleteAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[13]);
}

// ===================================================================

class ControlMessage::_Internal {
 public:
};

ControlMessage::ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:DATA.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.var_name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.tier_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_var_name().empty()) {
    _this->_impl_.var_name_.Set(from._internal_var_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tier_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tier_id_));
  // @@protoc_insertion_point(copy_constructor:DATA.ControlMessage)
}

inline void ControlMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.var_name_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.tier_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.var_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.var_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:DATA.ControlMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.var_name_.Destroy();
}

void ControlMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.ControlMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.var_name_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tier_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.tier_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .DATA.ControlMessage.ControlType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::DATA::ControlMessage_ControlType>(val));
        } else
          goto handle_unusual;
        continue;
      // string var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "DATA.ControlMessage.var_name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 tier_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.ControlMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .DATA.ControlMessage.ControlType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string var_name = 2;
  if (!this->_internal_var_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.ControlMessage.var_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // uint32 tier_id = 3;
  if (this->_internal_tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tier_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.ControlMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string var_name = 2;
  if (!this->_internal_var_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  // .DATA.ControlMessage.ControlType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 tier_id = 3;
  if (this->_internal_tier_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage::GetClassData() const { return &_class_data_; }


void ControlMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlMessage*>(&to_msg);
  auto& from = static_cast<const ControlMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:DATA.ControlMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_var_name().empty()) {
    _this->_internal_set_var_name(from._internal_var_name());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_tier_id() != 0) {
    _this->_internal_set_tier_id(from._internal_tier_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.var_name_, lhs_arena,
      &other->_impl_.var_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMessage, _impl_.tier_id_)
      + sizeof(ControlMessage::_impl_.tier_id_)
      - PROTOBUF_FIELD_OFFSET(ControlMessage, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_fragment_2eproto_getter, &descriptor_table_fragment_2eproto_once,
      file_level_metadata_fragment_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DATA::QueryTable*
Arena::CreateMaybeMessage< ::DATA::QueryTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::QueryTable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::SquaredErrorsTable*
Arena::CreateMaybeMessage< ::DATA::SquaredErrorsTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::SquaredErrorsTable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Variable*
Arena::CreateMaybeMessage< ::DATA::Variable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Variable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Tier*
Arena::CreateMaybeMessage< ::DATA::Tier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Tier >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Fragment*
Arena::CreateMaybeMessage< ::DATA::Fragment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Fragment >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::VariableCollection*
Arena::CreateMaybeMessage< ::DATA::VariableCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::VariableCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest_VariableRequest_TierRequest*
Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest_VariableRequest*
Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest_VariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest_VariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest*
Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::TierMetadata*
Arena::CreateMaybeMessage< ::DATA::TierMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::TierMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::VariableMetadata*
Arena::CreateMaybeMessage< ::DATA::VariableMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::VariableMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Metadata*
Arena::CreateMaybeMessage< ::DATA::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::FragmentsReport*
Arena::CreateMaybeMessage< ::DATA::FragmentsReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::FragmentsReport >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::TierCompleteAck*
Arena::CreateMaybeMessage< ::DATA::TierCompleteAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::TierCompleteAck >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::ControlMessage*
Arena::CreateMaybeMessage< ::DATA::ControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::ControlMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
