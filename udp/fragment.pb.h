// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fragment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fragment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fragment_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fragment_2eproto;
namespace DATA {
class Fragment;
struct FragmentDefaultTypeInternal;
extern FragmentDefaultTypeInternal _Fragment_default_instance_;
class FragmentsReport;
struct FragmentsReportDefaultTypeInternal;
extern FragmentsReportDefaultTypeInternal _FragmentsReport_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class QueryTable;
struct QueryTableDefaultTypeInternal;
extern QueryTableDefaultTypeInternal _QueryTable_default_instance_;
class RetransmissionRequest;
struct RetransmissionRequestDefaultTypeInternal;
extern RetransmissionRequestDefaultTypeInternal _RetransmissionRequest_default_instance_;
class RetransmissionRequest_VariableRequest;
struct RetransmissionRequest_VariableRequestDefaultTypeInternal;
extern RetransmissionRequest_VariableRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_default_instance_;
class RetransmissionRequest_VariableRequest_TierRequest;
struct RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal;
extern RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_TierRequest_default_instance_;
class SquaredErrorsTable;
struct SquaredErrorsTableDefaultTypeInternal;
extern SquaredErrorsTableDefaultTypeInternal _SquaredErrorsTable_default_instance_;
class Tier;
struct TierDefaultTypeInternal;
extern TierDefaultTypeInternal _Tier_default_instance_;
class TierCompleteAck;
struct TierCompleteAckDefaultTypeInternal;
extern TierCompleteAckDefaultTypeInternal _TierCompleteAck_default_instance_;
class TierMetadata;
struct TierMetadataDefaultTypeInternal;
extern TierMetadataDefaultTypeInternal _TierMetadata_default_instance_;
class Variable;
struct VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableCollection;
struct VariableCollectionDefaultTypeInternal;
extern VariableCollectionDefaultTypeInternal _VariableCollection_default_instance_;
class VariableMetadata;
struct VariableMetadataDefaultTypeInternal;
extern VariableMetadataDefaultTypeInternal _VariableMetadata_default_instance_;
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> ::DATA::Fragment* Arena::CreateMaybeMessage<::DATA::Fragment>(Arena*);
template<> ::DATA::FragmentsReport* Arena::CreateMaybeMessage<::DATA::FragmentsReport>(Arena*);
template<> ::DATA::Metadata* Arena::CreateMaybeMessage<::DATA::Metadata>(Arena*);
template<> ::DATA::QueryTable* Arena::CreateMaybeMessage<::DATA::QueryTable>(Arena*);
template<> ::DATA::RetransmissionRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest>(Arena*);
template<> ::DATA::RetransmissionRequest_VariableRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest_VariableRequest>(Arena*);
template<> ::DATA::RetransmissionRequest_VariableRequest_TierRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest_VariableRequest_TierRequest>(Arena*);
template<> ::DATA::SquaredErrorsTable* Arena::CreateMaybeMessage<::DATA::SquaredErrorsTable>(Arena*);
template<> ::DATA::Tier* Arena::CreateMaybeMessage<::DATA::Tier>(Arena*);
template<> ::DATA::TierCompleteAck* Arena::CreateMaybeMessage<::DATA::TierCompleteAck>(Arena*);
template<> ::DATA::TierMetadata* Arena::CreateMaybeMessage<::DATA::TierMetadata>(Arena*);
template<> ::DATA::Variable* Arena::CreateMaybeMessage<::DATA::Variable>(Arena*);
template<> ::DATA::VariableCollection* Arena::CreateMaybeMessage<::DATA::VariableCollection>(Arena*);
template<> ::DATA::VariableMetadata* Arena::CreateMaybeMessage<::DATA::VariableMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DATA {

// ===================================================================

class QueryTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.QueryTable) */ {
 public:
  inline QueryTable() : QueryTable(nullptr) {}
  ~QueryTable() override;
  explicit PROTOBUF_CONSTEXPR QueryTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTable(const QueryTable& from);
  QueryTable(QueryTable&& from) noexcept
    : QueryTable() {
    *this = ::std::move(from);
  }

  inline QueryTable& operator=(const QueryTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTable& operator=(QueryTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTable* internal_default_instance() {
    return reinterpret_cast<const QueryTable*>(
               &_QueryTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryTable& a, QueryTable& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTable& from) {
    QueryTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.QueryTable";
  }
  protected:
  explicit QueryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated uint64 content = 3;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  private:
  uint64_t _internal_content(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_content() const;
  void _internal_add_content(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_content();
  public:
  uint64_t content(int index) const;
  void set_content(int index, uint64_t value);
  void add_content(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_content();

  // int32 rows = 1;
  void clear_rows();
  int32_t rows() const;
  void set_rows(int32_t value);
  private:
  int32_t _internal_rows() const;
  void _internal_set_rows(int32_t value);
  public:

  // int32 cols = 2;
  void clear_cols();
  int32_t cols() const;
  void set_cols(int32_t value);
  private:
  int32_t _internal_cols() const;
  void _internal_set_cols(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.QueryTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > content_;
    mutable std::atomic<int> _content_cached_byte_size_;
    int32_t rows_;
    int32_t cols_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class SquaredErrorsTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.SquaredErrorsTable) */ {
 public:
  inline SquaredErrorsTable() : SquaredErrorsTable(nullptr) {}
  ~SquaredErrorsTable() override;
  explicit PROTOBUF_CONSTEXPR SquaredErrorsTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SquaredErrorsTable(const SquaredErrorsTable& from);
  SquaredErrorsTable(SquaredErrorsTable&& from) noexcept
    : SquaredErrorsTable() {
    *this = ::std::move(from);
  }

  inline SquaredErrorsTable& operator=(const SquaredErrorsTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SquaredErrorsTable& operator=(SquaredErrorsTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SquaredErrorsTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const SquaredErrorsTable* internal_default_instance() {
    return reinterpret_cast<const SquaredErrorsTable*>(
               &_SquaredErrorsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SquaredErrorsTable& a, SquaredErrorsTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SquaredErrorsTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SquaredErrorsTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SquaredErrorsTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SquaredErrorsTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SquaredErrorsTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SquaredErrorsTable& from) {
    SquaredErrorsTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SquaredErrorsTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.SquaredErrorsTable";
  }
  protected:
  explicit SquaredErrorsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated double content = 3;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  private:
  double _internal_content(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_content() const;
  void _internal_add_content(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_content();
  public:
  double content(int index) const;
  void set_content(int index, double value);
  void add_content(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_content();

  // int32 rows = 1;
  void clear_rows();
  int32_t rows() const;
  void set_rows(int32_t value);
  private:
  int32_t _internal_rows() const;
  void _internal_set_rows(int32_t value);
  public:

  // int32 cols = 2;
  void clear_cols();
  int32_t cols() const;
  void set_cols(int32_t value);
  private:
  int32_t _internal_cols() const;
  void _internal_set_cols(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.SquaredErrorsTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > content_;
    int32_t rows_;
    int32_t cols_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Variable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {}
  ~Variable() override;
  explicit PROTOBUF_CONSTEXPR Variable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Variable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Variable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Variable& from) {
    Variable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Variable";
  }
  protected:
  explicit Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 2,
    kLevelErrorBoundsFieldNumber = 5,
    kStoppingIndicesFieldNumber = 6,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTableContentFieldNumber = 7,
    kSquaredErrorsFieldNumber = 8,
    kLevelsFieldNumber = 4,
    kTiersFieldNumber = 9,
  };
  // repeated uint32 dimensions = 2;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  uint32_t _internal_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_dimensions() const;
  void _internal_add_dimensions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_dimensions();
  public:
  uint32_t dimensions(int index) const;
  void set_dimensions(int index, uint32_t value);
  void add_dimensions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_dimensions();

  // repeated double level_error_bounds = 5;
  int level_error_bounds_size() const;
  private:
  int _internal_level_error_bounds_size() const;
  public:
  void clear_level_error_bounds();
  private:
  double _internal_level_error_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_level_error_bounds() const;
  void _internal_add_level_error_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_level_error_bounds();
  public:
  double level_error_bounds(int index) const;
  void set_level_error_bounds(int index, double value);
  void add_level_error_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      level_error_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_level_error_bounds();

  // repeated uint32 stopping_indices = 6;
  int stopping_indices_size() const;
  private:
  int _internal_stopping_indices_size() const;
  public:
  void clear_stopping_indices();
  private:
  uint32_t _internal_stopping_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stopping_indices() const;
  void _internal_add_stopping_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stopping_indices();
  public:
  uint32_t stopping_indices(int index) const;
  void set_stopping_indices(int index, uint32_t value);
  void add_stopping_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stopping_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stopping_indices();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .DATA.QueryTable table_content = 7;
  bool has_table_content() const;
  private:
  bool _internal_has_table_content() const;
  public:
  void clear_table_content();
  const ::DATA::QueryTable& table_content() const;
  PROTOBUF_NODISCARD ::DATA::QueryTable* release_table_content();
  ::DATA::QueryTable* mutable_table_content();
  void set_allocated_table_content(::DATA::QueryTable* table_content);
  private:
  const ::DATA::QueryTable& _internal_table_content() const;
  ::DATA::QueryTable* _internal_mutable_table_content();
  public:
  void unsafe_arena_set_allocated_table_content(
      ::DATA::QueryTable* table_content);
  ::DATA::QueryTable* unsafe_arena_release_table_content();

  // .DATA.SquaredErrorsTable squared_errors = 8;
  bool has_squared_errors() const;
  private:
  bool _internal_has_squared_errors() const;
  public:
  void clear_squared_errors();
  const ::DATA::SquaredErrorsTable& squared_errors() const;
  PROTOBUF_NODISCARD ::DATA::SquaredErrorsTable* release_squared_errors();
  ::DATA::SquaredErrorsTable* mutable_squared_errors();
  void set_allocated_squared_errors(::DATA::SquaredErrorsTable* squared_errors);
  private:
  const ::DATA::SquaredErrorsTable& _internal_squared_errors() const;
  ::DATA::SquaredErrorsTable* _internal_mutable_squared_errors();
  public:
  void unsafe_arena_set_allocated_squared_errors(
      ::DATA::SquaredErrorsTable* squared_errors);
  ::DATA::SquaredErrorsTable* unsafe_arena_release_squared_errors();

  // uint32 levels = 4;
  void clear_levels();
  uint32_t levels() const;
  void set_levels(uint32_t value);
  private:
  uint32_t _internal_levels() const;
  void _internal_set_levels(uint32_t value);
  public:

  // uint32 tiers = 9;
  void clear_tiers();
  uint32_t tiers() const;
  void set_tiers(uint32_t value);
  private:
  uint32_t _internal_tiers() const;
  void _internal_set_tiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Variable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > dimensions_;
    mutable std::atomic<int> _dimensions_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > level_error_bounds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stopping_indices_;
    mutable std::atomic<int> _stopping_indices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::DATA::QueryTable* table_content_;
    ::DATA::SquaredErrorsTable* squared_errors_;
    uint32_t levels_;
    uint32_t tiers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Tier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Tier) */ {
 public:
  inline Tier() : Tier(nullptr) {}
  ~Tier() override;
  explicit PROTOBUF_CONSTEXPR Tier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tier(const Tier& from);
  Tier(Tier&& from) noexcept
    : Tier() {
    *this = ::std::move(from);
  }

  inline Tier& operator=(const Tier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tier& operator=(Tier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tier& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tier* internal_default_instance() {
    return reinterpret_cast<const Tier*>(
               &_Tier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tier& a, Tier& b) {
    a.Swap(&b);
  }
  inline void Swap(Tier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tier& from) {
    Tier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Tier";
  }
  protected:
  explicit Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcBackendNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kKFieldNumber = 2,
    kMFieldNumber = 3,
    kWFieldNumber = 4,
    kEncodedFragmentLengthFieldNumber = 7,
    kHdFieldNumber = 5,
  };
  // string ec_backend_name = 6;
  void clear_ec_backend_name();
  const std::string& ec_backend_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ec_backend_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ec_backend_name();
  PROTOBUF_NODISCARD std::string* release_ec_backend_name();
  void set_allocated_ec_backend_name(std::string* ec_backend_name);
  private:
  const std::string& _internal_ec_backend_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ec_backend_name(const std::string& value);
  std::string* _internal_mutable_ec_backend_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 k = 2;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // int32 m = 3;
  void clear_m();
  int32_t m() const;
  void set_m(int32_t value);
  private:
  int32_t _internal_m() const;
  void _internal_set_m(int32_t value);
  public:

  // int32 w = 4;
  void clear_w();
  int32_t w() const;
  void set_w(int32_t value);
  private:
  int32_t _internal_w() const;
  void _internal_set_w(int32_t value);
  public:

  // uint64 encoded_fragment_length = 7;
  void clear_encoded_fragment_length();
  uint64_t encoded_fragment_length() const;
  void set_encoded_fragment_length(uint64_t value);
  private:
  uint64_t _internal_encoded_fragment_length() const;
  void _internal_set_encoded_fragment_length(uint64_t value);
  public:

  // int32 hd = 5;
  void clear_hd();
  int32_t hd() const;
  void set_hd(int32_t value);
  private:
  int32_t _internal_hd() const;
  void _internal_set_hd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Tier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_backend_name_;
    int32_t id_;
    int32_t k_;
    int32_t m_;
    int32_t w_;
    uint64_t encoded_fragment_length_;
    int32_t hd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Fragment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Fragment) */ {
 public:
  inline Fragment() : Fragment(nullptr) {}
  ~Fragment() override;
  explicit PROTOBUF_CONSTEXPR Fragment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fragment(const Fragment& from);
  Fragment(Fragment&& from) noexcept
    : Fragment() {
    *this = ::std::move(from);
  }

  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fragment& operator=(Fragment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fragment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fragment* internal_default_instance() {
    return reinterpret_cast<const Fragment*>(
               &_Fragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fragment& a, Fragment& b) {
    a.Swap(&b);
  }
  inline void Swap(Fragment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fragment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fragment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fragment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fragment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fragment& from) {
    Fragment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fragment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Fragment";
  }
  protected:
  explicit Fragment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarDimensionsFieldNumber = 18,
    kVarLevelErrorBoundsFieldNumber = 21,
    kVarStoppingIndicesFieldNumber = 22,
    kEcBackendNameFieldNumber = 5,
    kFragFieldNumber = 12,
    kVarNameFieldNumber = 17,
    kVarTypeFieldNumber = 19,
    kVarTableContentFieldNumber = 23,
    kVarSquaredErrorsFieldNumber = 24,
    kKFieldNumber = 1,
    kMFieldNumber = 2,
    kWFieldNumber = 3,
    kHdFieldNumber = 4,
    kEncodedFragmentLengthFieldNumber = 6,
    kIdxFieldNumber = 7,
    kOrigDataSizeFieldNumber = 9,
    kSizeFieldNumber = 8,
    kChksumMismatchFieldNumber = 10,
    kBackendIdFieldNumber = 11,
    kIsDataFieldNumber = 13,
    kTierIdFieldNumber = 14,
    kChunkIdFieldNumber = 15,
    kFragmentIdFieldNumber = 16,
    kVarLevelsFieldNumber = 20,
    kTimestampFieldNumber = 26,
    kSequenceNumberFieldNumber = 27,
    kVarTiersFieldNumber = 25,
  };
  // repeated uint32 var_dimensions = 18;
  int var_dimensions_size() const;
  private:
  int _internal_var_dimensions_size() const;
  public:
  void clear_var_dimensions();
  private:
  uint32_t _internal_var_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_var_dimensions() const;
  void _internal_add_var_dimensions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_var_dimensions();
  public:
  uint32_t var_dimensions(int index) const;
  void set_var_dimensions(int index, uint32_t value);
  void add_var_dimensions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      var_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_var_dimensions();

  // repeated double var_level_error_bounds = 21;
  int var_level_error_bounds_size() const;
  private:
  int _internal_var_level_error_bounds_size() const;
  public:
  void clear_var_level_error_bounds();
  private:
  double _internal_var_level_error_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_var_level_error_bounds() const;
  void _internal_add_var_level_error_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_var_level_error_bounds();
  public:
  double var_level_error_bounds(int index) const;
  void set_var_level_error_bounds(int index, double value);
  void add_var_level_error_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      var_level_error_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_var_level_error_bounds();

  // repeated bytes var_stopping_indices = 22;
  int var_stopping_indices_size() const;
  private:
  int _internal_var_stopping_indices_size() const;
  public:
  void clear_var_stopping_indices();
  const std::string& var_stopping_indices(int index) const;
  std::string* mutable_var_stopping_indices(int index);
  void set_var_stopping_indices(int index, const std::string& value);
  void set_var_stopping_indices(int index, std::string&& value);
  void set_var_stopping_indices(int index, const char* value);
  void set_var_stopping_indices(int index, const void* value, size_t size);
  std::string* add_var_stopping_indices();
  void add_var_stopping_indices(const std::string& value);
  void add_var_stopping_indices(std::string&& value);
  void add_var_stopping_indices(const char* value);
  void add_var_stopping_indices(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_stopping_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_stopping_indices();
  private:
  const std::string& _internal_var_stopping_indices(int index) const;
  std::string* _internal_add_var_stopping_indices();
  public:

  // bytes ec_backend_name = 5;
  void clear_ec_backend_name();
  const std::string& ec_backend_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ec_backend_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ec_backend_name();
  PROTOBUF_NODISCARD std::string* release_ec_backend_name();
  void set_allocated_ec_backend_name(std::string* ec_backend_name);
  private:
  const std::string& _internal_ec_backend_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ec_backend_name(const std::string& value);
  std::string* _internal_mutable_ec_backend_name();
  public:

  // bytes frag = 12;
  void clear_frag();
  const std::string& frag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frag();
  PROTOBUF_NODISCARD std::string* release_frag();
  void set_allocated_frag(std::string* frag);
  private:
  const std::string& _internal_frag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frag(const std::string& value);
  std::string* _internal_mutable_frag();
  public:

  // string var_name = 17;
  void clear_var_name();
  const std::string& var_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_name();
  PROTOBUF_NODISCARD std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // string var_type = 19;
  void clear_var_type();
  const std::string& var_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_type();
  PROTOBUF_NODISCARD std::string* release_var_type();
  void set_allocated_var_type(std::string* var_type);
  private:
  const std::string& _internal_var_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_type(const std::string& value);
  std::string* _internal_mutable_var_type();
  public:

  // .DATA.QueryTable var_table_content = 23;
  bool has_var_table_content() const;
  private:
  bool _internal_has_var_table_content() const;
  public:
  void clear_var_table_content();
  const ::DATA::QueryTable& var_table_content() const;
  PROTOBUF_NODISCARD ::DATA::QueryTable* release_var_table_content();
  ::DATA::QueryTable* mutable_var_table_content();
  void set_allocated_var_table_content(::DATA::QueryTable* var_table_content);
  private:
  const ::DATA::QueryTable& _internal_var_table_content() const;
  ::DATA::QueryTable* _internal_mutable_var_table_content();
  public:
  void unsafe_arena_set_allocated_var_table_content(
      ::DATA::QueryTable* var_table_content);
  ::DATA::QueryTable* unsafe_arena_release_var_table_content();

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  bool has_var_squared_errors() const;
  private:
  bool _internal_has_var_squared_errors() const;
  public:
  void clear_var_squared_errors();
  const ::DATA::SquaredErrorsTable& var_squared_errors() const;
  PROTOBUF_NODISCARD ::DATA::SquaredErrorsTable* release_var_squared_errors();
  ::DATA::SquaredErrorsTable* mutable_var_squared_errors();
  void set_allocated_var_squared_errors(::DATA::SquaredErrorsTable* var_squared_errors);
  private:
  const ::DATA::SquaredErrorsTable& _internal_var_squared_errors() const;
  ::DATA::SquaredErrorsTable* _internal_mutable_var_squared_errors();
  public:
  void unsafe_arena_set_allocated_var_squared_errors(
      ::DATA::SquaredErrorsTable* var_squared_errors);
  ::DATA::SquaredErrorsTable* unsafe_arena_release_var_squared_errors();

  // int32 k = 1;
  void clear_k();
  int32_t k() const;
  void set_k(int32_t value);
  private:
  int32_t _internal_k() const;
  void _internal_set_k(int32_t value);
  public:

  // int32 m = 2;
  void clear_m();
  int32_t m() const;
  void set_m(int32_t value);
  private:
  int32_t _internal_m() const;
  void _internal_set_m(int32_t value);
  public:

  // int32 w = 3;
  void clear_w();
  int32_t w() const;
  void set_w(int32_t value);
  private:
  int32_t _internal_w() const;
  void _internal_set_w(int32_t value);
  public:

  // int32 hd = 4;
  void clear_hd();
  int32_t hd() const;
  void set_hd(int32_t value);
  private:
  int32_t _internal_hd() const;
  void _internal_set_hd(int32_t value);
  public:

  // uint32 encoded_fragment_length = 6;
  void clear_encoded_fragment_length();
  uint32_t encoded_fragment_length() const;
  void set_encoded_fragment_length(uint32_t value);
  private:
  uint32_t _internal_encoded_fragment_length() const;
  void _internal_set_encoded_fragment_length(uint32_t value);
  public:

  // uint32 idx = 7;
  void clear_idx();
  uint32_t idx() const;
  void set_idx(uint32_t value);
  private:
  uint32_t _internal_idx() const;
  void _internal_set_idx(uint32_t value);
  public:

  // uint64 orig_data_size = 9;
  void clear_orig_data_size();
  uint64_t orig_data_size() const;
  void set_orig_data_size(uint64_t value);
  private:
  uint64_t _internal_orig_data_size() const;
  void _internal_set_orig_data_size(uint64_t value);
  public:

  // uint32 size = 8;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // uint32 chksum_mismatch = 10;
  void clear_chksum_mismatch();
  uint32_t chksum_mismatch() const;
  void set_chksum_mismatch(uint32_t value);
  private:
  uint32_t _internal_chksum_mismatch() const;
  void _internal_set_chksum_mismatch(uint32_t value);
  public:

  // uint32 backend_id = 11;
  void clear_backend_id();
  uint32_t backend_id() const;
  void set_backend_id(uint32_t value);
  private:
  uint32_t _internal_backend_id() const;
  void _internal_set_backend_id(uint32_t value);
  public:

  // bool is_data = 13;
  void clear_is_data();
  bool is_data() const;
  void set_is_data(bool value);
  private:
  bool _internal_is_data() const;
  void _internal_set_is_data(bool value);
  public:

  // uint32 tier_id = 14;
  void clear_tier_id();
  uint32_t tier_id() const;
  void set_tier_id(uint32_t value);
  private:
  uint32_t _internal_tier_id() const;
  void _internal_set_tier_id(uint32_t value);
  public:

  // uint32 chunk_id = 15;
  void clear_chunk_id();
  uint32_t chunk_id() const;
  void set_chunk_id(uint32_t value);
  private:
  uint32_t _internal_chunk_id() const;
  void _internal_set_chunk_id(uint32_t value);
  public:

  // uint32 fragment_id = 16;
  void clear_fragment_id();
  uint32_t fragment_id() const;
  void set_fragment_id(uint32_t value);
  private:
  uint32_t _internal_fragment_id() const;
  void _internal_set_fragment_id(uint32_t value);
  public:

  // uint32 var_levels = 20;
  void clear_var_levels();
  uint32_t var_levels() const;
  void set_var_levels(uint32_t value);
  private:
  uint32_t _internal_var_levels() const;
  void _internal_set_var_levels(uint32_t value);
  public:

  // uint64 timestamp = 26;
  void clear_timestamp();
  uint64_t timestamp() const;
  void set_timestamp(uint64_t value);
  private:
  uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(uint64_t value);
  public:

  // uint64 sequence_number = 27;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // uint32 var_tiers = 25;
  void clear_var_tiers();
  uint32_t var_tiers() const;
  void set_var_tiers(uint32_t value);
  private:
  uint32_t _internal_var_tiers() const;
  void _internal_set_var_tiers(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Fragment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > var_dimensions_;
    mutable std::atomic<int> _var_dimensions_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > var_level_error_bounds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_stopping_indices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_backend_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_type_;
    ::DATA::QueryTable* var_table_content_;
    ::DATA::SquaredErrorsTable* var_squared_errors_;
    int32_t k_;
    int32_t m_;
    int32_t w_;
    int32_t hd_;
    uint32_t encoded_fragment_length_;
    uint32_t idx_;
    uint64_t orig_data_size_;
    uint32_t size_;
    uint32_t chksum_mismatch_;
    uint32_t backend_id_;
    bool is_data_;
    uint32_t tier_id_;
    uint32_t chunk_id_;
    uint32_t fragment_id_;
    uint32_t var_levels_;
    uint64_t timestamp_;
    uint64_t sequence_number_;
    uint32_t var_tiers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class VariableCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.VariableCollection) */ {
 public:
  inline VariableCollection() : VariableCollection(nullptr) {}
  ~VariableCollection() override;
  explicit PROTOBUF_CONSTEXPR VariableCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableCollection(const VariableCollection& from);
  VariableCollection(VariableCollection&& from) noexcept
    : VariableCollection() {
    *this = ::std::move(from);
  }

  inline VariableCollection& operator=(const VariableCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableCollection& operator=(VariableCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableCollection* internal_default_instance() {
    return reinterpret_cast<const VariableCollection*>(
               &_VariableCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VariableCollection& a, VariableCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VariableCollection& from) {
    VariableCollection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.VariableCollection";
  }
  protected:
  explicit VariableCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.Variable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::Variable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >*
      mutable_variables();
  private:
  const ::DATA::Variable& _internal_variables(int index) const;
  ::DATA::Variable* _internal_add_variables();
  public:
  const ::DATA::Variable& variables(int index) const;
  ::DATA::Variable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.VariableCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable > variables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest_VariableRequest_TierRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest.VariableRequest.TierRequest) */ {
 public:
  inline RetransmissionRequest_VariableRequest_TierRequest() : RetransmissionRequest_VariableRequest_TierRequest(nullptr) {}
  ~RetransmissionRequest_VariableRequest_TierRequest() override;
  explicit PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequest_TierRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetransmissionRequest_VariableRequest_TierRequest(const RetransmissionRequest_VariableRequest_TierRequest& from);
  RetransmissionRequest_VariableRequest_TierRequest(RetransmissionRequest_VariableRequest_TierRequest&& from) noexcept
    : RetransmissionRequest_VariableRequest_TierRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest_VariableRequest_TierRequest& operator=(const RetransmissionRequest_VariableRequest_TierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest_VariableRequest_TierRequest& operator=(RetransmissionRequest_VariableRequest_TierRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetransmissionRequest_VariableRequest_TierRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetransmissionRequest_VariableRequest_TierRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest_VariableRequest_TierRequest*>(
               &_RetransmissionRequest_VariableRequest_TierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RetransmissionRequest_VariableRequest_TierRequest& a, RetransmissionRequest_VariableRequest_TierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest_VariableRequest_TierRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest_VariableRequest_TierRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetransmissionRequest_VariableRequest_TierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest_TierRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetransmissionRequest_VariableRequest_TierRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetransmissionRequest_VariableRequest_TierRequest& from) {
    RetransmissionRequest_VariableRequest_TierRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest_VariableRequest_TierRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest.VariableRequest.TierRequest";
  }
  protected:
  explicit RetransmissionRequest_VariableRequest_TierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkIdsFieldNumber = 2,
    kTierIdFieldNumber = 1,
  };
  // repeated int32 chunk_ids = 2;
  int chunk_ids_size() const;
  private:
  int _internal_chunk_ids_size() const;
  public:
  void clear_chunk_ids();
  private:
  int32_t _internal_chunk_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chunk_ids() const;
  void _internal_add_chunk_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chunk_ids();
  public:
  int32_t chunk_ids(int index) const;
  void set_chunk_ids(int index, int32_t value);
  void add_chunk_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chunk_ids();

  // int32 tier_id = 1;
  void clear_tier_id();
  int32_t tier_id() const;
  void set_tier_id(int32_t value);
  private:
  int32_t _internal_tier_id() const;
  void _internal_set_tier_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest.VariableRequest.TierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chunk_ids_;
    mutable std::atomic<int> _chunk_ids_cached_byte_size_;
    int32_t tier_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest_VariableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest.VariableRequest) */ {
 public:
  inline RetransmissionRequest_VariableRequest() : RetransmissionRequest_VariableRequest(nullptr) {}
  ~RetransmissionRequest_VariableRequest() override;
  explicit PROTOBUF_CONSTEXPR RetransmissionRequest_VariableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetransmissionRequest_VariableRequest(const RetransmissionRequest_VariableRequest& from);
  RetransmissionRequest_VariableRequest(RetransmissionRequest_VariableRequest&& from) noexcept
    : RetransmissionRequest_VariableRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest_VariableRequest& operator=(const RetransmissionRequest_VariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest_VariableRequest& operator=(RetransmissionRequest_VariableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetransmissionRequest_VariableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetransmissionRequest_VariableRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest_VariableRequest*>(
               &_RetransmissionRequest_VariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RetransmissionRequest_VariableRequest& a, RetransmissionRequest_VariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest_VariableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest_VariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetransmissionRequest_VariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetransmissionRequest_VariableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetransmissionRequest_VariableRequest& from) {
    RetransmissionRequest_VariableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest_VariableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest.VariableRequest";
  }
  protected:
  explicit RetransmissionRequest_VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RetransmissionRequest_VariableRequest_TierRequest TierRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 2,
    kVarNameFieldNumber = 1,
  };
  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >*
      mutable_tiers();
  private:
  const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& _internal_tiers(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* _internal_add_tiers();
  public:
  const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& tiers(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >&
      tiers() const;

  // string var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_name();
  PROTOBUF_NODISCARD std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest.VariableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest > tiers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest) */ {
 public:
  inline RetransmissionRequest() : RetransmissionRequest(nullptr) {}
  ~RetransmissionRequest() override;
  explicit PROTOBUF_CONSTEXPR RetransmissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RetransmissionRequest(const RetransmissionRequest& from);
  RetransmissionRequest(RetransmissionRequest&& from) noexcept
    : RetransmissionRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest& operator=(const RetransmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest& operator=(RetransmissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RetransmissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RetransmissionRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest*>(
               &_RetransmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RetransmissionRequest& a, RetransmissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RetransmissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RetransmissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RetransmissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RetransmissionRequest& from) {
    RetransmissionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest";
  }
  protected:
  explicit RetransmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RetransmissionRequest_VariableRequest VariableRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::RetransmissionRequest_VariableRequest* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >*
      mutable_variables();
  private:
  const ::DATA::RetransmissionRequest_VariableRequest& _internal_variables(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest* _internal_add_variables();
  public:
  const ::DATA::RetransmissionRequest_VariableRequest& variables(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest > variables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class TierMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.TierMetadata) */ {
 public:
  inline TierMetadata() : TierMetadata(nullptr) {}
  ~TierMetadata() override;
  explicit PROTOBUF_CONSTEXPR TierMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TierMetadata(const TierMetadata& from);
  TierMetadata(TierMetadata&& from) noexcept
    : TierMetadata() {
    *this = ::std::move(from);
  }

  inline TierMetadata& operator=(const TierMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TierMetadata& operator=(TierMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TierMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const TierMetadata* internal_default_instance() {
    return reinterpret_cast<const TierMetadata*>(
               &_TierMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TierMetadata& a, TierMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TierMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TierMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TierMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TierMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TierMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TierMetadata& from) {
    TierMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TierMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.TierMetadata";
  }
  protected:
  explicit TierMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkIdsFieldNumber = 3,
    kTierIdFieldNumber = 1,
    kKFieldNumber = 2,
  };
  // repeated uint32 chunk_ids = 3;
  int chunk_ids_size() const;
  private:
  int _internal_chunk_ids_size() const;
  public:
  void clear_chunk_ids();
  private:
  uint32_t _internal_chunk_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_chunk_ids() const;
  void _internal_add_chunk_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_chunk_ids();
  public:
  uint32_t chunk_ids(int index) const;
  void set_chunk_ids(int index, uint32_t value);
  void add_chunk_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      chunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_chunk_ids();

  // uint32 tier_id = 1;
  void clear_tier_id();
  uint32_t tier_id() const;
  void set_tier_id(uint32_t value);
  private:
  uint32_t _internal_tier_id() const;
  void _internal_set_tier_id(uint32_t value);
  public:

  // uint32 k = 2;
  void clear_k();
  uint32_t k() const;
  void set_k(uint32_t value);
  private:
  uint32_t _internal_k() const;
  void _internal_set_k(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.TierMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > chunk_ids_;
    mutable std::atomic<int> _chunk_ids_cached_byte_size_;
    uint32_t tier_id_;
    uint32_t k_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class VariableMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.VariableMetadata) */ {
 public:
  inline VariableMetadata() : VariableMetadata(nullptr) {}
  ~VariableMetadata() override;
  explicit PROTOBUF_CONSTEXPR VariableMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariableMetadata(const VariableMetadata& from);
  VariableMetadata(VariableMetadata&& from) noexcept
    : VariableMetadata() {
    *this = ::std::move(from);
  }

  inline VariableMetadata& operator=(const VariableMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMetadata& operator=(VariableMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VariableMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariableMetadata* internal_default_instance() {
    return reinterpret_cast<const VariableMetadata*>(
               &_VariableMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VariableMetadata& a, VariableMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VariableMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VariableMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VariableMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VariableMetadata& from) {
    VariableMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.VariableMetadata";
  }
  protected:
  explicit VariableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 2,
    kVarNameFieldNumber = 1,
  };
  // repeated .DATA.TierMetadata tiers = 2;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  ::DATA::TierMetadata* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >*
      mutable_tiers();
  private:
  const ::DATA::TierMetadata& _internal_tiers(int index) const;
  ::DATA::TierMetadata* _internal_add_tiers();
  public:
  const ::DATA::TierMetadata& tiers(int index) const;
  ::DATA::TierMetadata* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >&
      tiers() const;

  // string var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_name();
  PROTOBUF_NODISCARD std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // @@protoc_insertion_point(class_scope:DATA.VariableMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata > tiers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.VariableMetadata variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::VariableMetadata* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >*
      mutable_variables();
  private:
  const ::DATA::VariableMetadata& _internal_variables(int index) const;
  ::DATA::VariableMetadata* _internal_add_variables();
  public:
  const ::DATA::VariableMetadata& variables(int index) const;
  ::DATA::VariableMetadata* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata > variables_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class FragmentsReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.FragmentsReport) */ {
 public:
  inline FragmentsReport() : FragmentsReport(nullptr) {}
  ~FragmentsReport() override;
  explicit PROTOBUF_CONSTEXPR FragmentsReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FragmentsReport(const FragmentsReport& from);
  FragmentsReport(FragmentsReport&& from) noexcept
    : FragmentsReport() {
    *this = ::std::move(from);
  }

  inline FragmentsReport& operator=(const FragmentsReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentsReport& operator=(FragmentsReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FragmentsReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const FragmentsReport* internal_default_instance() {
    return reinterpret_cast<const FragmentsReport*>(
               &_FragmentsReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FragmentsReport& a, FragmentsReport& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentsReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentsReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FragmentsReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FragmentsReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FragmentsReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FragmentsReport& from) {
    FragmentsReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentsReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.FragmentsReport";
  }
  protected:
  explicit FragmentsReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 1,
    kTierIdFieldNumber = 2,
    kChunksProcessedFieldNumber = 3,
    kTotalFragmentsFieldNumber = 4,
    kExpectedFragmentsFieldNumber = 5,
    kTimeWindowFieldNumber = 6,
    kLambdaFieldNumber = 7,
  };
  // bytes var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_var_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_var_name();
  PROTOBUF_NODISCARD std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // uint32 tier_id = 2;
  void clear_tier_id();
  uint32_t tier_id() const;
  void set_tier_id(uint32_t value);
  private:
  uint32_t _internal_tier_id() const;
  void _internal_set_tier_id(uint32_t value);
  public:

  // uint32 chunks_processed = 3;
  void clear_chunks_processed();
  uint32_t chunks_processed() const;
  void set_chunks_processed(uint32_t value);
  private:
  uint32_t _internal_chunks_processed() const;
  void _internal_set_chunks_processed(uint32_t value);
  public:

  // uint32 total_fragments = 4;
  void clear_total_fragments();
  uint32_t total_fragments() const;
  void set_total_fragments(uint32_t value);
  private:
  uint32_t _internal_total_fragments() const;
  void _internal_set_total_fragments(uint32_t value);
  public:

  // uint32 expected_fragments = 5;
  void clear_expected_fragments();
  uint32_t expected_fragments() const;
  void set_expected_fragments(uint32_t value);
  private:
  uint32_t _internal_expected_fragments() const;
  void _internal_set_expected_fragments(uint32_t value);
  public:

  // uint64 time_window = 6;
  void clear_time_window();
  uint64_t time_window() const;
  void set_time_window(uint64_t value);
  private:
  uint64_t _internal_time_window() const;
  void _internal_set_time_window(uint64_t value);
  public:

  // double lambda = 7;
  void clear_lambda();
  double lambda() const;
  void set_lambda(double value);
  private:
  double _internal_lambda() const;
  void _internal_set_lambda(double value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.FragmentsReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
    uint32_t tier_id_;
    uint32_t chunks_processed_;
    uint32_t total_fragments_;
    uint32_t expected_fragments_;
    uint64_t time_window_;
    double lambda_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class TierCompleteAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.TierCompleteAck) */ {
 public:
  inline TierCompleteAck() : TierCompleteAck(nullptr) {}
  ~TierCompleteAck() override;
  explicit PROTOBUF_CONSTEXPR TierCompleteAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TierCompleteAck(const TierCompleteAck& from);
  TierCompleteAck(TierCompleteAck&& from) noexcept
    : TierCompleteAck() {
    *this = ::std::move(from);
  }

  inline TierCompleteAck& operator=(const TierCompleteAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TierCompleteAck& operator=(TierCompleteAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TierCompleteAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const TierCompleteAck* internal_default_instance() {
    return reinterpret_cast<const TierCompleteAck*>(
               &_TierCompleteAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TierCompleteAck& a, TierCompleteAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TierCompleteAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TierCompleteAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TierCompleteAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TierCompleteAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TierCompleteAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TierCompleteAck& from) {
    TierCompleteAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TierCompleteAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.TierCompleteAck";
  }
  protected:
  explicit TierCompleteAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTierIdFieldNumber = 1,
  };
  // uint32 tier_id = 1;
  void clear_tier_id();
  uint32_t tier_id() const;
  void set_tier_id(uint32_t value);
  private:
  uint32_t _internal_tier_id() const;
  void _internal_set_tier_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.TierCompleteAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t tier_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fragment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryTable

// int32 rows = 1;
inline void QueryTable::clear_rows() {
  _impl_.rows_ = 0;
}
inline int32_t QueryTable::_internal_rows() const {
  return _impl_.rows_;
}
inline int32_t QueryTable::rows() const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.rows)
  return _internal_rows();
}
inline void QueryTable::_internal_set_rows(int32_t value) {
  
  _impl_.rows_ = value;
}
inline void QueryTable::set_rows(int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.rows)
}

// int32 cols = 2;
inline void QueryTable::clear_cols() {
  _impl_.cols_ = 0;
}
inline int32_t QueryTable::_internal_cols() const {
  return _impl_.cols_;
}
inline int32_t QueryTable::cols() const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.cols)
  return _internal_cols();
}
inline void QueryTable::_internal_set_cols(int32_t value) {
  
  _impl_.cols_ = value;
}
inline void QueryTable::set_cols(int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.cols)
}

// repeated uint64 content = 3;
inline int QueryTable::_internal_content_size() const {
  return _impl_.content_.size();
}
inline int QueryTable::content_size() const {
  return _internal_content_size();
}
inline void QueryTable::clear_content() {
  _impl_.content_.Clear();
}
inline uint64_t QueryTable::_internal_content(int index) const {
  return _impl_.content_.Get(index);
}
inline uint64_t QueryTable::content(int index) const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.content)
  return _internal_content(index);
}
inline void QueryTable::set_content(int index, uint64_t value) {
  _impl_.content_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.content)
}
inline void QueryTable::_internal_add_content(uint64_t value) {
  _impl_.content_.Add(value);
}
inline void QueryTable::add_content(uint64_t value) {
  _internal_add_content(value);
  // @@protoc_insertion_point(field_add:DATA.QueryTable.content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
QueryTable::_internal_content() const {
  return _impl_.content_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
QueryTable::content() const {
  // @@protoc_insertion_point(field_list:DATA.QueryTable.content)
  return _internal_content();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
QueryTable::_internal_mutable_content() {
  return &_impl_.content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
QueryTable::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:DATA.QueryTable.content)
  return _internal_mutable_content();
}

// -------------------------------------------------------------------

// SquaredErrorsTable

// int32 rows = 1;
inline void SquaredErrorsTable::clear_rows() {
  _impl_.rows_ = 0;
}
inline int32_t SquaredErrorsTable::_internal_rows() const {
  return _impl_.rows_;
}
inline int32_t SquaredErrorsTable::rows() const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.rows)
  return _internal_rows();
}
inline void SquaredErrorsTable::_internal_set_rows(int32_t value) {
  
  _impl_.rows_ = value;
}
inline void SquaredErrorsTable::set_rows(int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.rows)
}

// int32 cols = 2;
inline void SquaredErrorsTable::clear_cols() {
  _impl_.cols_ = 0;
}
inline int32_t SquaredErrorsTable::_internal_cols() const {
  return _impl_.cols_;
}
inline int32_t SquaredErrorsTable::cols() const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.cols)
  return _internal_cols();
}
inline void SquaredErrorsTable::_internal_set_cols(int32_t value) {
  
  _impl_.cols_ = value;
}
inline void SquaredErrorsTable::set_cols(int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.cols)
}

// repeated double content = 3;
inline int SquaredErrorsTable::_internal_content_size() const {
  return _impl_.content_.size();
}
inline int SquaredErrorsTable::content_size() const {
  return _internal_content_size();
}
inline void SquaredErrorsTable::clear_content() {
  _impl_.content_.Clear();
}
inline double SquaredErrorsTable::_internal_content(int index) const {
  return _impl_.content_.Get(index);
}
inline double SquaredErrorsTable::content(int index) const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.content)
  return _internal_content(index);
}
inline void SquaredErrorsTable::set_content(int index, double value) {
  _impl_.content_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.content)
}
inline void SquaredErrorsTable::_internal_add_content(double value) {
  _impl_.content_.Add(value);
}
inline void SquaredErrorsTable::add_content(double value) {
  _internal_add_content(value);
  // @@protoc_insertion_point(field_add:DATA.SquaredErrorsTable.content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SquaredErrorsTable::_internal_content() const {
  return _impl_.content_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SquaredErrorsTable::content() const {
  // @@protoc_insertion_point(field_list:DATA.SquaredErrorsTable.content)
  return _internal_content();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SquaredErrorsTable::_internal_mutable_content() {
  return &_impl_.content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SquaredErrorsTable::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:DATA.SquaredErrorsTable.content)
  return _internal_mutable_content();
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Variable::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Variable.name)
}
inline std::string* Variable::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:DATA.Variable.name)
  return _s;
}
inline const std::string& Variable::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Variable::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:DATA.Variable.name)
  return _impl_.name_.Release();
}
inline void Variable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.name)
}

// repeated uint32 dimensions = 2;
inline int Variable::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int Variable::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Variable::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline uint32_t Variable::_internal_dimensions(int index) const {
  return _impl_.dimensions_.Get(index);
}
inline uint32_t Variable::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.dimensions)
  return _internal_dimensions(index);
}
inline void Variable::set_dimensions(int index, uint32_t value) {
  _impl_.dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.dimensions)
}
inline void Variable::_internal_add_dimensions(uint32_t value) {
  _impl_.dimensions_.Add(value);
}
inline void Variable::add_dimensions(uint32_t value) {
  _internal_add_dimensions(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Variable::_internal_dimensions() const {
  return _impl_.dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Variable::dimensions() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Variable::_internal_mutable_dimensions() {
  return &_impl_.dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Variable::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.dimensions)
  return _internal_mutable_dimensions();
}

// string type = 3;
inline void Variable::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Variable::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Variable.type)
}
inline std::string* Variable::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:DATA.Variable.type)
  return _s;
}
inline const std::string& Variable::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Variable::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Variable::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:DATA.Variable.type)
  return _impl_.type_.Release();
}
inline void Variable::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.type)
}

// uint32 levels = 4;
inline void Variable::clear_levels() {
  _impl_.levels_ = 0u;
}
inline uint32_t Variable::_internal_levels() const {
  return _impl_.levels_;
}
inline uint32_t Variable::levels() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.levels)
  return _internal_levels();
}
inline void Variable::_internal_set_levels(uint32_t value) {
  
  _impl_.levels_ = value;
}
inline void Variable::set_levels(uint32_t value) {
  _internal_set_levels(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.levels)
}

// repeated double level_error_bounds = 5;
inline int Variable::_internal_level_error_bounds_size() const {
  return _impl_.level_error_bounds_.size();
}
inline int Variable::level_error_bounds_size() const {
  return _internal_level_error_bounds_size();
}
inline void Variable::clear_level_error_bounds() {
  _impl_.level_error_bounds_.Clear();
}
inline double Variable::_internal_level_error_bounds(int index) const {
  return _impl_.level_error_bounds_.Get(index);
}
inline double Variable::level_error_bounds(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.level_error_bounds)
  return _internal_level_error_bounds(index);
}
inline void Variable::set_level_error_bounds(int index, double value) {
  _impl_.level_error_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.level_error_bounds)
}
inline void Variable::_internal_add_level_error_bounds(double value) {
  _impl_.level_error_bounds_.Add(value);
}
inline void Variable::add_level_error_bounds(double value) {
  _internal_add_level_error_bounds(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.level_error_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variable::_internal_level_error_bounds() const {
  return _impl_.level_error_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variable::level_error_bounds() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.level_error_bounds)
  return _internal_level_error_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variable::_internal_mutable_level_error_bounds() {
  return &_impl_.level_error_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variable::mutable_level_error_bounds() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.level_error_bounds)
  return _internal_mutable_level_error_bounds();
}

// repeated uint32 stopping_indices = 6;
inline int Variable::_internal_stopping_indices_size() const {
  return _impl_.stopping_indices_.size();
}
inline int Variable::stopping_indices_size() const {
  return _internal_stopping_indices_size();
}
inline void Variable::clear_stopping_indices() {
  _impl_.stopping_indices_.Clear();
}
inline uint32_t Variable::_internal_stopping_indices(int index) const {
  return _impl_.stopping_indices_.Get(index);
}
inline uint32_t Variable::stopping_indices(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.stopping_indices)
  return _internal_stopping_indices(index);
}
inline void Variable::set_stopping_indices(int index, uint32_t value) {
  _impl_.stopping_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.stopping_indices)
}
inline void Variable::_internal_add_stopping_indices(uint32_t value) {
  _impl_.stopping_indices_.Add(value);
}
inline void Variable::add_stopping_indices(uint32_t value) {
  _internal_add_stopping_indices(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.stopping_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Variable::_internal_stopping_indices() const {
  return _impl_.stopping_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Variable::stopping_indices() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.stopping_indices)
  return _internal_stopping_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Variable::_internal_mutable_stopping_indices() {
  return &_impl_.stopping_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Variable::mutable_stopping_indices() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.stopping_indices)
  return _internal_mutable_stopping_indices();
}

// .DATA.QueryTable table_content = 7;
inline bool Variable::_internal_has_table_content() const {
  return this != internal_default_instance() && _impl_.table_content_ != nullptr;
}
inline bool Variable::has_table_content() const {
  return _internal_has_table_content();
}
inline void Variable::clear_table_content() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_content_ != nullptr) {
    delete _impl_.table_content_;
  }
  _impl_.table_content_ = nullptr;
}
inline const ::DATA::QueryTable& Variable::_internal_table_content() const {
  const ::DATA::QueryTable* p = _impl_.table_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::DATA::QueryTable&>(
      ::DATA::_QueryTable_default_instance_);
}
inline const ::DATA::QueryTable& Variable::table_content() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.table_content)
  return _internal_table_content();
}
inline void Variable::unsafe_arena_set_allocated_table_content(
    ::DATA::QueryTable* table_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_content_);
  }
  _impl_.table_content_ = table_content;
  if (table_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.table_content)
}
inline ::DATA::QueryTable* Variable::release_table_content() {
  
  ::DATA::QueryTable* temp = _impl_.table_content_;
  _impl_.table_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DATA::QueryTable* Variable::unsafe_arena_release_table_content() {
  // @@protoc_insertion_point(field_release:DATA.Variable.table_content)
  
  ::DATA::QueryTable* temp = _impl_.table_content_;
  _impl_.table_content_ = nullptr;
  return temp;
}
inline ::DATA::QueryTable* Variable::_internal_mutable_table_content() {
  
  if (_impl_.table_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::QueryTable>(GetArenaForAllocation());
    _impl_.table_content_ = p;
  }
  return _impl_.table_content_;
}
inline ::DATA::QueryTable* Variable::mutable_table_content() {
  ::DATA::QueryTable* _msg = _internal_mutable_table_content();
  // @@protoc_insertion_point(field_mutable:DATA.Variable.table_content)
  return _msg;
}
inline void Variable::set_allocated_table_content(::DATA::QueryTable* table_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_content_;
  }
  if (table_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_content);
    if (message_arena != submessage_arena) {
      table_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_content, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_content_ = table_content;
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.table_content)
}

// .DATA.SquaredErrorsTable squared_errors = 8;
inline bool Variable::_internal_has_squared_errors() const {
  return this != internal_default_instance() && _impl_.squared_errors_ != nullptr;
}
inline bool Variable::has_squared_errors() const {
  return _internal_has_squared_errors();
}
inline void Variable::clear_squared_errors() {
  if (GetArenaForAllocation() == nullptr && _impl_.squared_errors_ != nullptr) {
    delete _impl_.squared_errors_;
  }
  _impl_.squared_errors_ = nullptr;
}
inline const ::DATA::SquaredErrorsTable& Variable::_internal_squared_errors() const {
  const ::DATA::SquaredErrorsTable* p = _impl_.squared_errors_;
  return p != nullptr ? *p : reinterpret_cast<const ::DATA::SquaredErrorsTable&>(
      ::DATA::_SquaredErrorsTable_default_instance_);
}
inline const ::DATA::SquaredErrorsTable& Variable::squared_errors() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.squared_errors)
  return _internal_squared_errors();
}
inline void Variable::unsafe_arena_set_allocated_squared_errors(
    ::DATA::SquaredErrorsTable* squared_errors) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.squared_errors_);
  }
  _impl_.squared_errors_ = squared_errors;
  if (squared_errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.squared_errors)
}
inline ::DATA::SquaredErrorsTable* Variable::release_squared_errors() {
  
  ::DATA::SquaredErrorsTable* temp = _impl_.squared_errors_;
  _impl_.squared_errors_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DATA::SquaredErrorsTable* Variable::unsafe_arena_release_squared_errors() {
  // @@protoc_insertion_point(field_release:DATA.Variable.squared_errors)
  
  ::DATA::SquaredErrorsTable* temp = _impl_.squared_errors_;
  _impl_.squared_errors_ = nullptr;
  return temp;
}
inline ::DATA::SquaredErrorsTable* Variable::_internal_mutable_squared_errors() {
  
  if (_impl_.squared_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::SquaredErrorsTable>(GetArenaForAllocation());
    _impl_.squared_errors_ = p;
  }
  return _impl_.squared_errors_;
}
inline ::DATA::SquaredErrorsTable* Variable::mutable_squared_errors() {
  ::DATA::SquaredErrorsTable* _msg = _internal_mutable_squared_errors();
  // @@protoc_insertion_point(field_mutable:DATA.Variable.squared_errors)
  return _msg;
}
inline void Variable::set_allocated_squared_errors(::DATA::SquaredErrorsTable* squared_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.squared_errors_;
  }
  if (squared_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(squared_errors);
    if (message_arena != submessage_arena) {
      squared_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, squared_errors, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.squared_errors_ = squared_errors;
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.squared_errors)
}

// uint32 tiers = 9;
inline void Variable::clear_tiers() {
  _impl_.tiers_ = 0u;
}
inline uint32_t Variable::_internal_tiers() const {
  return _impl_.tiers_;
}
inline uint32_t Variable::tiers() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.tiers)
  return _internal_tiers();
}
inline void Variable::_internal_set_tiers(uint32_t value) {
  
  _impl_.tiers_ = value;
}
inline void Variable::set_tiers(uint32_t value) {
  _internal_set_tiers(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.tiers)
}

// -------------------------------------------------------------------

// Tier

// int32 id = 1;
inline void Tier::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Tier::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Tier::id() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.id)
  return _internal_id();
}
inline void Tier::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Tier::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.id)
}

// int32 k = 2;
inline void Tier::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t Tier::_internal_k() const {
  return _impl_.k_;
}
inline int32_t Tier::k() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.k)
  return _internal_k();
}
inline void Tier::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void Tier::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.k)
}

// int32 m = 3;
inline void Tier::clear_m() {
  _impl_.m_ = 0;
}
inline int32_t Tier::_internal_m() const {
  return _impl_.m_;
}
inline int32_t Tier::m() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.m)
  return _internal_m();
}
inline void Tier::_internal_set_m(int32_t value) {
  
  _impl_.m_ = value;
}
inline void Tier::set_m(int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.m)
}

// int32 w = 4;
inline void Tier::clear_w() {
  _impl_.w_ = 0;
}
inline int32_t Tier::_internal_w() const {
  return _impl_.w_;
}
inline int32_t Tier::w() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.w)
  return _internal_w();
}
inline void Tier::_internal_set_w(int32_t value) {
  
  _impl_.w_ = value;
}
inline void Tier::set_w(int32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.w)
}

// int32 hd = 5;
inline void Tier::clear_hd() {
  _impl_.hd_ = 0;
}
inline int32_t Tier::_internal_hd() const {
  return _impl_.hd_;
}
inline int32_t Tier::hd() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.hd)
  return _internal_hd();
}
inline void Tier::_internal_set_hd(int32_t value) {
  
  _impl_.hd_ = value;
}
inline void Tier::set_hd(int32_t value) {
  _internal_set_hd(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.hd)
}

// string ec_backend_name = 6;
inline void Tier::clear_ec_backend_name() {
  _impl_.ec_backend_name_.ClearToEmpty();
}
inline const std::string& Tier::ec_backend_name() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.ec_backend_name)
  return _internal_ec_backend_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Tier::set_ec_backend_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ec_backend_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Tier.ec_backend_name)
}
inline std::string* Tier::mutable_ec_backend_name() {
  std::string* _s = _internal_mutable_ec_backend_name();
  // @@protoc_insertion_point(field_mutable:DATA.Tier.ec_backend_name)
  return _s;
}
inline const std::string& Tier::_internal_ec_backend_name() const {
  return _impl_.ec_backend_name_.Get();
}
inline void Tier::_internal_set_ec_backend_name(const std::string& value) {
  
  _impl_.ec_backend_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Tier::_internal_mutable_ec_backend_name() {
  
  return _impl_.ec_backend_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Tier::release_ec_backend_name() {
  // @@protoc_insertion_point(field_release:DATA.Tier.ec_backend_name)
  return _impl_.ec_backend_name_.Release();
}
inline void Tier::set_allocated_ec_backend_name(std::string* ec_backend_name) {
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  _impl_.ec_backend_name_.SetAllocated(ec_backend_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ec_backend_name_.IsDefault()) {
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Tier.ec_backend_name)
}

// uint64 encoded_fragment_length = 7;
inline void Tier::clear_encoded_fragment_length() {
  _impl_.encoded_fragment_length_ = uint64_t{0u};
}
inline uint64_t Tier::_internal_encoded_fragment_length() const {
  return _impl_.encoded_fragment_length_;
}
inline uint64_t Tier::encoded_fragment_length() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.encoded_fragment_length)
  return _internal_encoded_fragment_length();
}
inline void Tier::_internal_set_encoded_fragment_length(uint64_t value) {
  
  _impl_.encoded_fragment_length_ = value;
}
inline void Tier::set_encoded_fragment_length(uint64_t value) {
  _internal_set_encoded_fragment_length(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.encoded_fragment_length)
}

// -------------------------------------------------------------------

// Fragment

// int32 k = 1;
inline void Fragment::clear_k() {
  _impl_.k_ = 0;
}
inline int32_t Fragment::_internal_k() const {
  return _impl_.k_;
}
inline int32_t Fragment::k() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.k)
  return _internal_k();
}
inline void Fragment::_internal_set_k(int32_t value) {
  
  _impl_.k_ = value;
}
inline void Fragment::set_k(int32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.k)
}

// int32 m = 2;
inline void Fragment::clear_m() {
  _impl_.m_ = 0;
}
inline int32_t Fragment::_internal_m() const {
  return _impl_.m_;
}
inline int32_t Fragment::m() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.m)
  return _internal_m();
}
inline void Fragment::_internal_set_m(int32_t value) {
  
  _impl_.m_ = value;
}
inline void Fragment::set_m(int32_t value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.m)
}

// int32 w = 3;
inline void Fragment::clear_w() {
  _impl_.w_ = 0;
}
inline int32_t Fragment::_internal_w() const {
  return _impl_.w_;
}
inline int32_t Fragment::w() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.w)
  return _internal_w();
}
inline void Fragment::_internal_set_w(int32_t value) {
  
  _impl_.w_ = value;
}
inline void Fragment::set_w(int32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.w)
}

// int32 hd = 4;
inline void Fragment::clear_hd() {
  _impl_.hd_ = 0;
}
inline int32_t Fragment::_internal_hd() const {
  return _impl_.hd_;
}
inline int32_t Fragment::hd() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.hd)
  return _internal_hd();
}
inline void Fragment::_internal_set_hd(int32_t value) {
  
  _impl_.hd_ = value;
}
inline void Fragment::set_hd(int32_t value) {
  _internal_set_hd(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.hd)
}

// bytes ec_backend_name = 5;
inline void Fragment::clear_ec_backend_name() {
  _impl_.ec_backend_name_.ClearToEmpty();
}
inline const std::string& Fragment::ec_backend_name() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.ec_backend_name)
  return _internal_ec_backend_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fragment::set_ec_backend_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ec_backend_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Fragment.ec_backend_name)
}
inline std::string* Fragment::mutable_ec_backend_name() {
  std::string* _s = _internal_mutable_ec_backend_name();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.ec_backend_name)
  return _s;
}
inline const std::string& Fragment::_internal_ec_backend_name() const {
  return _impl_.ec_backend_name_.Get();
}
inline void Fragment::_internal_set_ec_backend_name(const std::string& value) {
  
  _impl_.ec_backend_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Fragment::_internal_mutable_ec_backend_name() {
  
  return _impl_.ec_backend_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Fragment::release_ec_backend_name() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.ec_backend_name)
  return _impl_.ec_backend_name_.Release();
}
inline void Fragment::set_allocated_ec_backend_name(std::string* ec_backend_name) {
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  _impl_.ec_backend_name_.SetAllocated(ec_backend_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ec_backend_name_.IsDefault()) {
    _impl_.ec_backend_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.ec_backend_name)
}

// uint32 encoded_fragment_length = 6;
inline void Fragment::clear_encoded_fragment_length() {
  _impl_.encoded_fragment_length_ = 0u;
}
inline uint32_t Fragment::_internal_encoded_fragment_length() const {
  return _impl_.encoded_fragment_length_;
}
inline uint32_t Fragment::encoded_fragment_length() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.encoded_fragment_length)
  return _internal_encoded_fragment_length();
}
inline void Fragment::_internal_set_encoded_fragment_length(uint32_t value) {
  
  _impl_.encoded_fragment_length_ = value;
}
inline void Fragment::set_encoded_fragment_length(uint32_t value) {
  _internal_set_encoded_fragment_length(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.encoded_fragment_length)
}

// uint32 idx = 7;
inline void Fragment::clear_idx() {
  _impl_.idx_ = 0u;
}
inline uint32_t Fragment::_internal_idx() const {
  return _impl_.idx_;
}
inline uint32_t Fragment::idx() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.idx)
  return _internal_idx();
}
inline void Fragment::_internal_set_idx(uint32_t value) {
  
  _impl_.idx_ = value;
}
inline void Fragment::set_idx(uint32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.idx)
}

// uint32 size = 8;
inline void Fragment::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t Fragment::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t Fragment::size() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.size)
  return _internal_size();
}
inline void Fragment::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void Fragment::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.size)
}

// uint64 orig_data_size = 9;
inline void Fragment::clear_orig_data_size() {
  _impl_.orig_data_size_ = uint64_t{0u};
}
inline uint64_t Fragment::_internal_orig_data_size() const {
  return _impl_.orig_data_size_;
}
inline uint64_t Fragment::orig_data_size() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.orig_data_size)
  return _internal_orig_data_size();
}
inline void Fragment::_internal_set_orig_data_size(uint64_t value) {
  
  _impl_.orig_data_size_ = value;
}
inline void Fragment::set_orig_data_size(uint64_t value) {
  _internal_set_orig_data_size(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.orig_data_size)
}

// uint32 chksum_mismatch = 10;
inline void Fragment::clear_chksum_mismatch() {
  _impl_.chksum_mismatch_ = 0u;
}
inline uint32_t Fragment::_internal_chksum_mismatch() const {
  return _impl_.chksum_mismatch_;
}
inline uint32_t Fragment::chksum_mismatch() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.chksum_mismatch)
  return _internal_chksum_mismatch();
}
inline void Fragment::_internal_set_chksum_mismatch(uint32_t value) {
  
  _impl_.chksum_mismatch_ = value;
}
inline void Fragment::set_chksum_mismatch(uint32_t value) {
  _internal_set_chksum_mismatch(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.chksum_mismatch)
}

// uint32 backend_id = 11;
inline void Fragment::clear_backend_id() {
  _impl_.backend_id_ = 0u;
}
inline uint32_t Fragment::_internal_backend_id() const {
  return _impl_.backend_id_;
}
inline uint32_t Fragment::backend_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.backend_id)
  return _internal_backend_id();
}
inline void Fragment::_internal_set_backend_id(uint32_t value) {
  
  _impl_.backend_id_ = value;
}
inline void Fragment::set_backend_id(uint32_t value) {
  _internal_set_backend_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.backend_id)
}

// bytes frag = 12;
inline void Fragment::clear_frag() {
  _impl_.frag_.ClearToEmpty();
}
inline const std::string& Fragment::frag() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.frag)
  return _internal_frag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fragment::set_frag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.frag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Fragment.frag)
}
inline std::string* Fragment::mutable_frag() {
  std::string* _s = _internal_mutable_frag();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.frag)
  return _s;
}
inline const std::string& Fragment::_internal_frag() const {
  return _impl_.frag_.Get();
}
inline void Fragment::_internal_set_frag(const std::string& value) {
  
  _impl_.frag_.Set(value, GetArenaForAllocation());
}
inline std::string* Fragment::_internal_mutable_frag() {
  
  return _impl_.frag_.Mutable(GetArenaForAllocation());
}
inline std::string* Fragment::release_frag() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.frag)
  return _impl_.frag_.Release();
}
inline void Fragment::set_allocated_frag(std::string* frag) {
  if (frag != nullptr) {
    
  } else {
    
  }
  _impl_.frag_.SetAllocated(frag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.frag_.IsDefault()) {
    _impl_.frag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.frag)
}

// bool is_data = 13;
inline void Fragment::clear_is_data() {
  _impl_.is_data_ = false;
}
inline bool Fragment::_internal_is_data() const {
  return _impl_.is_data_;
}
inline bool Fragment::is_data() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.is_data)
  return _internal_is_data();
}
inline void Fragment::_internal_set_is_data(bool value) {
  
  _impl_.is_data_ = value;
}
inline void Fragment::set_is_data(bool value) {
  _internal_set_is_data(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.is_data)
}

// uint32 tier_id = 14;
inline void Fragment::clear_tier_id() {
  _impl_.tier_id_ = 0u;
}
inline uint32_t Fragment::_internal_tier_id() const {
  return _impl_.tier_id_;
}
inline uint32_t Fragment::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.tier_id)
  return _internal_tier_id();
}
inline void Fragment::_internal_set_tier_id(uint32_t value) {
  
  _impl_.tier_id_ = value;
}
inline void Fragment::set_tier_id(uint32_t value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.tier_id)
}

// uint32 chunk_id = 15;
inline void Fragment::clear_chunk_id() {
  _impl_.chunk_id_ = 0u;
}
inline uint32_t Fragment::_internal_chunk_id() const {
  return _impl_.chunk_id_;
}
inline uint32_t Fragment::chunk_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.chunk_id)
  return _internal_chunk_id();
}
inline void Fragment::_internal_set_chunk_id(uint32_t value) {
  
  _impl_.chunk_id_ = value;
}
inline void Fragment::set_chunk_id(uint32_t value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.chunk_id)
}

// uint32 fragment_id = 16;
inline void Fragment::clear_fragment_id() {
  _impl_.fragment_id_ = 0u;
}
inline uint32_t Fragment::_internal_fragment_id() const {
  return _impl_.fragment_id_;
}
inline uint32_t Fragment::fragment_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.fragment_id)
  return _internal_fragment_id();
}
inline void Fragment::_internal_set_fragment_id(uint32_t value) {
  
  _impl_.fragment_id_ = value;
}
inline void Fragment::set_fragment_id(uint32_t value) {
  _internal_set_fragment_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.fragment_id)
}

// string var_name = 17;
inline void Fragment::clear_var_name() {
  _impl_.var_name_.ClearToEmpty();
}
inline const std::string& Fragment::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_name)
  return _internal_var_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fragment::set_var_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_name)
}
inline std::string* Fragment::mutable_var_name() {
  std::string* _s = _internal_mutable_var_name();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_name)
  return _s;
}
inline const std::string& Fragment::_internal_var_name() const {
  return _impl_.var_name_.Get();
}
inline void Fragment::_internal_set_var_name(const std::string& value) {
  
  _impl_.var_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Fragment::_internal_mutable_var_name() {
  
  return _impl_.var_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Fragment::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_name)
  return _impl_.var_name_.Release();
}
inline void Fragment::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  _impl_.var_name_.SetAllocated(var_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_name_.IsDefault()) {
    _impl_.var_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_name)
}

// repeated uint32 var_dimensions = 18;
inline int Fragment::_internal_var_dimensions_size() const {
  return _impl_.var_dimensions_.size();
}
inline int Fragment::var_dimensions_size() const {
  return _internal_var_dimensions_size();
}
inline void Fragment::clear_var_dimensions() {
  _impl_.var_dimensions_.Clear();
}
inline uint32_t Fragment::_internal_var_dimensions(int index) const {
  return _impl_.var_dimensions_.Get(index);
}
inline uint32_t Fragment::var_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_dimensions)
  return _internal_var_dimensions(index);
}
inline void Fragment::set_var_dimensions(int index, uint32_t value) {
  _impl_.var_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_dimensions)
}
inline void Fragment::_internal_add_var_dimensions(uint32_t value) {
  _impl_.var_dimensions_.Add(value);
}
inline void Fragment::add_var_dimensions(uint32_t value) {
  _internal_add_var_dimensions(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Fragment::_internal_var_dimensions() const {
  return _impl_.var_dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Fragment::var_dimensions() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_dimensions)
  return _internal_var_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Fragment::_internal_mutable_var_dimensions() {
  return &_impl_.var_dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Fragment::mutable_var_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_dimensions)
  return _internal_mutable_var_dimensions();
}

// string var_type = 19;
inline void Fragment::clear_var_type() {
  _impl_.var_type_.ClearToEmpty();
}
inline const std::string& Fragment::var_type() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_type)
  return _internal_var_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Fragment::set_var_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_type)
}
inline std::string* Fragment::mutable_var_type() {
  std::string* _s = _internal_mutable_var_type();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_type)
  return _s;
}
inline const std::string& Fragment::_internal_var_type() const {
  return _impl_.var_type_.Get();
}
inline void Fragment::_internal_set_var_type(const std::string& value) {
  
  _impl_.var_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Fragment::_internal_mutable_var_type() {
  
  return _impl_.var_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Fragment::release_var_type() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_type)
  return _impl_.var_type_.Release();
}
inline void Fragment::set_allocated_var_type(std::string* var_type) {
  if (var_type != nullptr) {
    
  } else {
    
  }
  _impl_.var_type_.SetAllocated(var_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_type_.IsDefault()) {
    _impl_.var_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_type)
}

// uint32 var_levels = 20;
inline void Fragment::clear_var_levels() {
  _impl_.var_levels_ = 0u;
}
inline uint32_t Fragment::_internal_var_levels() const {
  return _impl_.var_levels_;
}
inline uint32_t Fragment::var_levels() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_levels)
  return _internal_var_levels();
}
inline void Fragment::_internal_set_var_levels(uint32_t value) {
  
  _impl_.var_levels_ = value;
}
inline void Fragment::set_var_levels(uint32_t value) {
  _internal_set_var_levels(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_levels)
}

// repeated double var_level_error_bounds = 21;
inline int Fragment::_internal_var_level_error_bounds_size() const {
  return _impl_.var_level_error_bounds_.size();
}
inline int Fragment::var_level_error_bounds_size() const {
  return _internal_var_level_error_bounds_size();
}
inline void Fragment::clear_var_level_error_bounds() {
  _impl_.var_level_error_bounds_.Clear();
}
inline double Fragment::_internal_var_level_error_bounds(int index) const {
  return _impl_.var_level_error_bounds_.Get(index);
}
inline double Fragment::var_level_error_bounds(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_level_error_bounds)
  return _internal_var_level_error_bounds(index);
}
inline void Fragment::set_var_level_error_bounds(int index, double value) {
  _impl_.var_level_error_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_level_error_bounds)
}
inline void Fragment::_internal_add_var_level_error_bounds(double value) {
  _impl_.var_level_error_bounds_.Add(value);
}
inline void Fragment::add_var_level_error_bounds(double value) {
  _internal_add_var_level_error_bounds(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_level_error_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Fragment::_internal_var_level_error_bounds() const {
  return _impl_.var_level_error_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Fragment::var_level_error_bounds() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_level_error_bounds)
  return _internal_var_level_error_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Fragment::_internal_mutable_var_level_error_bounds() {
  return &_impl_.var_level_error_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Fragment::mutable_var_level_error_bounds() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_level_error_bounds)
  return _internal_mutable_var_level_error_bounds();
}

// repeated bytes var_stopping_indices = 22;
inline int Fragment::_internal_var_stopping_indices_size() const {
  return _impl_.var_stopping_indices_.size();
}
inline int Fragment::var_stopping_indices_size() const {
  return _internal_var_stopping_indices_size();
}
inline void Fragment::clear_var_stopping_indices() {
  _impl_.var_stopping_indices_.Clear();
}
inline std::string* Fragment::add_var_stopping_indices() {
  std::string* _s = _internal_add_var_stopping_indices();
  // @@protoc_insertion_point(field_add_mutable:DATA.Fragment.var_stopping_indices)
  return _s;
}
inline const std::string& Fragment::_internal_var_stopping_indices(int index) const {
  return _impl_.var_stopping_indices_.Get(index);
}
inline const std::string& Fragment::var_stopping_indices(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_stopping_indices)
  return _internal_var_stopping_indices(index);
}
inline std::string* Fragment::mutable_var_stopping_indices(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_stopping_indices)
  return _impl_.var_stopping_indices_.Mutable(index);
}
inline void Fragment::set_var_stopping_indices(int index, const std::string& value) {
  _impl_.var_stopping_indices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::set_var_stopping_indices(int index, std::string&& value) {
  _impl_.var_stopping_indices_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::set_var_stopping_indices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.var_stopping_indices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::set_var_stopping_indices(int index, const void* value, size_t size) {
  _impl_.var_stopping_indices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.var_stopping_indices)
}
inline std::string* Fragment::_internal_add_var_stopping_indices() {
  return _impl_.var_stopping_indices_.Add();
}
inline void Fragment::add_var_stopping_indices(const std::string& value) {
  _impl_.var_stopping_indices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(std::string&& value) {
  _impl_.var_stopping_indices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.var_stopping_indices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(const void* value, size_t size) {
  _impl_.var_stopping_indices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DATA.Fragment.var_stopping_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fragment::var_stopping_indices() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_stopping_indices)
  return _impl_.var_stopping_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fragment::mutable_var_stopping_indices() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_stopping_indices)
  return &_impl_.var_stopping_indices_;
}

// .DATA.QueryTable var_table_content = 23;
inline bool Fragment::_internal_has_var_table_content() const {
  return this != internal_default_instance() && _impl_.var_table_content_ != nullptr;
}
inline bool Fragment::has_var_table_content() const {
  return _internal_has_var_table_content();
}
inline void Fragment::clear_var_table_content() {
  if (GetArenaForAllocation() == nullptr && _impl_.var_table_content_ != nullptr) {
    delete _impl_.var_table_content_;
  }
  _impl_.var_table_content_ = nullptr;
}
inline const ::DATA::QueryTable& Fragment::_internal_var_table_content() const {
  const ::DATA::QueryTable* p = _impl_.var_table_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::DATA::QueryTable&>(
      ::DATA::_QueryTable_default_instance_);
}
inline const ::DATA::QueryTable& Fragment::var_table_content() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_table_content)
  return _internal_var_table_content();
}
inline void Fragment::unsafe_arena_set_allocated_var_table_content(
    ::DATA::QueryTable* var_table_content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.var_table_content_);
  }
  _impl_.var_table_content_ = var_table_content;
  if (var_table_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_table_content)
}
inline ::DATA::QueryTable* Fragment::release_var_table_content() {
  
  ::DATA::QueryTable* temp = _impl_.var_table_content_;
  _impl_.var_table_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DATA::QueryTable* Fragment::unsafe_arena_release_var_table_content() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_table_content)
  
  ::DATA::QueryTable* temp = _impl_.var_table_content_;
  _impl_.var_table_content_ = nullptr;
  return temp;
}
inline ::DATA::QueryTable* Fragment::_internal_mutable_var_table_content() {
  
  if (_impl_.var_table_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::QueryTable>(GetArenaForAllocation());
    _impl_.var_table_content_ = p;
  }
  return _impl_.var_table_content_;
}
inline ::DATA::QueryTable* Fragment::mutable_var_table_content() {
  ::DATA::QueryTable* _msg = _internal_mutable_var_table_content();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_table_content)
  return _msg;
}
inline void Fragment::set_allocated_var_table_content(::DATA::QueryTable* var_table_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.var_table_content_;
  }
  if (var_table_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(var_table_content);
    if (message_arena != submessage_arena) {
      var_table_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_table_content, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.var_table_content_ = var_table_content;
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_table_content)
}

// .DATA.SquaredErrorsTable var_squared_errors = 24;
inline bool Fragment::_internal_has_var_squared_errors() const {
  return this != internal_default_instance() && _impl_.var_squared_errors_ != nullptr;
}
inline bool Fragment::has_var_squared_errors() const {
  return _internal_has_var_squared_errors();
}
inline void Fragment::clear_var_squared_errors() {
  if (GetArenaForAllocation() == nullptr && _impl_.var_squared_errors_ != nullptr) {
    delete _impl_.var_squared_errors_;
  }
  _impl_.var_squared_errors_ = nullptr;
}
inline const ::DATA::SquaredErrorsTable& Fragment::_internal_var_squared_errors() const {
  const ::DATA::SquaredErrorsTable* p = _impl_.var_squared_errors_;
  return p != nullptr ? *p : reinterpret_cast<const ::DATA::SquaredErrorsTable&>(
      ::DATA::_SquaredErrorsTable_default_instance_);
}
inline const ::DATA::SquaredErrorsTable& Fragment::var_squared_errors() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_squared_errors)
  return _internal_var_squared_errors();
}
inline void Fragment::unsafe_arena_set_allocated_var_squared_errors(
    ::DATA::SquaredErrorsTable* var_squared_errors) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.var_squared_errors_);
  }
  _impl_.var_squared_errors_ = var_squared_errors;
  if (var_squared_errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_squared_errors)
}
inline ::DATA::SquaredErrorsTable* Fragment::release_var_squared_errors() {
  
  ::DATA::SquaredErrorsTable* temp = _impl_.var_squared_errors_;
  _impl_.var_squared_errors_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DATA::SquaredErrorsTable* Fragment::unsafe_arena_release_var_squared_errors() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_squared_errors)
  
  ::DATA::SquaredErrorsTable* temp = _impl_.var_squared_errors_;
  _impl_.var_squared_errors_ = nullptr;
  return temp;
}
inline ::DATA::SquaredErrorsTable* Fragment::_internal_mutable_var_squared_errors() {
  
  if (_impl_.var_squared_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::SquaredErrorsTable>(GetArenaForAllocation());
    _impl_.var_squared_errors_ = p;
  }
  return _impl_.var_squared_errors_;
}
inline ::DATA::SquaredErrorsTable* Fragment::mutable_var_squared_errors() {
  ::DATA::SquaredErrorsTable* _msg = _internal_mutable_var_squared_errors();
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_squared_errors)
  return _msg;
}
inline void Fragment::set_allocated_var_squared_errors(::DATA::SquaredErrorsTable* var_squared_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.var_squared_errors_;
  }
  if (var_squared_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(var_squared_errors);
    if (message_arena != submessage_arena) {
      var_squared_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_squared_errors, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.var_squared_errors_ = var_squared_errors;
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_squared_errors)
}

// uint32 var_tiers = 25;
inline void Fragment::clear_var_tiers() {
  _impl_.var_tiers_ = 0u;
}
inline uint32_t Fragment::_internal_var_tiers() const {
  return _impl_.var_tiers_;
}
inline uint32_t Fragment::var_tiers() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_tiers)
  return _internal_var_tiers();
}
inline void Fragment::_internal_set_var_tiers(uint32_t value) {
  
  _impl_.var_tiers_ = value;
}
inline void Fragment::set_var_tiers(uint32_t value) {
  _internal_set_var_tiers(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_tiers)
}

// uint64 timestamp = 26;
inline void Fragment::clear_timestamp() {
  _impl_.timestamp_ = uint64_t{0u};
}
inline uint64_t Fragment::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint64_t Fragment::timestamp() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.timestamp)
  return _internal_timestamp();
}
inline void Fragment::_internal_set_timestamp(uint64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Fragment::set_timestamp(uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.timestamp)
}

// uint64 sequence_number = 27;
inline void Fragment::clear_sequence_number() {
  _impl_.sequence_number_ = uint64_t{0u};
}
inline uint64_t Fragment::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline uint64_t Fragment::sequence_number() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.sequence_number)
  return _internal_sequence_number();
}
inline void Fragment::_internal_set_sequence_number(uint64_t value) {
  
  _impl_.sequence_number_ = value;
}
inline void Fragment::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.sequence_number)
}

// -------------------------------------------------------------------

// VariableCollection

// repeated .DATA.Variable variables = 1;
inline int VariableCollection::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int VariableCollection::variables_size() const {
  return _internal_variables_size();
}
inline void VariableCollection::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::DATA::Variable* VariableCollection::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.VariableCollection.variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >*
VariableCollection::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.VariableCollection.variables)
  return &_impl_.variables_;
}
inline const ::DATA::Variable& VariableCollection::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::DATA::Variable& VariableCollection::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.VariableCollection.variables)
  return _internal_variables(index);
}
inline ::DATA::Variable* VariableCollection::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::DATA::Variable* VariableCollection::add_variables() {
  ::DATA::Variable* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:DATA.VariableCollection.variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >&
VariableCollection::variables() const {
  // @@protoc_insertion_point(field_list:DATA.VariableCollection.variables)
  return _impl_.variables_;
}

// -------------------------------------------------------------------

// RetransmissionRequest_VariableRequest_TierRequest

// int32 tier_id = 1;
inline void RetransmissionRequest_VariableRequest_TierRequest::clear_tier_id() {
  _impl_.tier_id_ = 0;
}
inline int32_t RetransmissionRequest_VariableRequest_TierRequest::_internal_tier_id() const {
  return _impl_.tier_id_;
}
inline int32_t RetransmissionRequest_VariableRequest_TierRequest::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.TierRequest.tier_id)
  return _internal_tier_id();
}
inline void RetransmissionRequest_VariableRequest_TierRequest::_internal_set_tier_id(int32_t value) {
  
  _impl_.tier_id_ = value;
}
inline void RetransmissionRequest_VariableRequest_TierRequest::set_tier_id(int32_t value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.TierRequest.tier_id)
}

// repeated int32 chunk_ids = 2;
inline int RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids_size() const {
  return _impl_.chunk_ids_.size();
}
inline int RetransmissionRequest_VariableRequest_TierRequest::chunk_ids_size() const {
  return _internal_chunk_ids_size();
}
inline void RetransmissionRequest_VariableRequest_TierRequest::clear_chunk_ids() {
  _impl_.chunk_ids_.Clear();
}
inline int32_t RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids(int index) const {
  return _impl_.chunk_ids_.Get(index);
}
inline int32_t RetransmissionRequest_VariableRequest_TierRequest::chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_chunk_ids(index);
}
inline void RetransmissionRequest_VariableRequest_TierRequest::set_chunk_ids(int index, int32_t value) {
  _impl_.chunk_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
}
inline void RetransmissionRequest_VariableRequest_TierRequest::_internal_add_chunk_ids(int32_t value) {
  _impl_.chunk_ids_.Add(value);
}
inline void RetransmissionRequest_VariableRequest_TierRequest::add_chunk_ids(int32_t value) {
  _internal_add_chunk_ids(value);
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids() const {
  return _impl_.chunk_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RetransmissionRequest_VariableRequest_TierRequest::chunk_ids() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_chunk_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RetransmissionRequest_VariableRequest_TierRequest::_internal_mutable_chunk_ids() {
  return &_impl_.chunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RetransmissionRequest_VariableRequest_TierRequest::mutable_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_mutable_chunk_ids();
}

// -------------------------------------------------------------------

// RetransmissionRequest_VariableRequest

// string var_name = 1;
inline void RetransmissionRequest_VariableRequest::clear_var_name() {
  _impl_.var_name_.ClearToEmpty();
}
inline const std::string& RetransmissionRequest_VariableRequest::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.var_name)
  return _internal_var_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RetransmissionRequest_VariableRequest::set_var_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline std::string* RetransmissionRequest_VariableRequest::mutable_var_name() {
  std::string* _s = _internal_mutable_var_name();
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.VariableRequest.var_name)
  return _s;
}
inline const std::string& RetransmissionRequest_VariableRequest::_internal_var_name() const {
  return _impl_.var_name_.Get();
}
inline void RetransmissionRequest_VariableRequest::_internal_set_var_name(const std::string& value) {
  
  _impl_.var_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RetransmissionRequest_VariableRequest::_internal_mutable_var_name() {
  
  return _impl_.var_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RetransmissionRequest_VariableRequest::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.RetransmissionRequest.VariableRequest.var_name)
  return _impl_.var_name_.Release();
}
inline void RetransmissionRequest_VariableRequest::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  _impl_.var_name_.SetAllocated(var_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_name_.IsDefault()) {
    _impl_.var_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.RetransmissionRequest.VariableRequest.var_name)
}

// repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
inline int RetransmissionRequest_VariableRequest::_internal_tiers_size() const {
  return _impl_.tiers_.size();
}
inline int RetransmissionRequest_VariableRequest::tiers_size() const {
  return _internal_tiers_size();
}
inline void RetransmissionRequest_VariableRequest::clear_tiers() {
  _impl_.tiers_.Clear();
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _impl_.tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >*
RetransmissionRequest_VariableRequest::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.VariableRequest.tiers)
  return &_impl_.tiers_;
}
inline const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& RetransmissionRequest_VariableRequest::_internal_tiers(int index) const {
  return _impl_.tiers_.Get(index);
}
inline const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& RetransmissionRequest_VariableRequest::tiers(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _internal_tiers(index);
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::_internal_add_tiers() {
  return _impl_.tiers_.Add();
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::add_tiers() {
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* _add = _internal_add_tiers();
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >&
RetransmissionRequest_VariableRequest::tiers() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _impl_.tiers_;
}

// -------------------------------------------------------------------

// RetransmissionRequest

// repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
inline int RetransmissionRequest::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int RetransmissionRequest::variables_size() const {
  return _internal_variables_size();
}
inline void RetransmissionRequest::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >*
RetransmissionRequest::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.variables)
  return &_impl_.variables_;
}
inline const ::DATA::RetransmissionRequest_VariableRequest& RetransmissionRequest::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::DATA::RetransmissionRequest_VariableRequest& RetransmissionRequest::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.variables)
  return _internal_variables(index);
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::add_variables() {
  ::DATA::RetransmissionRequest_VariableRequest* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >&
RetransmissionRequest::variables() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.variables)
  return _impl_.variables_;
}

// -------------------------------------------------------------------

// TierMetadata

// uint32 tier_id = 1;
inline void TierMetadata::clear_tier_id() {
  _impl_.tier_id_ = 0u;
}
inline uint32_t TierMetadata::_internal_tier_id() const {
  return _impl_.tier_id_;
}
inline uint32_t TierMetadata::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.tier_id)
  return _internal_tier_id();
}
inline void TierMetadata::_internal_set_tier_id(uint32_t value) {
  
  _impl_.tier_id_ = value;
}
inline void TierMetadata::set_tier_id(uint32_t value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.tier_id)
}

// uint32 k = 2;
inline void TierMetadata::clear_k() {
  _impl_.k_ = 0u;
}
inline uint32_t TierMetadata::_internal_k() const {
  return _impl_.k_;
}
inline uint32_t TierMetadata::k() const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.k)
  return _internal_k();
}
inline void TierMetadata::_internal_set_k(uint32_t value) {
  
  _impl_.k_ = value;
}
inline void TierMetadata::set_k(uint32_t value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.k)
}

// repeated uint32 chunk_ids = 3;
inline int TierMetadata::_internal_chunk_ids_size() const {
  return _impl_.chunk_ids_.size();
}
inline int TierMetadata::chunk_ids_size() const {
  return _internal_chunk_ids_size();
}
inline void TierMetadata::clear_chunk_ids() {
  _impl_.chunk_ids_.Clear();
}
inline uint32_t TierMetadata::_internal_chunk_ids(int index) const {
  return _impl_.chunk_ids_.Get(index);
}
inline uint32_t TierMetadata::chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.chunk_ids)
  return _internal_chunk_ids(index);
}
inline void TierMetadata::set_chunk_ids(int index, uint32_t value) {
  _impl_.chunk_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.chunk_ids)
}
inline void TierMetadata::_internal_add_chunk_ids(uint32_t value) {
  _impl_.chunk_ids_.Add(value);
}
inline void TierMetadata::add_chunk_ids(uint32_t value) {
  _internal_add_chunk_ids(value);
  // @@protoc_insertion_point(field_add:DATA.TierMetadata.chunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TierMetadata::_internal_chunk_ids() const {
  return _impl_.chunk_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
TierMetadata::chunk_ids() const {
  // @@protoc_insertion_point(field_list:DATA.TierMetadata.chunk_ids)
  return _internal_chunk_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TierMetadata::_internal_mutable_chunk_ids() {
  return &_impl_.chunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
TierMetadata::mutable_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:DATA.TierMetadata.chunk_ids)
  return _internal_mutable_chunk_ids();
}

// -------------------------------------------------------------------

// VariableMetadata

// string var_name = 1;
inline void VariableMetadata::clear_var_name() {
  _impl_.var_name_.ClearToEmpty();
}
inline const std::string& VariableMetadata::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.VariableMetadata.var_name)
  return _internal_var_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VariableMetadata::set_var_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.VariableMetadata.var_name)
}
inline std::string* VariableMetadata::mutable_var_name() {
  std::string* _s = _internal_mutable_var_name();
  // @@protoc_insertion_point(field_mutable:DATA.VariableMetadata.var_name)
  return _s;
}
inline const std::string& VariableMetadata::_internal_var_name() const {
  return _impl_.var_name_.Get();
}
inline void VariableMetadata::_internal_set_var_name(const std::string& value) {
  
  _impl_.var_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VariableMetadata::_internal_mutable_var_name() {
  
  return _impl_.var_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VariableMetadata::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.VariableMetadata.var_name)
  return _impl_.var_name_.Release();
}
inline void VariableMetadata::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  _impl_.var_name_.SetAllocated(var_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_name_.IsDefault()) {
    _impl_.var_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.VariableMetadata.var_name)
}

// repeated .DATA.TierMetadata tiers = 2;
inline int VariableMetadata::_internal_tiers_size() const {
  return _impl_.tiers_.size();
}
inline int VariableMetadata::tiers_size() const {
  return _internal_tiers_size();
}
inline void VariableMetadata::clear_tiers() {
  _impl_.tiers_.Clear();
}
inline ::DATA::TierMetadata* VariableMetadata::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.VariableMetadata.tiers)
  return _impl_.tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >*
VariableMetadata::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:DATA.VariableMetadata.tiers)
  return &_impl_.tiers_;
}
inline const ::DATA::TierMetadata& VariableMetadata::_internal_tiers(int index) const {
  return _impl_.tiers_.Get(index);
}
inline const ::DATA::TierMetadata& VariableMetadata::tiers(int index) const {
  // @@protoc_insertion_point(field_get:DATA.VariableMetadata.tiers)
  return _internal_tiers(index);
}
inline ::DATA::TierMetadata* VariableMetadata::_internal_add_tiers() {
  return _impl_.tiers_.Add();
}
inline ::DATA::TierMetadata* VariableMetadata::add_tiers() {
  ::DATA::TierMetadata* _add = _internal_add_tiers();
  // @@protoc_insertion_point(field_add:DATA.VariableMetadata.tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >&
VariableMetadata::tiers() const {
  // @@protoc_insertion_point(field_list:DATA.VariableMetadata.tiers)
  return _impl_.tiers_;
}

// -------------------------------------------------------------------

// Metadata

// repeated .DATA.VariableMetadata variables = 1;
inline int Metadata::_internal_variables_size() const {
  return _impl_.variables_.size();
}
inline int Metadata::variables_size() const {
  return _internal_variables_size();
}
inline void Metadata::clear_variables() {
  _impl_.variables_.Clear();
}
inline ::DATA::VariableMetadata* Metadata::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.Metadata.variables)
  return _impl_.variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >*
Metadata::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Metadata.variables)
  return &_impl_.variables_;
}
inline const ::DATA::VariableMetadata& Metadata::_internal_variables(int index) const {
  return _impl_.variables_.Get(index);
}
inline const ::DATA::VariableMetadata& Metadata::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Metadata.variables)
  return _internal_variables(index);
}
inline ::DATA::VariableMetadata* Metadata::_internal_add_variables() {
  return _impl_.variables_.Add();
}
inline ::DATA::VariableMetadata* Metadata::add_variables() {
  ::DATA::VariableMetadata* _add = _internal_add_variables();
  // @@protoc_insertion_point(field_add:DATA.Metadata.variables)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >&
Metadata::variables() const {
  // @@protoc_insertion_point(field_list:DATA.Metadata.variables)
  return _impl_.variables_;
}

// -------------------------------------------------------------------

// FragmentsReport

// bytes var_name = 1;
inline void FragmentsReport::clear_var_name() {
  _impl_.var_name_.ClearToEmpty();
}
inline const std::string& FragmentsReport::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.var_name)
  return _internal_var_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FragmentsReport::set_var_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.var_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.var_name)
}
inline std::string* FragmentsReport::mutable_var_name() {
  std::string* _s = _internal_mutable_var_name();
  // @@protoc_insertion_point(field_mutable:DATA.FragmentsReport.var_name)
  return _s;
}
inline const std::string& FragmentsReport::_internal_var_name() const {
  return _impl_.var_name_.Get();
}
inline void FragmentsReport::_internal_set_var_name(const std::string& value) {
  
  _impl_.var_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FragmentsReport::_internal_mutable_var_name() {
  
  return _impl_.var_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FragmentsReport::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.FragmentsReport.var_name)
  return _impl_.var_name_.Release();
}
inline void FragmentsReport::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  _impl_.var_name_.SetAllocated(var_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.var_name_.IsDefault()) {
    _impl_.var_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DATA.FragmentsReport.var_name)
}

// uint32 tier_id = 2;
inline void FragmentsReport::clear_tier_id() {
  _impl_.tier_id_ = 0u;
}
inline uint32_t FragmentsReport::_internal_tier_id() const {
  return _impl_.tier_id_;
}
inline uint32_t FragmentsReport::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.tier_id)
  return _internal_tier_id();
}
inline void FragmentsReport::_internal_set_tier_id(uint32_t value) {
  
  _impl_.tier_id_ = value;
}
inline void FragmentsReport::set_tier_id(uint32_t value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.tier_id)
}

// uint32 chunks_processed = 3;
inline void FragmentsReport::clear_chunks_processed() {
  _impl_.chunks_processed_ = 0u;
}
inline uint32_t FragmentsReport::_internal_chunks_processed() const {
  return _impl_.chunks_processed_;
}
inline uint32_t FragmentsReport::chunks_processed() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.chunks_processed)
  return _internal_chunks_processed();
}
inline void FragmentsReport::_internal_set_chunks_processed(uint32_t value) {
  
  _impl_.chunks_processed_ = value;
}
inline void FragmentsReport::set_chunks_processed(uint32_t value) {
  _internal_set_chunks_processed(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.chunks_processed)
}

// uint32 total_fragments = 4;
inline void FragmentsReport::clear_total_fragments() {
  _impl_.total_fragments_ = 0u;
}
inline uint32_t FragmentsReport::_internal_total_fragments() const {
  return _impl_.total_fragments_;
}
inline uint32_t FragmentsReport::total_fragments() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.total_fragments)
  return _internal_total_fragments();
}
inline void FragmentsReport::_internal_set_total_fragments(uint32_t value) {
  
  _impl_.total_fragments_ = value;
}
inline void FragmentsReport::set_total_fragments(uint32_t value) {
  _internal_set_total_fragments(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.total_fragments)
}

// uint32 expected_fragments = 5;
inline void FragmentsReport::clear_expected_fragments() {
  _impl_.expected_fragments_ = 0u;
}
inline uint32_t FragmentsReport::_internal_expected_fragments() const {
  return _impl_.expected_fragments_;
}
inline uint32_t FragmentsReport::expected_fragments() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.expected_fragments)
  return _internal_expected_fragments();
}
inline void FragmentsReport::_internal_set_expected_fragments(uint32_t value) {
  
  _impl_.expected_fragments_ = value;
}
inline void FragmentsReport::set_expected_fragments(uint32_t value) {
  _internal_set_expected_fragments(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.expected_fragments)
}

// uint64 time_window = 6;
inline void FragmentsReport::clear_time_window() {
  _impl_.time_window_ = uint64_t{0u};
}
inline uint64_t FragmentsReport::_internal_time_window() const {
  return _impl_.time_window_;
}
inline uint64_t FragmentsReport::time_window() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.time_window)
  return _internal_time_window();
}
inline void FragmentsReport::_internal_set_time_window(uint64_t value) {
  
  _impl_.time_window_ = value;
}
inline void FragmentsReport::set_time_window(uint64_t value) {
  _internal_set_time_window(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.time_window)
}

// double lambda = 7;
inline void FragmentsReport::clear_lambda() {
  _impl_.lambda_ = 0;
}
inline double FragmentsReport::_internal_lambda() const {
  return _impl_.lambda_;
}
inline double FragmentsReport::lambda() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.lambda)
  return _internal_lambda();
}
inline void FragmentsReport::_internal_set_lambda(double value) {
  
  _impl_.lambda_ = value;
}
inline void FragmentsReport::set_lambda(double value) {
  _internal_set_lambda(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.lambda)
}

// -------------------------------------------------------------------

// TierCompleteAck

// uint32 tier_id = 1;
inline void TierCompleteAck::clear_tier_id() {
  _impl_.tier_id_ = 0u;
}
inline uint32_t TierCompleteAck::_internal_tier_id() const {
  return _impl_.tier_id_;
}
inline uint32_t TierCompleteAck::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.TierCompleteAck.tier_id)
  return _internal_tier_id();
}
inline void TierCompleteAck::_internal_set_tier_id(uint32_t value) {
  
  _impl_.tier_id_ = value;
}
inline void TierCompleteAck::set_tier_id(uint32_t value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.TierCompleteAck.tier_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DATA

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto
