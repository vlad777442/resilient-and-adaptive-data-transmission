// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fragment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fragment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fragment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fragment_2eproto;
namespace DATA {
class ControlMessage;
class ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class Fragment;
class FragmentDefaultTypeInternal;
extern FragmentDefaultTypeInternal _Fragment_default_instance_;
class FragmentsReport;
class FragmentsReportDefaultTypeInternal;
extern FragmentsReportDefaultTypeInternal _FragmentsReport_default_instance_;
class Metadata;
class MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class QueryTable;
class QueryTableDefaultTypeInternal;
extern QueryTableDefaultTypeInternal _QueryTable_default_instance_;
class RetransmissionRequest;
class RetransmissionRequestDefaultTypeInternal;
extern RetransmissionRequestDefaultTypeInternal _RetransmissionRequest_default_instance_;
class RetransmissionRequest_VariableRequest;
class RetransmissionRequest_VariableRequestDefaultTypeInternal;
extern RetransmissionRequest_VariableRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_default_instance_;
class RetransmissionRequest_VariableRequest_TierRequest;
class RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal;
extern RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal _RetransmissionRequest_VariableRequest_TierRequest_default_instance_;
class SquaredErrorsTable;
class SquaredErrorsTableDefaultTypeInternal;
extern SquaredErrorsTableDefaultTypeInternal _SquaredErrorsTable_default_instance_;
class Tier;
class TierDefaultTypeInternal;
extern TierDefaultTypeInternal _Tier_default_instance_;
class TierCompleteAck;
class TierCompleteAckDefaultTypeInternal;
extern TierCompleteAckDefaultTypeInternal _TierCompleteAck_default_instance_;
class TierMetadata;
class TierMetadataDefaultTypeInternal;
extern TierMetadataDefaultTypeInternal _TierMetadata_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableCollection;
class VariableCollectionDefaultTypeInternal;
extern VariableCollectionDefaultTypeInternal _VariableCollection_default_instance_;
class VariableMetadata;
class VariableMetadataDefaultTypeInternal;
extern VariableMetadataDefaultTypeInternal _VariableMetadata_default_instance_;
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> ::DATA::ControlMessage* Arena::CreateMaybeMessage<::DATA::ControlMessage>(Arena*);
template<> ::DATA::Fragment* Arena::CreateMaybeMessage<::DATA::Fragment>(Arena*);
template<> ::DATA::FragmentsReport* Arena::CreateMaybeMessage<::DATA::FragmentsReport>(Arena*);
template<> ::DATA::Metadata* Arena::CreateMaybeMessage<::DATA::Metadata>(Arena*);
template<> ::DATA::QueryTable* Arena::CreateMaybeMessage<::DATA::QueryTable>(Arena*);
template<> ::DATA::RetransmissionRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest>(Arena*);
template<> ::DATA::RetransmissionRequest_VariableRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest_VariableRequest>(Arena*);
template<> ::DATA::RetransmissionRequest_VariableRequest_TierRequest* Arena::CreateMaybeMessage<::DATA::RetransmissionRequest_VariableRequest_TierRequest>(Arena*);
template<> ::DATA::SquaredErrorsTable* Arena::CreateMaybeMessage<::DATA::SquaredErrorsTable>(Arena*);
template<> ::DATA::Tier* Arena::CreateMaybeMessage<::DATA::Tier>(Arena*);
template<> ::DATA::TierCompleteAck* Arena::CreateMaybeMessage<::DATA::TierCompleteAck>(Arena*);
template<> ::DATA::TierMetadata* Arena::CreateMaybeMessage<::DATA::TierMetadata>(Arena*);
template<> ::DATA::Variable* Arena::CreateMaybeMessage<::DATA::Variable>(Arena*);
template<> ::DATA::VariableCollection* Arena::CreateMaybeMessage<::DATA::VariableCollection>(Arena*);
template<> ::DATA::VariableMetadata* Arena::CreateMaybeMessage<::DATA::VariableMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DATA {

enum ControlMessage_ControlType : int {
  ControlMessage_ControlType_UNKNOWN = 0,
  ControlMessage_ControlType_TIER_END = 1,
  ControlMessage_ControlType_TIER_COMPLETE = 2,
  ControlMessage_ControlType_ALL_COMPLETE = 3,
  ControlMessage_ControlType_ControlMessage_ControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlMessage_ControlType_ControlMessage_ControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlMessage_ControlType_IsValid(int value);
constexpr ControlMessage_ControlType ControlMessage_ControlType_ControlType_MIN = ControlMessage_ControlType_UNKNOWN;
constexpr ControlMessage_ControlType ControlMessage_ControlType_ControlType_MAX = ControlMessage_ControlType_ALL_COMPLETE;
constexpr int ControlMessage_ControlType_ControlType_ARRAYSIZE = ControlMessage_ControlType_ControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_ControlType_descriptor();
template<typename T>
inline const std::string& ControlMessage_ControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMessage_ControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMessage_ControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMessage_ControlType_descriptor(), enum_t_value);
}
inline bool ControlMessage_ControlType_Parse(
    const std::string& name, ControlMessage_ControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMessage_ControlType>(
    ControlMessage_ControlType_descriptor(), name, value);
}
// ===================================================================

class QueryTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.QueryTable) */ {
 public:
  inline QueryTable() : QueryTable(nullptr) {};
  virtual ~QueryTable();

  QueryTable(const QueryTable& from);
  QueryTable(QueryTable&& from) noexcept
    : QueryTable() {
    *this = ::std::move(from);
  }

  inline QueryTable& operator=(const QueryTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTable& operator=(QueryTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryTable* internal_default_instance() {
    return reinterpret_cast<const QueryTable*>(
               &_QueryTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryTable& a, QueryTable& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryTable* New() const final {
    return CreateMaybeMessage<QueryTable>(nullptr);
  }

  QueryTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryTable& from);
  void MergeFrom(const QueryTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.QueryTable";
  }
  protected:
  explicit QueryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated uint64 content = 3;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_content(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_content() const;
  void _internal_add_content(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_content();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 content(int index) const;
  void set_content(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_content(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_content();

  // int32 rows = 1;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cols = 2;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.QueryTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > content_;
  mutable std::atomic<int> _content_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class SquaredErrorsTable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.SquaredErrorsTable) */ {
 public:
  inline SquaredErrorsTable() : SquaredErrorsTable(nullptr) {};
  virtual ~SquaredErrorsTable();

  SquaredErrorsTable(const SquaredErrorsTable& from);
  SquaredErrorsTable(SquaredErrorsTable&& from) noexcept
    : SquaredErrorsTable() {
    *this = ::std::move(from);
  }

  inline SquaredErrorsTable& operator=(const SquaredErrorsTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline SquaredErrorsTable& operator=(SquaredErrorsTable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SquaredErrorsTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SquaredErrorsTable* internal_default_instance() {
    return reinterpret_cast<const SquaredErrorsTable*>(
               &_SquaredErrorsTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SquaredErrorsTable& a, SquaredErrorsTable& b) {
    a.Swap(&b);
  }
  inline void Swap(SquaredErrorsTable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SquaredErrorsTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SquaredErrorsTable* New() const final {
    return CreateMaybeMessage<SquaredErrorsTable>(nullptr);
  }

  SquaredErrorsTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SquaredErrorsTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SquaredErrorsTable& from);
  void MergeFrom(const SquaredErrorsTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SquaredErrorsTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.SquaredErrorsTable";
  }
  protected:
  explicit SquaredErrorsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated double content = 3;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  private:
  double _internal_content(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_content() const;
  void _internal_add_content(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_content();
  public:
  double content(int index) const;
  void set_content(int index, double value);
  void add_content(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_content();

  // int32 rows = 1;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cols = 2;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::int32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.SquaredErrorsTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > content_;
  mutable std::atomic<int> _content_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Variable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Variable) */ {
 public:
  inline Variable() : Variable(nullptr) {};
  virtual ~Variable();

  Variable(const Variable& from);
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }
  inline void Swap(Variable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Variable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(nullptr);
  }

  Variable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Variable";
  }
  protected:
  explicit Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 2,
    kLevelErrorBoundsFieldNumber = 5,
    kStoppingIndicesFieldNumber = 6,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 3,
    kTableContentFieldNumber = 7,
    kSquaredErrorsFieldNumber = 8,
    kLevelsFieldNumber = 4,
    kTiersFieldNumber = 9,
  };
  // repeated uint32 dimensions = 2;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dimensions() const;
  void _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dimensions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dimensions(int index) const;
  void set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dimensions();

  // repeated double level_error_bounds = 5;
  int level_error_bounds_size() const;
  private:
  int _internal_level_error_bounds_size() const;
  public:
  void clear_level_error_bounds();
  private:
  double _internal_level_error_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_level_error_bounds() const;
  void _internal_add_level_error_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_level_error_bounds();
  public:
  double level_error_bounds(int index) const;
  void set_level_error_bounds(int index, double value);
  void add_level_error_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      level_error_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_level_error_bounds();

  // repeated uint32 stopping_indices = 6;
  int stopping_indices_size() const;
  private:
  int _internal_stopping_indices_size() const;
  public:
  void clear_stopping_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stopping_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_stopping_indices() const;
  void _internal_add_stopping_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_stopping_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 stopping_indices(int index) const;
  void set_stopping_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_stopping_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      stopping_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_stopping_indices();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .DATA.QueryTable table_content = 7;
  bool has_table_content() const;
  private:
  bool _internal_has_table_content() const;
  public:
  void clear_table_content();
  const ::DATA::QueryTable& table_content() const;
  ::DATA::QueryTable* release_table_content();
  ::DATA::QueryTable* mutable_table_content();
  void set_allocated_table_content(::DATA::QueryTable* table_content);
  private:
  const ::DATA::QueryTable& _internal_table_content() const;
  ::DATA::QueryTable* _internal_mutable_table_content();
  public:
  void unsafe_arena_set_allocated_table_content(
      ::DATA::QueryTable* table_content);
  ::DATA::QueryTable* unsafe_arena_release_table_content();

  // .DATA.SquaredErrorsTable squared_errors = 8;
  bool has_squared_errors() const;
  private:
  bool _internal_has_squared_errors() const;
  public:
  void clear_squared_errors();
  const ::DATA::SquaredErrorsTable& squared_errors() const;
  ::DATA::SquaredErrorsTable* release_squared_errors();
  ::DATA::SquaredErrorsTable* mutable_squared_errors();
  void set_allocated_squared_errors(::DATA::SquaredErrorsTable* squared_errors);
  private:
  const ::DATA::SquaredErrorsTable& _internal_squared_errors() const;
  ::DATA::SquaredErrorsTable* _internal_mutable_squared_errors();
  public:
  void unsafe_arena_set_allocated_squared_errors(
      ::DATA::SquaredErrorsTable* squared_errors);
  ::DATA::SquaredErrorsTable* unsafe_arena_release_squared_errors();

  // uint32 levels = 4;
  void clear_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 levels() const;
  void set_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levels() const;
  void _internal_set_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tiers = 9;
  void clear_tiers();
  ::PROTOBUF_NAMESPACE_ID::uint32 tiers() const;
  void set_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tiers() const;
  void _internal_set_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Variable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dimensions_;
  mutable std::atomic<int> _dimensions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > level_error_bounds_;
  mutable std::atomic<int> _level_error_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > stopping_indices_;
  mutable std::atomic<int> _stopping_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::DATA::QueryTable* table_content_;
  ::DATA::SquaredErrorsTable* squared_errors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Tier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Tier) */ {
 public:
  inline Tier() : Tier(nullptr) {};
  virtual ~Tier();

  Tier(const Tier& from);
  Tier(Tier&& from) noexcept
    : Tier() {
    *this = ::std::move(from);
  }

  inline Tier& operator=(const Tier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tier& operator=(Tier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tier* internal_default_instance() {
    return reinterpret_cast<const Tier*>(
               &_Tier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tier& a, Tier& b) {
    a.Swap(&b);
  }
  inline void Swap(Tier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tier* New() const final {
    return CreateMaybeMessage<Tier>(nullptr);
  }

  Tier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tier& from);
  void MergeFrom(const Tier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Tier";
  }
  protected:
  explicit Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcBackendNameFieldNumber = 6,
    kIdFieldNumber = 1,
    kKFieldNumber = 2,
    kMFieldNumber = 3,
    kWFieldNumber = 4,
    kEncodedFragmentLengthFieldNumber = 7,
    kHdFieldNumber = 5,
  };
  // string ec_backend_name = 6;
  void clear_ec_backend_name();
  const std::string& ec_backend_name() const;
  void set_ec_backend_name(const std::string& value);
  void set_ec_backend_name(std::string&& value);
  void set_ec_backend_name(const char* value);
  void set_ec_backend_name(const char* value, size_t size);
  std::string* mutable_ec_backend_name();
  std::string* release_ec_backend_name();
  void set_allocated_ec_backend_name(std::string* ec_backend_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ec_backend_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ec_backend_name(
      std::string* ec_backend_name);
  private:
  const std::string& _internal_ec_backend_name() const;
  void _internal_set_ec_backend_name(const std::string& value);
  std::string* _internal_mutable_ec_backend_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 k = 2;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m = 3;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::int32 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 4;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 encoded_fragment_length = 7;
  void clear_encoded_fragment_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 encoded_fragment_length() const;
  void set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_encoded_fragment_length() const;
  void _internal_set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 hd = 5;
  void clear_hd();
  ::PROTOBUF_NAMESPACE_ID::int32 hd() const;
  void set_hd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hd() const;
  void _internal_set_hd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Tier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_backend_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::uint64 encoded_fragment_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 hd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Fragment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Fragment) */ {
 public:
  inline Fragment() : Fragment(nullptr) {};
  virtual ~Fragment();

  Fragment(const Fragment& from);
  Fragment(Fragment&& from) noexcept
    : Fragment() {
    *this = ::std::move(from);
  }

  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fragment& operator=(Fragment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fragment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fragment* internal_default_instance() {
    return reinterpret_cast<const Fragment*>(
               &_Fragment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fragment& a, Fragment& b) {
    a.Swap(&b);
  }
  inline void Swap(Fragment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fragment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fragment* New() const final {
    return CreateMaybeMessage<Fragment>(nullptr);
  }

  Fragment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fragment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fragment& from);
  void MergeFrom(const Fragment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fragment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Fragment";
  }
  protected:
  explicit Fragment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarDimensionsFieldNumber = 18,
    kVarLevelErrorBoundsFieldNumber = 21,
    kVarStoppingIndicesFieldNumber = 22,
    kEcBackendNameFieldNumber = 5,
    kFragFieldNumber = 12,
    kVarNameFieldNumber = 17,
    kVarTypeFieldNumber = 19,
    kVarTableContentFieldNumber = 23,
    kVarSquaredErrorsFieldNumber = 24,
    kKFieldNumber = 1,
    kMFieldNumber = 2,
    kWFieldNumber = 3,
    kHdFieldNumber = 4,
    kEncodedFragmentLengthFieldNumber = 6,
    kIdxFieldNumber = 7,
    kOrigDataSizeFieldNumber = 9,
    kSizeFieldNumber = 8,
    kChksumMismatchFieldNumber = 10,
    kBackendIdFieldNumber = 11,
    kIsDataFieldNumber = 13,
    kTierIdFieldNumber = 14,
    kChunkIdFieldNumber = 15,
    kFragmentIdFieldNumber = 16,
    kVarLevelsFieldNumber = 20,
    kTimestampFieldNumber = 26,
    kSequenceNumberFieldNumber = 27,
    kVarTiersFieldNumber = 25,
  };
  // repeated uint32 var_dimensions = 18;
  int var_dimensions_size() const;
  private:
  int _internal_var_dimensions_size() const;
  public:
  void clear_var_dimensions();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_var_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_var_dimensions() const;
  void _internal_add_var_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_var_dimensions();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 var_dimensions(int index) const;
  void set_var_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_var_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      var_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_var_dimensions();

  // repeated double var_level_error_bounds = 21;
  int var_level_error_bounds_size() const;
  private:
  int _internal_var_level_error_bounds_size() const;
  public:
  void clear_var_level_error_bounds();
  private:
  double _internal_var_level_error_bounds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_var_level_error_bounds() const;
  void _internal_add_var_level_error_bounds(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_var_level_error_bounds();
  public:
  double var_level_error_bounds(int index) const;
  void set_var_level_error_bounds(int index, double value);
  void add_var_level_error_bounds(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      var_level_error_bounds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_var_level_error_bounds();

  // repeated bytes var_stopping_indices = 22;
  int var_stopping_indices_size() const;
  private:
  int _internal_var_stopping_indices_size() const;
  public:
  void clear_var_stopping_indices();
  const std::string& var_stopping_indices(int index) const;
  std::string* mutable_var_stopping_indices(int index);
  void set_var_stopping_indices(int index, const std::string& value);
  void set_var_stopping_indices(int index, std::string&& value);
  void set_var_stopping_indices(int index, const char* value);
  void set_var_stopping_indices(int index, const void* value, size_t size);
  std::string* add_var_stopping_indices();
  void add_var_stopping_indices(const std::string& value);
  void add_var_stopping_indices(std::string&& value);
  void add_var_stopping_indices(const char* value);
  void add_var_stopping_indices(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_stopping_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_stopping_indices();
  private:
  const std::string& _internal_var_stopping_indices(int index) const;
  std::string* _internal_add_var_stopping_indices();
  public:

  // bytes ec_backend_name = 5;
  void clear_ec_backend_name();
  const std::string& ec_backend_name() const;
  void set_ec_backend_name(const std::string& value);
  void set_ec_backend_name(std::string&& value);
  void set_ec_backend_name(const char* value);
  void set_ec_backend_name(const void* value, size_t size);
  std::string* mutable_ec_backend_name();
  std::string* release_ec_backend_name();
  void set_allocated_ec_backend_name(std::string* ec_backend_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ec_backend_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ec_backend_name(
      std::string* ec_backend_name);
  private:
  const std::string& _internal_ec_backend_name() const;
  void _internal_set_ec_backend_name(const std::string& value);
  std::string* _internal_mutable_ec_backend_name();
  public:

  // bytes frag = 12;
  void clear_frag();
  const std::string& frag() const;
  void set_frag(const std::string& value);
  void set_frag(std::string&& value);
  void set_frag(const char* value);
  void set_frag(const void* value, size_t size);
  std::string* mutable_frag();
  std::string* release_frag();
  void set_allocated_frag(std::string* frag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frag(
      std::string* frag);
  private:
  const std::string& _internal_frag() const;
  void _internal_set_frag(const std::string& value);
  std::string* _internal_mutable_frag();
  public:

  // string var_name = 17;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // string var_type = 19;
  void clear_var_type();
  const std::string& var_type() const;
  void set_var_type(const std::string& value);
  void set_var_type(std::string&& value);
  void set_var_type(const char* value);
  void set_var_type(const char* value, size_t size);
  std::string* mutable_var_type();
  std::string* release_var_type();
  void set_allocated_var_type(std::string* var_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_type(
      std::string* var_type);
  private:
  const std::string& _internal_var_type() const;
  void _internal_set_var_type(const std::string& value);
  std::string* _internal_mutable_var_type();
  public:

  // .DATA.QueryTable var_table_content = 23;
  bool has_var_table_content() const;
  private:
  bool _internal_has_var_table_content() const;
  public:
  void clear_var_table_content();
  const ::DATA::QueryTable& var_table_content() const;
  ::DATA::QueryTable* release_var_table_content();
  ::DATA::QueryTable* mutable_var_table_content();
  void set_allocated_var_table_content(::DATA::QueryTable* var_table_content);
  private:
  const ::DATA::QueryTable& _internal_var_table_content() const;
  ::DATA::QueryTable* _internal_mutable_var_table_content();
  public:
  void unsafe_arena_set_allocated_var_table_content(
      ::DATA::QueryTable* var_table_content);
  ::DATA::QueryTable* unsafe_arena_release_var_table_content();

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  bool has_var_squared_errors() const;
  private:
  bool _internal_has_var_squared_errors() const;
  public:
  void clear_var_squared_errors();
  const ::DATA::SquaredErrorsTable& var_squared_errors() const;
  ::DATA::SquaredErrorsTable* release_var_squared_errors();
  ::DATA::SquaredErrorsTable* mutable_var_squared_errors();
  void set_allocated_var_squared_errors(::DATA::SquaredErrorsTable* var_squared_errors);
  private:
  const ::DATA::SquaredErrorsTable& _internal_var_squared_errors() const;
  ::DATA::SquaredErrorsTable* _internal_mutable_var_squared_errors();
  public:
  void unsafe_arena_set_allocated_var_squared_errors(
      ::DATA::SquaredErrorsTable* var_squared_errors);
  ::DATA::SquaredErrorsTable* unsafe_arena_release_var_squared_errors();

  // int32 k = 1;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m = 2;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::int32 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 w = 3;
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hd = 4;
  void clear_hd();
  ::PROTOBUF_NAMESPACE_ID::int32 hd() const;
  void set_hd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hd() const;
  void _internal_set_hd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 encoded_fragment_length = 6;
  void clear_encoded_fragment_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 encoded_fragment_length() const;
  void set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encoded_fragment_length() const;
  void _internal_set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 idx = 7;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 orig_data_size = 9;
  void clear_orig_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_data_size() const;
  void set_orig_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orig_data_size() const;
  void _internal_set_orig_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chksum_mismatch = 10;
  void clear_chksum_mismatch();
  ::PROTOBUF_NAMESPACE_ID::uint32 chksum_mismatch() const;
  void set_chksum_mismatch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chksum_mismatch() const;
  void _internal_set_chksum_mismatch(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 backend_id = 11;
  void clear_backend_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 backend_id() const;
  void set_backend_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_backend_id() const;
  void _internal_set_backend_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_data = 13;
  void clear_is_data();
  bool is_data() const;
  void set_is_data(bool value);
  private:
  bool _internal_is_data() const;
  void _internal_set_is_data(bool value);
  public:

  // uint32 tier_id = 14;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chunk_id = 15;
  void clear_chunk_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_id() const;
  void set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_id() const;
  void _internal_set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fragment_id = 16;
  void clear_fragment_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fragment_id() const;
  void set_fragment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fragment_id() const;
  void _internal_set_fragment_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 var_levels = 20;
  void clear_var_levels();
  ::PROTOBUF_NAMESPACE_ID::uint32 var_levels() const;
  void set_var_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_var_levels() const;
  void _internal_set_var_levels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 timestamp = 26;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 sequence_number = 27;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 var_tiers = 25;
  void clear_var_tiers();
  ::PROTOBUF_NAMESPACE_ID::uint32 var_tiers() const;
  void set_var_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_var_tiers() const;
  void _internal_set_var_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.Fragment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > var_dimensions_;
  mutable std::atomic<int> _var_dimensions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > var_level_error_bounds_;
  mutable std::atomic<int> _var_level_error_bounds_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_stopping_indices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_backend_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_type_;
  ::DATA::QueryTable* var_table_content_;
  ::DATA::SquaredErrorsTable* var_squared_errors_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 hd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 encoded_fragment_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orig_data_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chksum_mismatch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 backend_id_;
  bool is_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fragment_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 var_levels_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 var_tiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class VariableCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.VariableCollection) */ {
 public:
  inline VariableCollection() : VariableCollection(nullptr) {};
  virtual ~VariableCollection();

  VariableCollection(const VariableCollection& from);
  VariableCollection(VariableCollection&& from) noexcept
    : VariableCollection() {
    *this = ::std::move(from);
  }

  inline VariableCollection& operator=(const VariableCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableCollection& operator=(VariableCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableCollection* internal_default_instance() {
    return reinterpret_cast<const VariableCollection*>(
               &_VariableCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VariableCollection& a, VariableCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableCollection* New() const final {
    return CreateMaybeMessage<VariableCollection>(nullptr);
  }

  VariableCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableCollection& from);
  void MergeFrom(const VariableCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.VariableCollection";
  }
  protected:
  explicit VariableCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.Variable variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::Variable* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >*
      mutable_variables();
  private:
  const ::DATA::Variable& _internal_variables(int index) const;
  ::DATA::Variable* _internal_add_variables();
  public:
  const ::DATA::Variable& variables(int index) const;
  ::DATA::Variable* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.VariableCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest_VariableRequest_TierRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest.VariableRequest.TierRequest) */ {
 public:
  inline RetransmissionRequest_VariableRequest_TierRequest() : RetransmissionRequest_VariableRequest_TierRequest(nullptr) {};
  virtual ~RetransmissionRequest_VariableRequest_TierRequest();

  RetransmissionRequest_VariableRequest_TierRequest(const RetransmissionRequest_VariableRequest_TierRequest& from);
  RetransmissionRequest_VariableRequest_TierRequest(RetransmissionRequest_VariableRequest_TierRequest&& from) noexcept
    : RetransmissionRequest_VariableRequest_TierRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest_VariableRequest_TierRequest& operator=(const RetransmissionRequest_VariableRequest_TierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest_VariableRequest_TierRequest& operator=(RetransmissionRequest_VariableRequest_TierRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetransmissionRequest_VariableRequest_TierRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetransmissionRequest_VariableRequest_TierRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest_VariableRequest_TierRequest*>(
               &_RetransmissionRequest_VariableRequest_TierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RetransmissionRequest_VariableRequest_TierRequest& a, RetransmissionRequest_VariableRequest_TierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest_VariableRequest_TierRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest_VariableRequest_TierRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetransmissionRequest_VariableRequest_TierRequest* New() const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest_TierRequest>(nullptr);
  }

  RetransmissionRequest_VariableRequest_TierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest_TierRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetransmissionRequest_VariableRequest_TierRequest& from);
  void MergeFrom(const RetransmissionRequest_VariableRequest_TierRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest_VariableRequest_TierRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest.VariableRequest.TierRequest";
  }
  protected:
  explicit RetransmissionRequest_VariableRequest_TierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkIdsFieldNumber = 2,
    kTierIdFieldNumber = 1,
  };
  // repeated int32 chunk_ids = 2;
  int chunk_ids_size() const;
  private:
  int _internal_chunk_ids_size() const;
  public:
  void clear_chunk_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chunk_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_chunk_ids() const;
  void _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_chunk_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 chunk_ids(int index) const;
  void set_chunk_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_chunk_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      chunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_chunk_ids();

  // int32 tier_id = 1;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest.VariableRequest.TierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > chunk_ids_;
  mutable std::atomic<int> _chunk_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tier_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest_VariableRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest.VariableRequest) */ {
 public:
  inline RetransmissionRequest_VariableRequest() : RetransmissionRequest_VariableRequest(nullptr) {};
  virtual ~RetransmissionRequest_VariableRequest();

  RetransmissionRequest_VariableRequest(const RetransmissionRequest_VariableRequest& from);
  RetransmissionRequest_VariableRequest(RetransmissionRequest_VariableRequest&& from) noexcept
    : RetransmissionRequest_VariableRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest_VariableRequest& operator=(const RetransmissionRequest_VariableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest_VariableRequest& operator=(RetransmissionRequest_VariableRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetransmissionRequest_VariableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetransmissionRequest_VariableRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest_VariableRequest*>(
               &_RetransmissionRequest_VariableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RetransmissionRequest_VariableRequest& a, RetransmissionRequest_VariableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest_VariableRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest_VariableRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetransmissionRequest_VariableRequest* New() const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest>(nullptr);
  }

  RetransmissionRequest_VariableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetransmissionRequest_VariableRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetransmissionRequest_VariableRequest& from);
  void MergeFrom(const RetransmissionRequest_VariableRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest_VariableRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest.VariableRequest";
  }
  protected:
  explicit RetransmissionRequest_VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RetransmissionRequest_VariableRequest_TierRequest TierRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 2,
    kVarNameFieldNumber = 1,
  };
  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >*
      mutable_tiers();
  private:
  const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& _internal_tiers(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* _internal_add_tiers();
  public:
  const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& tiers(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >&
      tiers() const;

  // string var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest.VariableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest > tiers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class RetransmissionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.RetransmissionRequest) */ {
 public:
  inline RetransmissionRequest() : RetransmissionRequest(nullptr) {};
  virtual ~RetransmissionRequest();

  RetransmissionRequest(const RetransmissionRequest& from);
  RetransmissionRequest(RetransmissionRequest&& from) noexcept
    : RetransmissionRequest() {
    *this = ::std::move(from);
  }

  inline RetransmissionRequest& operator=(const RetransmissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetransmissionRequest& operator=(RetransmissionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetransmissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetransmissionRequest* internal_default_instance() {
    return reinterpret_cast<const RetransmissionRequest*>(
               &_RetransmissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RetransmissionRequest& a, RetransmissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RetransmissionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RetransmissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetransmissionRequest* New() const final {
    return CreateMaybeMessage<RetransmissionRequest>(nullptr);
  }

  RetransmissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetransmissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetransmissionRequest& from);
  void MergeFrom(const RetransmissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetransmissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.RetransmissionRequest";
  }
  protected:
  explicit RetransmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RetransmissionRequest_VariableRequest VariableRequest;

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::RetransmissionRequest_VariableRequest* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >*
      mutable_variables();
  private:
  const ::DATA::RetransmissionRequest_VariableRequest& _internal_variables(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest* _internal_add_variables();
  public:
  const ::DATA::RetransmissionRequest_VariableRequest& variables(int index) const;
  ::DATA::RetransmissionRequest_VariableRequest* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.RetransmissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class TierMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.TierMetadata) */ {
 public:
  inline TierMetadata() : TierMetadata(nullptr) {};
  virtual ~TierMetadata();

  TierMetadata(const TierMetadata& from);
  TierMetadata(TierMetadata&& from) noexcept
    : TierMetadata() {
    *this = ::std::move(from);
  }

  inline TierMetadata& operator=(const TierMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline TierMetadata& operator=(TierMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TierMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TierMetadata* internal_default_instance() {
    return reinterpret_cast<const TierMetadata*>(
               &_TierMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TierMetadata& a, TierMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(TierMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TierMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TierMetadata* New() const final {
    return CreateMaybeMessage<TierMetadata>(nullptr);
  }

  TierMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TierMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TierMetadata& from);
  void MergeFrom(const TierMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TierMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.TierMetadata";
  }
  protected:
  explicit TierMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkIdsFieldNumber = 3,
    kTierIdFieldNumber = 1,
    kKFieldNumber = 2,
  };
  // repeated uint32 chunk_ids = 3;
  int chunk_ids_size() const;
  private:
  int _internal_chunk_ids_size() const;
  public:
  void clear_chunk_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunk_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_chunk_ids() const;
  void _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_chunk_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 chunk_ids(int index) const;
  void set_chunk_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_chunk_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      chunk_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_chunk_ids();

  // uint32 tier_id = 1;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 k = 2;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::uint32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.TierMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > chunk_ids_;
  mutable std::atomic<int> _chunk_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class VariableMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.VariableMetadata) */ {
 public:
  inline VariableMetadata() : VariableMetadata(nullptr) {};
  virtual ~VariableMetadata();

  VariableMetadata(const VariableMetadata& from);
  VariableMetadata(VariableMetadata&& from) noexcept
    : VariableMetadata() {
    *this = ::std::move(from);
  }

  inline VariableMetadata& operator=(const VariableMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableMetadata& operator=(VariableMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableMetadata* internal_default_instance() {
    return reinterpret_cast<const VariableMetadata*>(
               &_VariableMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VariableMetadata& a, VariableMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableMetadata* New() const final {
    return CreateMaybeMessage<VariableMetadata>(nullptr);
  }

  VariableMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableMetadata& from);
  void MergeFrom(const VariableMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.VariableMetadata";
  }
  protected:
  explicit VariableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 2,
    kVarNameFieldNumber = 1,
  };
  // repeated .DATA.TierMetadata tiers = 2;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  ::DATA::TierMetadata* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >*
      mutable_tiers();
  private:
  const ::DATA::TierMetadata& _internal_tiers(int index) const;
  ::DATA::TierMetadata* _internal_add_tiers();
  public:
  const ::DATA::TierMetadata& tiers(int index) const;
  ::DATA::TierMetadata* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >&
      tiers() const;

  // string var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // @@protoc_insertion_point(class_scope:DATA.VariableMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata > tiers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {};
  virtual ~Metadata();

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Metadata* New() const final {
    return CreateMaybeMessage<Metadata>(nullptr);
  }

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
  };
  // repeated .DATA.VariableMetadata variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;
  public:
  void clear_variables();
  ::DATA::VariableMetadata* mutable_variables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >*
      mutable_variables();
  private:
  const ::DATA::VariableMetadata& _internal_variables(int index) const;
  ::DATA::VariableMetadata* _internal_add_variables();
  public:
  const ::DATA::VariableMetadata& variables(int index) const;
  ::DATA::VariableMetadata* add_variables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >&
      variables() const;

  // @@protoc_insertion_point(class_scope:DATA.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata > variables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class FragmentsReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.FragmentsReport) */ {
 public:
  inline FragmentsReport() : FragmentsReport(nullptr) {};
  virtual ~FragmentsReport();

  FragmentsReport(const FragmentsReport& from);
  FragmentsReport(FragmentsReport&& from) noexcept
    : FragmentsReport() {
    *this = ::std::move(from);
  }

  inline FragmentsReport& operator=(const FragmentsReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline FragmentsReport& operator=(FragmentsReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FragmentsReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FragmentsReport* internal_default_instance() {
    return reinterpret_cast<const FragmentsReport*>(
               &_FragmentsReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FragmentsReport& a, FragmentsReport& b) {
    a.Swap(&b);
  }
  inline void Swap(FragmentsReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FragmentsReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FragmentsReport* New() const final {
    return CreateMaybeMessage<FragmentsReport>(nullptr);
  }

  FragmentsReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FragmentsReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FragmentsReport& from);
  void MergeFrom(const FragmentsReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FragmentsReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.FragmentsReport";
  }
  protected:
  explicit FragmentsReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 1,
    kTierIdFieldNumber = 2,
    kChunksProcessedFieldNumber = 3,
    kTotalFragmentsFieldNumber = 4,
    kExpectedFragmentsFieldNumber = 5,
    kTimeWindowFieldNumber = 6,
    kLambdaFieldNumber = 7,
  };
  // bytes var_name = 1;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // uint32 tier_id = 2;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 chunks_processed = 3;
  void clear_chunks_processed();
  ::PROTOBUF_NAMESPACE_ID::uint32 chunks_processed() const;
  void set_chunks_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chunks_processed() const;
  void _internal_set_chunks_processed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_fragments = 4;
  void clear_total_fragments();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_fragments() const;
  void set_total_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_fragments() const;
  void _internal_set_total_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expected_fragments = 5;
  void clear_expected_fragments();
  ::PROTOBUF_NAMESPACE_ID::uint32 expected_fragments() const;
  void set_expected_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expected_fragments() const;
  void _internal_set_expected_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 time_window = 6;
  void clear_time_window();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_window() const;
  void set_time_window(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_window() const;
  void _internal_set_time_window(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double lambda = 7;
  void clear_lambda();
  double lambda() const;
  void set_lambda(double value);
  private:
  double _internal_lambda() const;
  void _internal_set_lambda(double value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.FragmentsReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chunks_processed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_fragments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expected_fragments_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_window_;
  double lambda_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class TierCompleteAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.TierCompleteAck) */ {
 public:
  inline TierCompleteAck() : TierCompleteAck(nullptr) {};
  virtual ~TierCompleteAck();

  TierCompleteAck(const TierCompleteAck& from);
  TierCompleteAck(TierCompleteAck&& from) noexcept
    : TierCompleteAck() {
    *this = ::std::move(from);
  }

  inline TierCompleteAck& operator=(const TierCompleteAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TierCompleteAck& operator=(TierCompleteAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TierCompleteAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TierCompleteAck* internal_default_instance() {
    return reinterpret_cast<const TierCompleteAck*>(
               &_TierCompleteAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TierCompleteAck& a, TierCompleteAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TierCompleteAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TierCompleteAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TierCompleteAck* New() const final {
    return CreateMaybeMessage<TierCompleteAck>(nullptr);
  }

  TierCompleteAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TierCompleteAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TierCompleteAck& from);
  void MergeFrom(const TierCompleteAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TierCompleteAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.TierCompleteAck";
  }
  protected:
  explicit TierCompleteAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTierIdFieldNumber = 1,
  };
  // uint32 tier_id = 1;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.TierCompleteAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DATA.ControlMessage) */ {
 public:
  inline ControlMessage() : ControlMessage(nullptr) {};
  virtual ~ControlMessage();

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlMessage* New() const final {
    return CreateMaybeMessage<ControlMessage>(nullptr);
  }

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlMessage& from);
  void MergeFrom(const ControlMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DATA.ControlMessage";
  }
  protected:
  explicit ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fragment_2eproto);
    return ::descriptor_table_fragment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControlMessage_ControlType ControlType;
  static constexpr ControlType UNKNOWN =
    ControlMessage_ControlType_UNKNOWN;
  static constexpr ControlType TIER_END =
    ControlMessage_ControlType_TIER_END;
  static constexpr ControlType TIER_COMPLETE =
    ControlMessage_ControlType_TIER_COMPLETE;
  static constexpr ControlType ALL_COMPLETE =
    ControlMessage_ControlType_ALL_COMPLETE;
  static inline bool ControlType_IsValid(int value) {
    return ControlMessage_ControlType_IsValid(value);
  }
  static constexpr ControlType ControlType_MIN =
    ControlMessage_ControlType_ControlType_MIN;
  static constexpr ControlType ControlType_MAX =
    ControlMessage_ControlType_ControlType_MAX;
  static constexpr int ControlType_ARRAYSIZE =
    ControlMessage_ControlType_ControlType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControlType_descriptor() {
    return ControlMessage_ControlType_descriptor();
  }
  template<typename T>
  static inline const std::string& ControlType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControlType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControlType_Name.");
    return ControlMessage_ControlType_Name(enum_t_value);
  }
  static inline bool ControlType_Parse(const std::string& name,
      ControlType* value) {
    return ControlMessage_ControlType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kTypeFieldNumber = 1,
    kTierIdFieldNumber = 3,
  };
  // string var_name = 2;
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_var_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_var_name(
      std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // .DATA.ControlMessage.ControlType type = 1;
  void clear_type();
  ::DATA::ControlMessage_ControlType type() const;
  void set_type(::DATA::ControlMessage_ControlType value);
  private:
  ::DATA::ControlMessage_ControlType _internal_type() const;
  void _internal_set_type(::DATA::ControlMessage_ControlType value);
  public:

  // uint32 tier_id = 3;
  void clear_tier_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id() const;
  void set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tier_id() const;
  void _internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:DATA.ControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tier_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_fragment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryTable

// int32 rows = 1;
inline void QueryTable::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryTable::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryTable::rows() const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.rows)
  return _internal_rows();
}
inline void QueryTable::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void QueryTable::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.rows)
}

// int32 cols = 2;
inline void QueryTable::clear_cols() {
  cols_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryTable::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryTable::cols() const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.cols)
  return _internal_cols();
}
inline void QueryTable::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cols_ = value;
}
inline void QueryTable::set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.cols)
}

// repeated uint64 content = 3;
inline int QueryTable::_internal_content_size() const {
  return content_.size();
}
inline int QueryTable::content_size() const {
  return _internal_content_size();
}
inline void QueryTable::clear_content() {
  content_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryTable::_internal_content(int index) const {
  return content_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryTable::content(int index) const {
  // @@protoc_insertion_point(field_get:DATA.QueryTable.content)
  return _internal_content(index);
}
inline void QueryTable::set_content(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  content_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.QueryTable.content)
}
inline void QueryTable::_internal_add_content(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  content_.Add(value);
}
inline void QueryTable::add_content(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_content(value);
  // @@protoc_insertion_point(field_add:DATA.QueryTable.content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryTable::_internal_content() const {
  return content_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
QueryTable::content() const {
  // @@protoc_insertion_point(field_list:DATA.QueryTable.content)
  return _internal_content();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryTable::_internal_mutable_content() {
  return &content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
QueryTable::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:DATA.QueryTable.content)
  return _internal_mutable_content();
}

// -------------------------------------------------------------------

// SquaredErrorsTable

// int32 rows = 1;
inline void SquaredErrorsTable::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SquaredErrorsTable::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SquaredErrorsTable::rows() const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.rows)
  return _internal_rows();
}
inline void SquaredErrorsTable::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void SquaredErrorsTable::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.rows)
}

// int32 cols = 2;
inline void SquaredErrorsTable::clear_cols() {
  cols_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SquaredErrorsTable::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SquaredErrorsTable::cols() const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.cols)
  return _internal_cols();
}
inline void SquaredErrorsTable::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cols_ = value;
}
inline void SquaredErrorsTable::set_cols(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.cols)
}

// repeated double content = 3;
inline int SquaredErrorsTable::_internal_content_size() const {
  return content_.size();
}
inline int SquaredErrorsTable::content_size() const {
  return _internal_content_size();
}
inline void SquaredErrorsTable::clear_content() {
  content_.Clear();
}
inline double SquaredErrorsTable::_internal_content(int index) const {
  return content_.Get(index);
}
inline double SquaredErrorsTable::content(int index) const {
  // @@protoc_insertion_point(field_get:DATA.SquaredErrorsTable.content)
  return _internal_content(index);
}
inline void SquaredErrorsTable::set_content(int index, double value) {
  content_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.SquaredErrorsTable.content)
}
inline void SquaredErrorsTable::_internal_add_content(double value) {
  content_.Add(value);
}
inline void SquaredErrorsTable::add_content(double value) {
  _internal_add_content(value);
  // @@protoc_insertion_point(field_add:DATA.SquaredErrorsTable.content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SquaredErrorsTable::_internal_content() const {
  return content_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SquaredErrorsTable::content() const {
  // @@protoc_insertion_point(field_list:DATA.SquaredErrorsTable.content)
  return _internal_content();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SquaredErrorsTable::_internal_mutable_content() {
  return &content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SquaredErrorsTable::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:DATA.SquaredErrorsTable.content)
  return _internal_mutable_content();
}

// -------------------------------------------------------------------

// Variable

// string name = 1;
inline void Variable::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.name)
  return _internal_name();
}
inline void Variable::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.name)
}
inline std::string* Variable::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DATA.Variable.name)
  return _internal_mutable_name();
}
inline const std::string& Variable::_internal_name() const {
  return name_.Get();
}
inline void Variable::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Variable::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Variable.name)
}
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Variable.name)
}
inline void Variable::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Variable.name)
}
inline std::string* Variable::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:DATA.Variable.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Variable::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.name)
}
inline std::string* Variable::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Variable.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Variable::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.name)
}

// repeated uint32 dimensions = 2;
inline int Variable::_internal_dimensions_size() const {
  return dimensions_.size();
}
inline int Variable::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Variable::clear_dimensions() {
  dimensions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::_internal_dimensions(int index) const {
  return dimensions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.dimensions)
  return _internal_dimensions(index);
}
inline void Variable::set_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.dimensions)
}
inline void Variable::_internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dimensions_.Add(value);
}
inline void Variable::add_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dimensions(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Variable::_internal_dimensions() const {
  return dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Variable::dimensions() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Variable::_internal_mutable_dimensions() {
  return &dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Variable::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.dimensions)
  return _internal_mutable_dimensions();
}

// string type = 3;
inline void Variable::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Variable::type() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.type)
  return _internal_type();
}
inline void Variable::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.type)
}
inline std::string* Variable::mutable_type() {
  // @@protoc_insertion_point(field_mutable:DATA.Variable.type)
  return _internal_mutable_type();
}
inline const std::string& Variable::_internal_type() const {
  return type_.Get();
}
inline void Variable::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Variable::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Variable.type)
}
inline void Variable::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Variable.type)
}
inline void Variable::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Variable.type)
}
inline std::string* Variable::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Variable::release_type() {
  // @@protoc_insertion_point(field_release:DATA.Variable.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Variable::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.type)
}
inline std::string* Variable::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Variable.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Variable::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.type)
}

// uint32 levels = 4;
inline void Variable::clear_levels() {
  levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::_internal_levels() const {
  return levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::levels() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.levels)
  return _internal_levels();
}
inline void Variable::_internal_set_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  levels_ = value;
}
inline void Variable::set_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levels(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.levels)
}

// repeated double level_error_bounds = 5;
inline int Variable::_internal_level_error_bounds_size() const {
  return level_error_bounds_.size();
}
inline int Variable::level_error_bounds_size() const {
  return _internal_level_error_bounds_size();
}
inline void Variable::clear_level_error_bounds() {
  level_error_bounds_.Clear();
}
inline double Variable::_internal_level_error_bounds(int index) const {
  return level_error_bounds_.Get(index);
}
inline double Variable::level_error_bounds(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.level_error_bounds)
  return _internal_level_error_bounds(index);
}
inline void Variable::set_level_error_bounds(int index, double value) {
  level_error_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.level_error_bounds)
}
inline void Variable::_internal_add_level_error_bounds(double value) {
  level_error_bounds_.Add(value);
}
inline void Variable::add_level_error_bounds(double value) {
  _internal_add_level_error_bounds(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.level_error_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variable::_internal_level_error_bounds() const {
  return level_error_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Variable::level_error_bounds() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.level_error_bounds)
  return _internal_level_error_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variable::_internal_mutable_level_error_bounds() {
  return &level_error_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Variable::mutable_level_error_bounds() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.level_error_bounds)
  return _internal_mutable_level_error_bounds();
}

// repeated uint32 stopping_indices = 6;
inline int Variable::_internal_stopping_indices_size() const {
  return stopping_indices_.size();
}
inline int Variable::stopping_indices_size() const {
  return _internal_stopping_indices_size();
}
inline void Variable::clear_stopping_indices() {
  stopping_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::_internal_stopping_indices(int index) const {
  return stopping_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::stopping_indices(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Variable.stopping_indices)
  return _internal_stopping_indices(index);
}
inline void Variable::set_stopping_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stopping_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Variable.stopping_indices)
}
inline void Variable::_internal_add_stopping_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  stopping_indices_.Add(value);
}
inline void Variable::add_stopping_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_stopping_indices(value);
  // @@protoc_insertion_point(field_add:DATA.Variable.stopping_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Variable::_internal_stopping_indices() const {
  return stopping_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Variable::stopping_indices() const {
  // @@protoc_insertion_point(field_list:DATA.Variable.stopping_indices)
  return _internal_stopping_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Variable::_internal_mutable_stopping_indices() {
  return &stopping_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Variable::mutable_stopping_indices() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Variable.stopping_indices)
  return _internal_mutable_stopping_indices();
}

// .DATA.QueryTable table_content = 7;
inline bool Variable::_internal_has_table_content() const {
  return this != internal_default_instance() && table_content_ != nullptr;
}
inline bool Variable::has_table_content() const {
  return _internal_has_table_content();
}
inline void Variable::clear_table_content() {
  if (GetArena() == nullptr && table_content_ != nullptr) {
    delete table_content_;
  }
  table_content_ = nullptr;
}
inline const ::DATA::QueryTable& Variable::_internal_table_content() const {
  const ::DATA::QueryTable* p = table_content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DATA::QueryTable*>(
      &::DATA::_QueryTable_default_instance_);
}
inline const ::DATA::QueryTable& Variable::table_content() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.table_content)
  return _internal_table_content();
}
inline void Variable::unsafe_arena_set_allocated_table_content(
    ::DATA::QueryTable* table_content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_content_);
  }
  table_content_ = table_content;
  if (table_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.table_content)
}
inline ::DATA::QueryTable* Variable::release_table_content() {
  auto temp = unsafe_arena_release_table_content();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DATA::QueryTable* Variable::unsafe_arena_release_table_content() {
  // @@protoc_insertion_point(field_release:DATA.Variable.table_content)
  
  ::DATA::QueryTable* temp = table_content_;
  table_content_ = nullptr;
  return temp;
}
inline ::DATA::QueryTable* Variable::_internal_mutable_table_content() {
  
  if (table_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::QueryTable>(GetArena());
    table_content_ = p;
  }
  return table_content_;
}
inline ::DATA::QueryTable* Variable::mutable_table_content() {
  // @@protoc_insertion_point(field_mutable:DATA.Variable.table_content)
  return _internal_mutable_table_content();
}
inline void Variable::set_allocated_table_content(::DATA::QueryTable* table_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete table_content_;
  }
  if (table_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(table_content);
    if (message_arena != submessage_arena) {
      table_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_content, submessage_arena);
    }
    
  } else {
    
  }
  table_content_ = table_content;
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.table_content)
}

// .DATA.SquaredErrorsTable squared_errors = 8;
inline bool Variable::_internal_has_squared_errors() const {
  return this != internal_default_instance() && squared_errors_ != nullptr;
}
inline bool Variable::has_squared_errors() const {
  return _internal_has_squared_errors();
}
inline void Variable::clear_squared_errors() {
  if (GetArena() == nullptr && squared_errors_ != nullptr) {
    delete squared_errors_;
  }
  squared_errors_ = nullptr;
}
inline const ::DATA::SquaredErrorsTable& Variable::_internal_squared_errors() const {
  const ::DATA::SquaredErrorsTable* p = squared_errors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DATA::SquaredErrorsTable*>(
      &::DATA::_SquaredErrorsTable_default_instance_);
}
inline const ::DATA::SquaredErrorsTable& Variable::squared_errors() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.squared_errors)
  return _internal_squared_errors();
}
inline void Variable::unsafe_arena_set_allocated_squared_errors(
    ::DATA::SquaredErrorsTable* squared_errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(squared_errors_);
  }
  squared_errors_ = squared_errors;
  if (squared_errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Variable.squared_errors)
}
inline ::DATA::SquaredErrorsTable* Variable::release_squared_errors() {
  auto temp = unsafe_arena_release_squared_errors();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DATA::SquaredErrorsTable* Variable::unsafe_arena_release_squared_errors() {
  // @@protoc_insertion_point(field_release:DATA.Variable.squared_errors)
  
  ::DATA::SquaredErrorsTable* temp = squared_errors_;
  squared_errors_ = nullptr;
  return temp;
}
inline ::DATA::SquaredErrorsTable* Variable::_internal_mutable_squared_errors() {
  
  if (squared_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::SquaredErrorsTable>(GetArena());
    squared_errors_ = p;
  }
  return squared_errors_;
}
inline ::DATA::SquaredErrorsTable* Variable::mutable_squared_errors() {
  // @@protoc_insertion_point(field_mutable:DATA.Variable.squared_errors)
  return _internal_mutable_squared_errors();
}
inline void Variable::set_allocated_squared_errors(::DATA::SquaredErrorsTable* squared_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete squared_errors_;
  }
  if (squared_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(squared_errors);
    if (message_arena != submessage_arena) {
      squared_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, squared_errors, submessage_arena);
    }
    
  } else {
    
  }
  squared_errors_ = squared_errors;
  // @@protoc_insertion_point(field_set_allocated:DATA.Variable.squared_errors)
}

// uint32 tiers = 9;
inline void Variable::clear_tiers() {
  tiers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::_internal_tiers() const {
  return tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Variable::tiers() const {
  // @@protoc_insertion_point(field_get:DATA.Variable.tiers)
  return _internal_tiers();
}
inline void Variable::_internal_set_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tiers_ = value;
}
inline void Variable::set_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tiers(value);
  // @@protoc_insertion_point(field_set:DATA.Variable.tiers)
}

// -------------------------------------------------------------------

// Tier

// int32 id = 1;
inline void Tier::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::id() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.id)
  return _internal_id();
}
inline void Tier::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Tier::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.id)
}

// int32 k = 2;
inline void Tier::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::k() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.k)
  return _internal_k();
}
inline void Tier::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void Tier::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.k)
}

// int32 m = 3;
inline void Tier::clear_m() {
  m_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::m() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.m)
  return _internal_m();
}
inline void Tier::_internal_set_m(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_ = value;
}
inline void Tier::set_m(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.m)
}

// int32 w = 4;
inline void Tier::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::w() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.w)
  return _internal_w();
}
inline void Tier::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void Tier::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.w)
}

// int32 hd = 5;
inline void Tier::clear_hd() {
  hd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::_internal_hd() const {
  return hd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tier::hd() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.hd)
  return _internal_hd();
}
inline void Tier::_internal_set_hd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hd_ = value;
}
inline void Tier::set_hd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hd(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.hd)
}

// string ec_backend_name = 6;
inline void Tier::clear_ec_backend_name() {
  ec_backend_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tier::ec_backend_name() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.ec_backend_name)
  return _internal_ec_backend_name();
}
inline void Tier::set_ec_backend_name(const std::string& value) {
  _internal_set_ec_backend_name(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.ec_backend_name)
}
inline std::string* Tier::mutable_ec_backend_name() {
  // @@protoc_insertion_point(field_mutable:DATA.Tier.ec_backend_name)
  return _internal_mutable_ec_backend_name();
}
inline const std::string& Tier::_internal_ec_backend_name() const {
  return ec_backend_name_.Get();
}
inline void Tier::_internal_set_ec_backend_name(const std::string& value) {
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tier::set_ec_backend_name(std::string&& value) {
  
  ec_backend_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Tier.ec_backend_name)
}
inline void Tier::set_ec_backend_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Tier.ec_backend_name)
}
inline void Tier::set_ec_backend_name(const char* value,
    size_t size) {
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Tier.ec_backend_name)
}
inline std::string* Tier::_internal_mutable_ec_backend_name() {
  
  return ec_backend_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tier::release_ec_backend_name() {
  // @@protoc_insertion_point(field_release:DATA.Tier.ec_backend_name)
  return ec_backend_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tier::set_allocated_ec_backend_name(std::string* ec_backend_name) {
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  ec_backend_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ec_backend_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Tier.ec_backend_name)
}
inline std::string* Tier::unsafe_arena_release_ec_backend_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Tier.ec_backend_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ec_backend_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tier::unsafe_arena_set_allocated_ec_backend_name(
    std::string* ec_backend_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  ec_backend_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ec_backend_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Tier.ec_backend_name)
}

// uint64 encoded_fragment_length = 7;
inline void Tier::clear_encoded_fragment_length() {
  encoded_fragment_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tier::_internal_encoded_fragment_length() const {
  return encoded_fragment_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tier::encoded_fragment_length() const {
  // @@protoc_insertion_point(field_get:DATA.Tier.encoded_fragment_length)
  return _internal_encoded_fragment_length();
}
inline void Tier::_internal_set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  encoded_fragment_length_ = value;
}
inline void Tier::set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_encoded_fragment_length(value);
  // @@protoc_insertion_point(field_set:DATA.Tier.encoded_fragment_length)
}

// -------------------------------------------------------------------

// Fragment

// int32 k = 1;
inline void Fragment::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::k() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.k)
  return _internal_k();
}
inline void Fragment::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void Fragment::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.k)
}

// int32 m = 2;
inline void Fragment::clear_m() {
  m_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::m() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.m)
  return _internal_m();
}
inline void Fragment::_internal_set_m(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_ = value;
}
inline void Fragment::set_m(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.m)
}

// int32 w = 3;
inline void Fragment::clear_w() {
  w_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::w() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.w)
  return _internal_w();
}
inline void Fragment::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  w_ = value;
}
inline void Fragment::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.w)
}

// int32 hd = 4;
inline void Fragment::clear_hd() {
  hd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::_internal_hd() const {
  return hd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Fragment::hd() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.hd)
  return _internal_hd();
}
inline void Fragment::_internal_set_hd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hd_ = value;
}
inline void Fragment::set_hd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hd(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.hd)
}

// bytes ec_backend_name = 5;
inline void Fragment::clear_ec_backend_name() {
  ec_backend_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Fragment::ec_backend_name() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.ec_backend_name)
  return _internal_ec_backend_name();
}
inline void Fragment::set_ec_backend_name(const std::string& value) {
  _internal_set_ec_backend_name(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.ec_backend_name)
}
inline std::string* Fragment::mutable_ec_backend_name() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.ec_backend_name)
  return _internal_mutable_ec_backend_name();
}
inline const std::string& Fragment::_internal_ec_backend_name() const {
  return ec_backend_name_.Get();
}
inline void Fragment::_internal_set_ec_backend_name(const std::string& value) {
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fragment::set_ec_backend_name(std::string&& value) {
  
  ec_backend_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Fragment.ec_backend_name)
}
inline void Fragment::set_ec_backend_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.ec_backend_name)
}
inline void Fragment::set_ec_backend_name(const void* value,
    size_t size) {
  
  ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.ec_backend_name)
}
inline std::string* Fragment::_internal_mutable_ec_backend_name() {
  
  return ec_backend_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fragment::release_ec_backend_name() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.ec_backend_name)
  return ec_backend_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fragment::set_allocated_ec_backend_name(std::string* ec_backend_name) {
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  ec_backend_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ec_backend_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.ec_backend_name)
}
inline std::string* Fragment::unsafe_arena_release_ec_backend_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Fragment.ec_backend_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ec_backend_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Fragment::unsafe_arena_set_allocated_ec_backend_name(
    std::string* ec_backend_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ec_backend_name != nullptr) {
    
  } else {
    
  }
  ec_backend_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ec_backend_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.ec_backend_name)
}

// uint32 encoded_fragment_length = 6;
inline void Fragment::clear_encoded_fragment_length() {
  encoded_fragment_length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_encoded_fragment_length() const {
  return encoded_fragment_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::encoded_fragment_length() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.encoded_fragment_length)
  return _internal_encoded_fragment_length();
}
inline void Fragment::_internal_set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  encoded_fragment_length_ = value;
}
inline void Fragment::set_encoded_fragment_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_encoded_fragment_length(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.encoded_fragment_length)
}

// uint32 idx = 7;
inline void Fragment::clear_idx() {
  idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::idx() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.idx)
  return _internal_idx();
}
inline void Fragment::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  idx_ = value;
}
inline void Fragment::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.idx)
}

// uint32 size = 8;
inline void Fragment::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::size() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.size)
  return _internal_size();
}
inline void Fragment::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Fragment::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.size)
}

// uint64 orig_data_size = 9;
inline void Fragment::clear_orig_data_size() {
  orig_data_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::_internal_orig_data_size() const {
  return orig_data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::orig_data_size() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.orig_data_size)
  return _internal_orig_data_size();
}
inline void Fragment::_internal_set_orig_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  orig_data_size_ = value;
}
inline void Fragment::set_orig_data_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orig_data_size(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.orig_data_size)
}

// uint32 chksum_mismatch = 10;
inline void Fragment::clear_chksum_mismatch() {
  chksum_mismatch_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_chksum_mismatch() const {
  return chksum_mismatch_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::chksum_mismatch() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.chksum_mismatch)
  return _internal_chksum_mismatch();
}
inline void Fragment::_internal_set_chksum_mismatch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chksum_mismatch_ = value;
}
inline void Fragment::set_chksum_mismatch(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chksum_mismatch(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.chksum_mismatch)
}

// uint32 backend_id = 11;
inline void Fragment::clear_backend_id() {
  backend_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_backend_id() const {
  return backend_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::backend_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.backend_id)
  return _internal_backend_id();
}
inline void Fragment::_internal_set_backend_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  backend_id_ = value;
}
inline void Fragment::set_backend_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_backend_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.backend_id)
}

// bytes frag = 12;
inline void Fragment::clear_frag() {
  frag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Fragment::frag() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.frag)
  return _internal_frag();
}
inline void Fragment::set_frag(const std::string& value) {
  _internal_set_frag(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.frag)
}
inline std::string* Fragment::mutable_frag() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.frag)
  return _internal_mutable_frag();
}
inline const std::string& Fragment::_internal_frag() const {
  return frag_.Get();
}
inline void Fragment::_internal_set_frag(const std::string& value) {
  
  frag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fragment::set_frag(std::string&& value) {
  
  frag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Fragment.frag)
}
inline void Fragment::set_frag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.frag)
}
inline void Fragment::set_frag(const void* value,
    size_t size) {
  
  frag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.frag)
}
inline std::string* Fragment::_internal_mutable_frag() {
  
  return frag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fragment::release_frag() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.frag)
  return frag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fragment::set_allocated_frag(std::string* frag) {
  if (frag != nullptr) {
    
  } else {
    
  }
  frag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.frag)
}
inline std::string* Fragment::unsafe_arena_release_frag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Fragment.frag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Fragment::unsafe_arena_set_allocated_frag(
    std::string* frag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frag != nullptr) {
    
  } else {
    
  }
  frag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.frag)
}

// bool is_data = 13;
inline void Fragment::clear_is_data() {
  is_data_ = false;
}
inline bool Fragment::_internal_is_data() const {
  return is_data_;
}
inline bool Fragment::is_data() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.is_data)
  return _internal_is_data();
}
inline void Fragment::_internal_set_is_data(bool value) {
  
  is_data_ = value;
}
inline void Fragment::set_is_data(bool value) {
  _internal_set_is_data(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.is_data)
}

// uint32 tier_id = 14;
inline void Fragment::clear_tier_id() {
  tier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.tier_id)
  return _internal_tier_id();
}
inline void Fragment::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tier_id_ = value;
}
inline void Fragment::set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.tier_id)
}

// uint32 chunk_id = 15;
inline void Fragment::clear_chunk_id() {
  chunk_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_chunk_id() const {
  return chunk_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::chunk_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.chunk_id)
  return _internal_chunk_id();
}
inline void Fragment::_internal_set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunk_id_ = value;
}
inline void Fragment::set_chunk_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunk_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.chunk_id)
}

// uint32 fragment_id = 16;
inline void Fragment::clear_fragment_id() {
  fragment_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_fragment_id() const {
  return fragment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::fragment_id() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.fragment_id)
  return _internal_fragment_id();
}
inline void Fragment::_internal_set_fragment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fragment_id_ = value;
}
inline void Fragment::set_fragment_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fragment_id(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.fragment_id)
}

// string var_name = 17;
inline void Fragment::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Fragment::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_name)
  return _internal_var_name();
}
inline void Fragment::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_name)
}
inline std::string* Fragment::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& Fragment::_internal_var_name() const {
  return var_name_.Get();
}
inline void Fragment::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fragment::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Fragment.var_name)
}
inline void Fragment::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.var_name)
}
inline void Fragment::set_var_name(const char* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.var_name)
}
inline std::string* Fragment::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fragment::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fragment::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_name)
}
inline std::string* Fragment::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Fragment.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Fragment::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_name)
}

// repeated uint32 var_dimensions = 18;
inline int Fragment::_internal_var_dimensions_size() const {
  return var_dimensions_.size();
}
inline int Fragment::var_dimensions_size() const {
  return _internal_var_dimensions_size();
}
inline void Fragment::clear_var_dimensions() {
  var_dimensions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_var_dimensions(int index) const {
  return var_dimensions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::var_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_dimensions)
  return _internal_var_dimensions(index);
}
inline void Fragment::set_var_dimensions(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  var_dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_dimensions)
}
inline void Fragment::_internal_add_var_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  var_dimensions_.Add(value);
}
inline void Fragment::add_var_dimensions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_var_dimensions(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fragment::_internal_var_dimensions() const {
  return var_dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fragment::var_dimensions() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_dimensions)
  return _internal_var_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fragment::_internal_mutable_var_dimensions() {
  return &var_dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fragment::mutable_var_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_dimensions)
  return _internal_mutable_var_dimensions();
}

// string var_type = 19;
inline void Fragment::clear_var_type() {
  var_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Fragment::var_type() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_type)
  return _internal_var_type();
}
inline void Fragment::set_var_type(const std::string& value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_type)
}
inline std::string* Fragment::mutable_var_type() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_type)
  return _internal_mutable_var_type();
}
inline const std::string& Fragment::_internal_var_type() const {
  return var_type_.Get();
}
inline void Fragment::_internal_set_var_type(const std::string& value) {
  
  var_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Fragment::set_var_type(std::string&& value) {
  
  var_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.Fragment.var_type)
}
inline void Fragment::set_var_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.var_type)
}
inline void Fragment::set_var_type(const char* value,
    size_t size) {
  
  var_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.var_type)
}
inline std::string* Fragment::_internal_mutable_var_type() {
  
  return var_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Fragment::release_var_type() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_type)
  return var_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Fragment::set_allocated_var_type(std::string* var_type) {
  if (var_type != nullptr) {
    
  } else {
    
  }
  var_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_type)
}
inline std::string* Fragment::unsafe_arena_release_var_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.Fragment.var_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Fragment::unsafe_arena_set_allocated_var_type(
    std::string* var_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_type != nullptr) {
    
  } else {
    
  }
  var_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_type)
}

// uint32 var_levels = 20;
inline void Fragment::clear_var_levels() {
  var_levels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_var_levels() const {
  return var_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::var_levels() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_levels)
  return _internal_var_levels();
}
inline void Fragment::_internal_set_var_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  var_levels_ = value;
}
inline void Fragment::set_var_levels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_var_levels(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_levels)
}

// repeated double var_level_error_bounds = 21;
inline int Fragment::_internal_var_level_error_bounds_size() const {
  return var_level_error_bounds_.size();
}
inline int Fragment::var_level_error_bounds_size() const {
  return _internal_var_level_error_bounds_size();
}
inline void Fragment::clear_var_level_error_bounds() {
  var_level_error_bounds_.Clear();
}
inline double Fragment::_internal_var_level_error_bounds(int index) const {
  return var_level_error_bounds_.Get(index);
}
inline double Fragment::var_level_error_bounds(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_level_error_bounds)
  return _internal_var_level_error_bounds(index);
}
inline void Fragment::set_var_level_error_bounds(int index, double value) {
  var_level_error_bounds_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_level_error_bounds)
}
inline void Fragment::_internal_add_var_level_error_bounds(double value) {
  var_level_error_bounds_.Add(value);
}
inline void Fragment::add_var_level_error_bounds(double value) {
  _internal_add_var_level_error_bounds(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_level_error_bounds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Fragment::_internal_var_level_error_bounds() const {
  return var_level_error_bounds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Fragment::var_level_error_bounds() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_level_error_bounds)
  return _internal_var_level_error_bounds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Fragment::_internal_mutable_var_level_error_bounds() {
  return &var_level_error_bounds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Fragment::mutable_var_level_error_bounds() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_level_error_bounds)
  return _internal_mutable_var_level_error_bounds();
}

// repeated bytes var_stopping_indices = 22;
inline int Fragment::_internal_var_stopping_indices_size() const {
  return var_stopping_indices_.size();
}
inline int Fragment::var_stopping_indices_size() const {
  return _internal_var_stopping_indices_size();
}
inline void Fragment::clear_var_stopping_indices() {
  var_stopping_indices_.Clear();
}
inline std::string* Fragment::add_var_stopping_indices() {
  // @@protoc_insertion_point(field_add_mutable:DATA.Fragment.var_stopping_indices)
  return _internal_add_var_stopping_indices();
}
inline const std::string& Fragment::_internal_var_stopping_indices(int index) const {
  return var_stopping_indices_.Get(index);
}
inline const std::string& Fragment::var_stopping_indices(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_stopping_indices)
  return _internal_var_stopping_indices(index);
}
inline std::string* Fragment::mutable_var_stopping_indices(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_stopping_indices)
  return var_stopping_indices_.Mutable(index);
}
inline void Fragment::set_var_stopping_indices(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_stopping_indices)
  var_stopping_indices_.Mutable(index)->assign(value);
}
inline void Fragment::set_var_stopping_indices(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_stopping_indices)
  var_stopping_indices_.Mutable(index)->assign(std::move(value));
}
inline void Fragment::set_var_stopping_indices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_stopping_indices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::set_var_stopping_indices(int index, const void* value, size_t size) {
  var_stopping_indices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DATA.Fragment.var_stopping_indices)
}
inline std::string* Fragment::_internal_add_var_stopping_indices() {
  return var_stopping_indices_.Add();
}
inline void Fragment::add_var_stopping_indices(const std::string& value) {
  var_stopping_indices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(std::string&& value) {
  var_stopping_indices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_stopping_indices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DATA.Fragment.var_stopping_indices)
}
inline void Fragment::add_var_stopping_indices(const void* value, size_t size) {
  var_stopping_indices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DATA.Fragment.var_stopping_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Fragment::var_stopping_indices() const {
  // @@protoc_insertion_point(field_list:DATA.Fragment.var_stopping_indices)
  return var_stopping_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Fragment::mutable_var_stopping_indices() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Fragment.var_stopping_indices)
  return &var_stopping_indices_;
}

// .DATA.QueryTable var_table_content = 23;
inline bool Fragment::_internal_has_var_table_content() const {
  return this != internal_default_instance() && var_table_content_ != nullptr;
}
inline bool Fragment::has_var_table_content() const {
  return _internal_has_var_table_content();
}
inline void Fragment::clear_var_table_content() {
  if (GetArena() == nullptr && var_table_content_ != nullptr) {
    delete var_table_content_;
  }
  var_table_content_ = nullptr;
}
inline const ::DATA::QueryTable& Fragment::_internal_var_table_content() const {
  const ::DATA::QueryTable* p = var_table_content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DATA::QueryTable*>(
      &::DATA::_QueryTable_default_instance_);
}
inline const ::DATA::QueryTable& Fragment::var_table_content() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_table_content)
  return _internal_var_table_content();
}
inline void Fragment::unsafe_arena_set_allocated_var_table_content(
    ::DATA::QueryTable* var_table_content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_table_content_);
  }
  var_table_content_ = var_table_content;
  if (var_table_content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_table_content)
}
inline ::DATA::QueryTable* Fragment::release_var_table_content() {
  auto temp = unsafe_arena_release_var_table_content();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DATA::QueryTable* Fragment::unsafe_arena_release_var_table_content() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_table_content)
  
  ::DATA::QueryTable* temp = var_table_content_;
  var_table_content_ = nullptr;
  return temp;
}
inline ::DATA::QueryTable* Fragment::_internal_mutable_var_table_content() {
  
  if (var_table_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::QueryTable>(GetArena());
    var_table_content_ = p;
  }
  return var_table_content_;
}
inline ::DATA::QueryTable* Fragment::mutable_var_table_content() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_table_content)
  return _internal_mutable_var_table_content();
}
inline void Fragment::set_allocated_var_table_content(::DATA::QueryTable* var_table_content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete var_table_content_;
  }
  if (var_table_content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_table_content);
    if (message_arena != submessage_arena) {
      var_table_content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_table_content, submessage_arena);
    }
    
  } else {
    
  }
  var_table_content_ = var_table_content;
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_table_content)
}

// .DATA.SquaredErrorsTable var_squared_errors = 24;
inline bool Fragment::_internal_has_var_squared_errors() const {
  return this != internal_default_instance() && var_squared_errors_ != nullptr;
}
inline bool Fragment::has_var_squared_errors() const {
  return _internal_has_var_squared_errors();
}
inline void Fragment::clear_var_squared_errors() {
  if (GetArena() == nullptr && var_squared_errors_ != nullptr) {
    delete var_squared_errors_;
  }
  var_squared_errors_ = nullptr;
}
inline const ::DATA::SquaredErrorsTable& Fragment::_internal_var_squared_errors() const {
  const ::DATA::SquaredErrorsTable* p = var_squared_errors_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DATA::SquaredErrorsTable*>(
      &::DATA::_SquaredErrorsTable_default_instance_);
}
inline const ::DATA::SquaredErrorsTable& Fragment::var_squared_errors() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_squared_errors)
  return _internal_var_squared_errors();
}
inline void Fragment::unsafe_arena_set_allocated_var_squared_errors(
    ::DATA::SquaredErrorsTable* var_squared_errors) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_squared_errors_);
  }
  var_squared_errors_ = var_squared_errors;
  if (var_squared_errors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.Fragment.var_squared_errors)
}
inline ::DATA::SquaredErrorsTable* Fragment::release_var_squared_errors() {
  auto temp = unsafe_arena_release_var_squared_errors();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DATA::SquaredErrorsTable* Fragment::unsafe_arena_release_var_squared_errors() {
  // @@protoc_insertion_point(field_release:DATA.Fragment.var_squared_errors)
  
  ::DATA::SquaredErrorsTable* temp = var_squared_errors_;
  var_squared_errors_ = nullptr;
  return temp;
}
inline ::DATA::SquaredErrorsTable* Fragment::_internal_mutable_var_squared_errors() {
  
  if (var_squared_errors_ == nullptr) {
    auto* p = CreateMaybeMessage<::DATA::SquaredErrorsTable>(GetArena());
    var_squared_errors_ = p;
  }
  return var_squared_errors_;
}
inline ::DATA::SquaredErrorsTable* Fragment::mutable_var_squared_errors() {
  // @@protoc_insertion_point(field_mutable:DATA.Fragment.var_squared_errors)
  return _internal_mutable_var_squared_errors();
}
inline void Fragment::set_allocated_var_squared_errors(::DATA::SquaredErrorsTable* var_squared_errors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete var_squared_errors_;
  }
  if (var_squared_errors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(var_squared_errors);
    if (message_arena != submessage_arena) {
      var_squared_errors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_squared_errors, submessage_arena);
    }
    
  } else {
    
  }
  var_squared_errors_ = var_squared_errors;
  // @@protoc_insertion_point(field_set_allocated:DATA.Fragment.var_squared_errors)
}

// uint32 var_tiers = 25;
inline void Fragment::clear_var_tiers() {
  var_tiers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::_internal_var_tiers() const {
  return var_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fragment::var_tiers() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.var_tiers)
  return _internal_var_tiers();
}
inline void Fragment::_internal_set_var_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  var_tiers_ = value;
}
inline void Fragment::set_var_tiers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_var_tiers(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.var_tiers)
}

// uint64 timestamp = 26;
inline void Fragment::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::timestamp() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.timestamp)
  return _internal_timestamp();
}
inline void Fragment::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Fragment::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.timestamp)
}

// uint64 sequence_number = 27;
inline void Fragment::clear_sequence_number() {
  sequence_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fragment::sequence_number() const {
  // @@protoc_insertion_point(field_get:DATA.Fragment.sequence_number)
  return _internal_sequence_number();
}
inline void Fragment::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sequence_number_ = value;
}
inline void Fragment::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:DATA.Fragment.sequence_number)
}

// -------------------------------------------------------------------

// VariableCollection

// repeated .DATA.Variable variables = 1;
inline int VariableCollection::_internal_variables_size() const {
  return variables_.size();
}
inline int VariableCollection::variables_size() const {
  return _internal_variables_size();
}
inline void VariableCollection::clear_variables() {
  variables_.Clear();
}
inline ::DATA::Variable* VariableCollection::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.VariableCollection.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >*
VariableCollection::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.VariableCollection.variables)
  return &variables_;
}
inline const ::DATA::Variable& VariableCollection::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::DATA::Variable& VariableCollection::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.VariableCollection.variables)
  return _internal_variables(index);
}
inline ::DATA::Variable* VariableCollection::_internal_add_variables() {
  return variables_.Add();
}
inline ::DATA::Variable* VariableCollection::add_variables() {
  // @@protoc_insertion_point(field_add:DATA.VariableCollection.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::Variable >&
VariableCollection::variables() const {
  // @@protoc_insertion_point(field_list:DATA.VariableCollection.variables)
  return variables_;
}

// -------------------------------------------------------------------

// RetransmissionRequest_VariableRequest_TierRequest

// int32 tier_id = 1;
inline void RetransmissionRequest_VariableRequest_TierRequest::clear_tier_id() {
  tier_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetransmissionRequest_VariableRequest_TierRequest::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetransmissionRequest_VariableRequest_TierRequest::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.TierRequest.tier_id)
  return _internal_tier_id();
}
inline void RetransmissionRequest_VariableRequest_TierRequest::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tier_id_ = value;
}
inline void RetransmissionRequest_VariableRequest_TierRequest::set_tier_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.TierRequest.tier_id)
}

// repeated int32 chunk_ids = 2;
inline int RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids_size() const {
  return chunk_ids_.size();
}
inline int RetransmissionRequest_VariableRequest_TierRequest::chunk_ids_size() const {
  return _internal_chunk_ids_size();
}
inline void RetransmissionRequest_VariableRequest_TierRequest::clear_chunk_ids() {
  chunk_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids(int index) const {
  return chunk_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetransmissionRequest_VariableRequest_TierRequest::chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_chunk_ids(index);
}
inline void RetransmissionRequest_VariableRequest_TierRequest::set_chunk_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  chunk_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
}
inline void RetransmissionRequest_VariableRequest_TierRequest::_internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  chunk_ids_.Add(value);
}
inline void RetransmissionRequest_VariableRequest_TierRequest::add_chunk_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_chunk_ids(value);
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RetransmissionRequest_VariableRequest_TierRequest::_internal_chunk_ids() const {
  return chunk_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RetransmissionRequest_VariableRequest_TierRequest::chunk_ids() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_chunk_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RetransmissionRequest_VariableRequest_TierRequest::_internal_mutable_chunk_ids() {
  return &chunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RetransmissionRequest_VariableRequest_TierRequest::mutable_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.VariableRequest.TierRequest.chunk_ids)
  return _internal_mutable_chunk_ids();
}

// -------------------------------------------------------------------

// RetransmissionRequest_VariableRequest

// string var_name = 1;
inline void RetransmissionRequest_VariableRequest::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RetransmissionRequest_VariableRequest::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.var_name)
  return _internal_var_name();
}
inline void RetransmissionRequest_VariableRequest::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline std::string* RetransmissionRequest_VariableRequest::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.VariableRequest.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& RetransmissionRequest_VariableRequest::_internal_var_name() const {
  return var_name_.Get();
}
inline void RetransmissionRequest_VariableRequest::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RetransmissionRequest_VariableRequest::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline void RetransmissionRequest_VariableRequest::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline void RetransmissionRequest_VariableRequest::set_var_name(const char* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline std::string* RetransmissionRequest_VariableRequest::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RetransmissionRequest_VariableRequest::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.RetransmissionRequest.VariableRequest.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RetransmissionRequest_VariableRequest::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.RetransmissionRequest.VariableRequest.var_name)
}
inline std::string* RetransmissionRequest_VariableRequest::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.RetransmissionRequest.VariableRequest.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RetransmissionRequest_VariableRequest::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.RetransmissionRequest.VariableRequest.var_name)
}

// repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
inline int RetransmissionRequest_VariableRequest::_internal_tiers_size() const {
  return tiers_.size();
}
inline int RetransmissionRequest_VariableRequest::tiers_size() const {
  return _internal_tiers_size();
}
inline void RetransmissionRequest_VariableRequest::clear_tiers() {
  tiers_.Clear();
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.VariableRequest.tiers)
  return tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >*
RetransmissionRequest_VariableRequest::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.VariableRequest.tiers)
  return &tiers_;
}
inline const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& RetransmissionRequest_VariableRequest::_internal_tiers(int index) const {
  return tiers_.Get(index);
}
inline const ::DATA::RetransmissionRequest_VariableRequest_TierRequest& RetransmissionRequest_VariableRequest::tiers(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _internal_tiers(index);
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::_internal_add_tiers() {
  return tiers_.Add();
}
inline ::DATA::RetransmissionRequest_VariableRequest_TierRequest* RetransmissionRequest_VariableRequest::add_tiers() {
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.VariableRequest.tiers)
  return _internal_add_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >&
RetransmissionRequest_VariableRequest::tiers() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.VariableRequest.tiers)
  return tiers_;
}

// -------------------------------------------------------------------

// RetransmissionRequest

// repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
inline int RetransmissionRequest::_internal_variables_size() const {
  return variables_.size();
}
inline int RetransmissionRequest::variables_size() const {
  return _internal_variables_size();
}
inline void RetransmissionRequest::clear_variables() {
  variables_.Clear();
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.RetransmissionRequest.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >*
RetransmissionRequest::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.RetransmissionRequest.variables)
  return &variables_;
}
inline const ::DATA::RetransmissionRequest_VariableRequest& RetransmissionRequest::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::DATA::RetransmissionRequest_VariableRequest& RetransmissionRequest::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.RetransmissionRequest.variables)
  return _internal_variables(index);
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::_internal_add_variables() {
  return variables_.Add();
}
inline ::DATA::RetransmissionRequest_VariableRequest* RetransmissionRequest::add_variables() {
  // @@protoc_insertion_point(field_add:DATA.RetransmissionRequest.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::RetransmissionRequest_VariableRequest >&
RetransmissionRequest::variables() const {
  // @@protoc_insertion_point(field_list:DATA.RetransmissionRequest.variables)
  return variables_;
}

// -------------------------------------------------------------------

// TierMetadata

// uint32 tier_id = 1;
inline void TierMetadata::clear_tier_id() {
  tier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.tier_id)
  return _internal_tier_id();
}
inline void TierMetadata::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tier_id_ = value;
}
inline void TierMetadata::set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.tier_id)
}

// uint32 k = 2;
inline void TierMetadata::clear_k() {
  k_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::k() const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.k)
  return _internal_k();
}
inline void TierMetadata::_internal_set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  k_ = value;
}
inline void TierMetadata::set_k(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.k)
}

// repeated uint32 chunk_ids = 3;
inline int TierMetadata::_internal_chunk_ids_size() const {
  return chunk_ids_.size();
}
inline int TierMetadata::chunk_ids_size() const {
  return _internal_chunk_ids_size();
}
inline void TierMetadata::clear_chunk_ids() {
  chunk_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::_internal_chunk_ids(int index) const {
  return chunk_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierMetadata::chunk_ids(int index) const {
  // @@protoc_insertion_point(field_get:DATA.TierMetadata.chunk_ids)
  return _internal_chunk_ids(index);
}
inline void TierMetadata::set_chunk_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chunk_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:DATA.TierMetadata.chunk_ids)
}
inline void TierMetadata::_internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  chunk_ids_.Add(value);
}
inline void TierMetadata::add_chunk_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_chunk_ids(value);
  // @@protoc_insertion_point(field_add:DATA.TierMetadata.chunk_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TierMetadata::_internal_chunk_ids() const {
  return chunk_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TierMetadata::chunk_ids() const {
  // @@protoc_insertion_point(field_list:DATA.TierMetadata.chunk_ids)
  return _internal_chunk_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TierMetadata::_internal_mutable_chunk_ids() {
  return &chunk_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TierMetadata::mutable_chunk_ids() {
  // @@protoc_insertion_point(field_mutable_list:DATA.TierMetadata.chunk_ids)
  return _internal_mutable_chunk_ids();
}

// -------------------------------------------------------------------

// VariableMetadata

// string var_name = 1;
inline void VariableMetadata::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VariableMetadata::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.VariableMetadata.var_name)
  return _internal_var_name();
}
inline void VariableMetadata::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:DATA.VariableMetadata.var_name)
}
inline std::string* VariableMetadata::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:DATA.VariableMetadata.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& VariableMetadata::_internal_var_name() const {
  return var_name_.Get();
}
inline void VariableMetadata::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VariableMetadata::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.VariableMetadata.var_name)
}
inline void VariableMetadata::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.VariableMetadata.var_name)
}
inline void VariableMetadata::set_var_name(const char* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.VariableMetadata.var_name)
}
inline std::string* VariableMetadata::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VariableMetadata::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.VariableMetadata.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariableMetadata::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.VariableMetadata.var_name)
}
inline std::string* VariableMetadata::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.VariableMetadata.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VariableMetadata::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.VariableMetadata.var_name)
}

// repeated .DATA.TierMetadata tiers = 2;
inline int VariableMetadata::_internal_tiers_size() const {
  return tiers_.size();
}
inline int VariableMetadata::tiers_size() const {
  return _internal_tiers_size();
}
inline void VariableMetadata::clear_tiers() {
  tiers_.Clear();
}
inline ::DATA::TierMetadata* VariableMetadata::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.VariableMetadata.tiers)
  return tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >*
VariableMetadata::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:DATA.VariableMetadata.tiers)
  return &tiers_;
}
inline const ::DATA::TierMetadata& VariableMetadata::_internal_tiers(int index) const {
  return tiers_.Get(index);
}
inline const ::DATA::TierMetadata& VariableMetadata::tiers(int index) const {
  // @@protoc_insertion_point(field_get:DATA.VariableMetadata.tiers)
  return _internal_tiers(index);
}
inline ::DATA::TierMetadata* VariableMetadata::_internal_add_tiers() {
  return tiers_.Add();
}
inline ::DATA::TierMetadata* VariableMetadata::add_tiers() {
  // @@protoc_insertion_point(field_add:DATA.VariableMetadata.tiers)
  return _internal_add_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::TierMetadata >&
VariableMetadata::tiers() const {
  // @@protoc_insertion_point(field_list:DATA.VariableMetadata.tiers)
  return tiers_;
}

// -------------------------------------------------------------------

// Metadata

// repeated .DATA.VariableMetadata variables = 1;
inline int Metadata::_internal_variables_size() const {
  return variables_.size();
}
inline int Metadata::variables_size() const {
  return _internal_variables_size();
}
inline void Metadata::clear_variables() {
  variables_.Clear();
}
inline ::DATA::VariableMetadata* Metadata::mutable_variables(int index) {
  // @@protoc_insertion_point(field_mutable:DATA.Metadata.variables)
  return variables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >*
Metadata::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_list:DATA.Metadata.variables)
  return &variables_;
}
inline const ::DATA::VariableMetadata& Metadata::_internal_variables(int index) const {
  return variables_.Get(index);
}
inline const ::DATA::VariableMetadata& Metadata::variables(int index) const {
  // @@protoc_insertion_point(field_get:DATA.Metadata.variables)
  return _internal_variables(index);
}
inline ::DATA::VariableMetadata* Metadata::_internal_add_variables() {
  return variables_.Add();
}
inline ::DATA::VariableMetadata* Metadata::add_variables() {
  // @@protoc_insertion_point(field_add:DATA.Metadata.variables)
  return _internal_add_variables();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DATA::VariableMetadata >&
Metadata::variables() const {
  // @@protoc_insertion_point(field_list:DATA.Metadata.variables)
  return variables_;
}

// -------------------------------------------------------------------

// FragmentsReport

// bytes var_name = 1;
inline void FragmentsReport::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FragmentsReport::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.var_name)
  return _internal_var_name();
}
inline void FragmentsReport::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.var_name)
}
inline std::string* FragmentsReport::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:DATA.FragmentsReport.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& FragmentsReport::_internal_var_name() const {
  return var_name_.Get();
}
inline void FragmentsReport::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FragmentsReport::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.FragmentsReport.var_name)
}
inline void FragmentsReport::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.FragmentsReport.var_name)
}
inline void FragmentsReport::set_var_name(const void* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.FragmentsReport.var_name)
}
inline std::string* FragmentsReport::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FragmentsReport::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.FragmentsReport.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FragmentsReport::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.FragmentsReport.var_name)
}
inline std::string* FragmentsReport::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.FragmentsReport.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FragmentsReport::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.FragmentsReport.var_name)
}

// uint32 tier_id = 2;
inline void FragmentsReport::clear_tier_id() {
  tier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.tier_id)
  return _internal_tier_id();
}
inline void FragmentsReport::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tier_id_ = value;
}
inline void FragmentsReport::set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.tier_id)
}

// uint32 chunks_processed = 3;
inline void FragmentsReport::clear_chunks_processed() {
  chunks_processed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::_internal_chunks_processed() const {
  return chunks_processed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::chunks_processed() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.chunks_processed)
  return _internal_chunks_processed();
}
inline void FragmentsReport::_internal_set_chunks_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  chunks_processed_ = value;
}
inline void FragmentsReport::set_chunks_processed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chunks_processed(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.chunks_processed)
}

// uint32 total_fragments = 4;
inline void FragmentsReport::clear_total_fragments() {
  total_fragments_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::_internal_total_fragments() const {
  return total_fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::total_fragments() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.total_fragments)
  return _internal_total_fragments();
}
inline void FragmentsReport::_internal_set_total_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_fragments_ = value;
}
inline void FragmentsReport::set_total_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_fragments(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.total_fragments)
}

// uint32 expected_fragments = 5;
inline void FragmentsReport::clear_expected_fragments() {
  expected_fragments_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::_internal_expected_fragments() const {
  return expected_fragments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FragmentsReport::expected_fragments() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.expected_fragments)
  return _internal_expected_fragments();
}
inline void FragmentsReport::_internal_set_expected_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expected_fragments_ = value;
}
inline void FragmentsReport::set_expected_fragments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expected_fragments(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.expected_fragments)
}

// uint64 time_window = 6;
inline void FragmentsReport::clear_time_window() {
  time_window_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FragmentsReport::_internal_time_window() const {
  return time_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FragmentsReport::time_window() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.time_window)
  return _internal_time_window();
}
inline void FragmentsReport::_internal_set_time_window(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_window_ = value;
}
inline void FragmentsReport::set_time_window(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_window(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.time_window)
}

// double lambda = 7;
inline void FragmentsReport::clear_lambda() {
  lambda_ = 0;
}
inline double FragmentsReport::_internal_lambda() const {
  return lambda_;
}
inline double FragmentsReport::lambda() const {
  // @@protoc_insertion_point(field_get:DATA.FragmentsReport.lambda)
  return _internal_lambda();
}
inline void FragmentsReport::_internal_set_lambda(double value) {
  
  lambda_ = value;
}
inline void FragmentsReport::set_lambda(double value) {
  _internal_set_lambda(value);
  // @@protoc_insertion_point(field_set:DATA.FragmentsReport.lambda)
}

// -------------------------------------------------------------------

// TierCompleteAck

// uint32 tier_id = 1;
inline void TierCompleteAck::clear_tier_id() {
  tier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierCompleteAck::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TierCompleteAck::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.TierCompleteAck.tier_id)
  return _internal_tier_id();
}
inline void TierCompleteAck::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tier_id_ = value;
}
inline void TierCompleteAck::set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.TierCompleteAck.tier_id)
}

// -------------------------------------------------------------------

// ControlMessage

// .DATA.ControlMessage.ControlType type = 1;
inline void ControlMessage::clear_type() {
  type_ = 0;
}
inline ::DATA::ControlMessage_ControlType ControlMessage::_internal_type() const {
  return static_cast< ::DATA::ControlMessage_ControlType >(type_);
}
inline ::DATA::ControlMessage_ControlType ControlMessage::type() const {
  // @@protoc_insertion_point(field_get:DATA.ControlMessage.type)
  return _internal_type();
}
inline void ControlMessage::_internal_set_type(::DATA::ControlMessage_ControlType value) {
  
  type_ = value;
}
inline void ControlMessage::set_type(::DATA::ControlMessage_ControlType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:DATA.ControlMessage.type)
}

// string var_name = 2;
inline void ControlMessage::clear_var_name() {
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlMessage::var_name() const {
  // @@protoc_insertion_point(field_get:DATA.ControlMessage.var_name)
  return _internal_var_name();
}
inline void ControlMessage::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:DATA.ControlMessage.var_name)
}
inline std::string* ControlMessage::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:DATA.ControlMessage.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& ControlMessage::_internal_var_name() const {
  return var_name_.Get();
}
inline void ControlMessage::_internal_set_var_name(const std::string& value) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlMessage::set_var_name(std::string&& value) {
  
  var_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DATA.ControlMessage.var_name)
}
inline void ControlMessage::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DATA.ControlMessage.var_name)
}
inline void ControlMessage::set_var_name(const char* value,
    size_t size) {
  
  var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DATA.ControlMessage.var_name)
}
inline std::string* ControlMessage::_internal_mutable_var_name() {
  
  return var_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlMessage::release_var_name() {
  // @@protoc_insertion_point(field_release:DATA.ControlMessage.var_name)
  return var_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlMessage::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DATA.ControlMessage.var_name)
}
inline std::string* ControlMessage::unsafe_arena_release_var_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DATA.ControlMessage.var_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return var_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlMessage::unsafe_arena_set_allocated_var_name(
    std::string* var_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (var_name != nullptr) {
    
  } else {
    
  }
  var_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      var_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DATA.ControlMessage.var_name)
}

// uint32 tier_id = 3;
inline void ControlMessage::clear_tier_id() {
  tier_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlMessage::_internal_tier_id() const {
  return tier_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ControlMessage::tier_id() const {
  // @@protoc_insertion_point(field_get:DATA.ControlMessage.tier_id)
  return _internal_tier_id();
}
inline void ControlMessage::_internal_set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tier_id_ = value;
}
inline void ControlMessage::set_tier_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tier_id(value);
  // @@protoc_insertion_point(field_set:DATA.ControlMessage.tier_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DATA

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DATA::ControlMessage_ControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DATA::ControlMessage_ControlType>() {
  return ::DATA::ControlMessage_ControlType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fragment_2eproto
