// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fragment.proto

#include "fragment.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryTable_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SquaredErrorsTable_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TierMetadata_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Variable_fragment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fragment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariableMetadata_fragment_2eproto;
namespace DATA {
class QueryTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryTable> _instance;
} _QueryTable_default_instance_;
class SquaredErrorsTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SquaredErrorsTable> _instance;
} _SquaredErrorsTable_default_instance_;
class VariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Variable> _instance;
} _Variable_default_instance_;
class TierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tier> _instance;
} _Tier_default_instance_;
class FragmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Fragment> _instance;
} _Fragment_default_instance_;
class VariableCollectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariableCollection> _instance;
} _VariableCollection_default_instance_;
class RetransmissionRequest_VariableRequest_TierRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetransmissionRequest_VariableRequest_TierRequest> _instance;
} _RetransmissionRequest_VariableRequest_TierRequest_default_instance_;
class RetransmissionRequest_VariableRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetransmissionRequest_VariableRequest> _instance;
} _RetransmissionRequest_VariableRequest_default_instance_;
class RetransmissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetransmissionRequest> _instance;
} _RetransmissionRequest_default_instance_;
class TierMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TierMetadata> _instance;
} _TierMetadata_default_instance_;
class VariableMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariableMetadata> _instance;
} _VariableMetadata_default_instance_;
class MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Metadata> _instance;
} _Metadata_default_instance_;
class FragmentsReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FragmentsReport> _instance;
} _FragmentsReport_default_instance_;
}  // namespace DATA
static void InitDefaultsscc_info_Fragment_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_Fragment_default_instance_;
    new (ptr) ::DATA::Fragment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::Fragment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Fragment_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Fragment_fragment_2eproto}, {
      &scc_info_QueryTable_fragment_2eproto.base,
      &scc_info_SquaredErrorsTable_fragment_2eproto.base,}};

static void InitDefaultsscc_info_FragmentsReport_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_FragmentsReport_default_instance_;
    new (ptr) ::DATA::FragmentsReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::FragmentsReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FragmentsReport_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FragmentsReport_fragment_2eproto}, {}};

static void InitDefaultsscc_info_Metadata_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_Metadata_default_instance_;
    new (ptr) ::DATA::Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Metadata_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Metadata_fragment_2eproto}, {
      &scc_info_VariableMetadata_fragment_2eproto.base,}};

static void InitDefaultsscc_info_QueryTable_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_QueryTable_default_instance_;
    new (ptr) ::DATA::QueryTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::QueryTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryTable_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryTable_fragment_2eproto}, {}};

static void InitDefaultsscc_info_RetransmissionRequest_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_RetransmissionRequest_default_instance_;
    new (ptr) ::DATA::RetransmissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::RetransmissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetransmissionRequest_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RetransmissionRequest_fragment_2eproto}, {
      &scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto.base,}};

static void InitDefaultsscc_info_RetransmissionRequest_VariableRequest_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_RetransmissionRequest_VariableRequest_default_instance_;
    new (ptr) ::DATA::RetransmissionRequest_VariableRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::RetransmissionRequest_VariableRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RetransmissionRequest_VariableRequest_fragment_2eproto}, {
      &scc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto.base,}};

static void InitDefaultsscc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_RetransmissionRequest_VariableRequest_TierRequest_default_instance_;
    new (ptr) ::DATA::RetransmissionRequest_VariableRequest_TierRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::RetransmissionRequest_VariableRequest_TierRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto}, {}};

static void InitDefaultsscc_info_SquaredErrorsTable_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_SquaredErrorsTable_default_instance_;
    new (ptr) ::DATA::SquaredErrorsTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::SquaredErrorsTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SquaredErrorsTable_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SquaredErrorsTable_fragment_2eproto}, {}};

static void InitDefaultsscc_info_Tier_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_Tier_default_instance_;
    new (ptr) ::DATA::Tier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::Tier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Tier_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Tier_fragment_2eproto}, {}};

static void InitDefaultsscc_info_TierMetadata_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_TierMetadata_default_instance_;
    new (ptr) ::DATA::TierMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::TierMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TierMetadata_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TierMetadata_fragment_2eproto}, {}};

static void InitDefaultsscc_info_Variable_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_Variable_default_instance_;
    new (ptr) ::DATA::Variable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::Variable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Variable_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Variable_fragment_2eproto}, {
      &scc_info_QueryTable_fragment_2eproto.base,
      &scc_info_SquaredErrorsTable_fragment_2eproto.base,}};

static void InitDefaultsscc_info_VariableCollection_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_VariableCollection_default_instance_;
    new (ptr) ::DATA::VariableCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::VariableCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariableCollection_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VariableCollection_fragment_2eproto}, {
      &scc_info_Variable_fragment_2eproto.base,}};

static void InitDefaultsscc_info_VariableMetadata_fragment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DATA::_VariableMetadata_default_instance_;
    new (ptr) ::DATA::VariableMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DATA::VariableMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VariableMetadata_fragment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VariableMetadata_fragment_2eproto}, {
      &scc_info_TierMetadata_fragment_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fragment_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fragment_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fragment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fragment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, rows_),
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, cols_),
  PROTOBUF_FIELD_OFFSET(::DATA::QueryTable, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, rows_),
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, cols_),
  PROTOBUF_FIELD_OFFSET(::DATA::SquaredErrorsTable, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, dimensions_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, type_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, levels_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, level_error_bounds_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, stopping_indices_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, table_content_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, squared_errors_),
  PROTOBUF_FIELD_OFFSET(::DATA::Variable, tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, k_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, m_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, w_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, hd_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, ec_backend_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Tier, encoded_fragment_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, k_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, m_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, w_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, hd_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, ec_backend_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, encoded_fragment_length_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, idx_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, size_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, orig_data_size_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, chksum_mismatch_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, backend_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, frag_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, is_data_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, chunk_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, fragment_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_dimensions_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_type_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_levels_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_level_error_bounds_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_stopping_indices_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_table_content_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_squared_errors_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, var_tiers_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, timestamp_),
  PROTOBUF_FIELD_OFFSET(::DATA::Fragment, sequence_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableCollection, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest_TierRequest, chunk_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest_VariableRequest, tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::RetransmissionRequest, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, k_),
  PROTOBUF_FIELD_OFFSET(::DATA::TierMetadata, chunk_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::VariableMetadata, tiers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::Metadata, variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, var_name_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, tier_id_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, chunks_processed_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, total_fragments_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, expected_fragments_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, time_window_),
  PROTOBUF_FIELD_OFFSET(::DATA::FragmentsReport, lambda_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DATA::QueryTable)},
  { 8, -1, sizeof(::DATA::SquaredErrorsTable)},
  { 16, -1, sizeof(::DATA::Variable)},
  { 30, -1, sizeof(::DATA::Tier)},
  { 42, -1, sizeof(::DATA::Fragment)},
  { 74, -1, sizeof(::DATA::VariableCollection)},
  { 80, -1, sizeof(::DATA::RetransmissionRequest_VariableRequest_TierRequest)},
  { 87, -1, sizeof(::DATA::RetransmissionRequest_VariableRequest)},
  { 94, -1, sizeof(::DATA::RetransmissionRequest)},
  { 100, -1, sizeof(::DATA::TierMetadata)},
  { 108, -1, sizeof(::DATA::VariableMetadata)},
  { 115, -1, sizeof(::DATA::Metadata)},
  { 121, -1, sizeof(::DATA::FragmentsReport)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_QueryTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_SquaredErrorsTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_Variable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_Tier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_Fragment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_VariableCollection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_RetransmissionRequest_VariableRequest_TierRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_RetransmissionRequest_VariableRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_RetransmissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_TierMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_VariableMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DATA::_FragmentsReport_default_instance_),
};

const char descriptor_table_protodef_fragment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016fragment.proto\022\004DATA\"9\n\nQueryTable\022\014\n\004"
  "rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\017\n\007content\030\003 \003("
  "\004\"A\n\022SquaredErrorsTable\022\014\n\004rows\030\001 \001(\005\022\014\n"
  "\004cols\030\002 \001(\005\022\017\n\007content\030\003 \003(\001\"\352\001\n\010Variabl"
  "e\022\014\n\004name\030\001 \001(\t\022\022\n\ndimensions\030\002 \003(\r\022\014\n\004t"
  "ype\030\003 \001(\t\022\016\n\006levels\030\004 \001(\r\022\032\n\022level_error"
  "_bounds\030\005 \003(\001\022\030\n\020stopping_indices\030\006 \003(\r\022"
  "\'\n\rtable_content\030\007 \001(\0132\020.DATA.QueryTable"
  "\0220\n\016squared_errors\030\010 \001(\0132\030.DATA.SquaredE"
  "rrorsTable\022\r\n\005tiers\030\t \001(\r\"y\n\004Tier\022\n\n\002id\030"
  "\001 \001(\005\022\t\n\001k\030\002 \001(\005\022\t\n\001m\030\003 \001(\005\022\t\n\001w\030\004 \001(\005\022\n"
  "\n\002hd\030\005 \001(\005\022\027\n\017ec_backend_name\030\006 \001(\t\022\037\n\027e"
  "ncoded_fragment_length\030\007 \001(\004\"\330\004\n\010Fragmen"
  "t\022\t\n\001k\030\001 \001(\005\022\t\n\001m\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\n\n\002hd"
  "\030\004 \001(\005\022\027\n\017ec_backend_name\030\005 \001(\014\022\037\n\027encod"
  "ed_fragment_length\030\006 \001(\r\022\013\n\003idx\030\007 \001(\r\022\014\n"
  "\004size\030\010 \001(\r\022\026\n\016orig_data_size\030\t \001(\004\022\027\n\017c"
  "hksum_mismatch\030\n \001(\r\022\022\n\nbackend_id\030\013 \001(\r"
  "\022\014\n\004frag\030\014 \001(\014\022\017\n\007is_data\030\r \001(\010\022\017\n\007tier_"
  "id\030\016 \001(\r\022\020\n\010chunk_id\030\017 \001(\r\022\023\n\013fragment_i"
  "d\030\020 \001(\r\022\020\n\010var_name\030\021 \001(\t\022\026\n\016var_dimensi"
  "ons\030\022 \003(\r\022\020\n\010var_type\030\023 \001(\t\022\022\n\nvar_level"
  "s\030\024 \001(\r\022\036\n\026var_level_error_bounds\030\025 \003(\001\022"
  "\034\n\024var_stopping_indices\030\026 \003(\014\022+\n\021var_tab"
  "le_content\030\027 \001(\0132\020.DATA.QueryTable\0224\n\022va"
  "r_squared_errors\030\030 \001(\0132\030.DATA.SquaredErr"
  "orsTable\022\021\n\tvar_tiers\030\031 \001(\r\022\021\n\ttimestamp"
  "\030\032 \001(\004\022\027\n\017sequence_number\030\033 \001(\004\"7\n\022Varia"
  "bleCollection\022!\n\tvariables\030\001 \003(\0132\016.DATA."
  "Variable\"\370\001\n\025RetransmissionRequest\022>\n\tva"
  "riables\030\001 \003(\0132+.DATA.RetransmissionReque"
  "st.VariableRequest\032\236\001\n\017VariableRequest\022\020"
  "\n\010var_name\030\001 \001(\t\022F\n\005tiers\030\002 \003(\01327.DATA.R"
  "etransmissionRequest.VariableRequest.Tie"
  "rRequest\0321\n\013TierRequest\022\017\n\007tier_id\030\001 \001(\005"
  "\022\021\n\tchunk_ids\030\002 \003(\005\"=\n\014TierMetadata\022\017\n\007t"
  "ier_id\030\001 \001(\r\022\t\n\001k\030\002 \001(\r\022\021\n\tchunk_ids\030\003 \003"
  "(\r\"G\n\020VariableMetadata\022\020\n\010var_name\030\001 \001(\t"
  "\022!\n\005tiers\030\002 \003(\0132\022.DATA.TierMetadata\"5\n\010M"
  "etadata\022)\n\tvariables\030\001 \003(\0132\026.DATA.Variab"
  "leMetadata\"\250\001\n\017FragmentsReport\022\020\n\010var_na"
  "me\030\001 \001(\014\022\017\n\007tier_id\030\002 \001(\r\022\030\n\020chunks_proc"
  "essed\030\003 \001(\r\022\027\n\017total_fragments\030\004 \001(\r\022\032\n\022"
  "expected_fragments\030\005 \001(\r\022\023\n\013time_window\030"
  "\006 \001(\004\022\016\n\006lambda\030\007 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fragment_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fragment_2eproto_sccs[13] = {
  &scc_info_Fragment_fragment_2eproto.base,
  &scc_info_FragmentsReport_fragment_2eproto.base,
  &scc_info_Metadata_fragment_2eproto.base,
  &scc_info_QueryTable_fragment_2eproto.base,
  &scc_info_RetransmissionRequest_fragment_2eproto.base,
  &scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto.base,
  &scc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto.base,
  &scc_info_SquaredErrorsTable_fragment_2eproto.base,
  &scc_info_Tier_fragment_2eproto.base,
  &scc_info_TierMetadata_fragment_2eproto.base,
  &scc_info_Variable_fragment_2eproto.base,
  &scc_info_VariableCollection_fragment_2eproto.base,
  &scc_info_VariableMetadata_fragment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fragment_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fragment_2eproto = {
  false, false, descriptor_table_protodef_fragment_2eproto, "fragment.proto", 1789,
  &descriptor_table_fragment_2eproto_once, descriptor_table_fragment_2eproto_sccs, descriptor_table_fragment_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_fragment_2eproto::offsets,
  file_level_metadata_fragment_2eproto, 13, file_level_enum_descriptors_fragment_2eproto, file_level_service_descriptors_fragment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fragment_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fragment_2eproto)), true);
namespace DATA {

// ===================================================================

void QueryTable::InitAsDefaultInstance() {
}
class QueryTable::_Internal {
 public:
};

QueryTable::QueryTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.QueryTable)
}
QueryTable::QueryTable(const QueryTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:DATA.QueryTable)
}

void QueryTable::SharedCtor() {
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
}

QueryTable::~QueryTable() {
  // @@protoc_insertion_point(destructor:DATA.QueryTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryTable::ArenaDtor(void* object) {
  QueryTable* _this = reinterpret_cast< QueryTable* >(object);
  (void)_this;
}
void QueryTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryTable& QueryTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryTable_fragment_2eproto.base);
  return *internal_default_instance();
}


void QueryTable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.QueryTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_content(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.QueryTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated uint64 content = 3;
  {
    int byte_size = _content_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_content(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.QueryTable)
  return target;
}

size_t QueryTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.QueryTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 content = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->content_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.QueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.QueryTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.QueryTable)
    MergeFrom(*source);
  }
}

void QueryTable::MergeFrom(const QueryTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.QueryTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void QueryTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.QueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTable::CopyFrom(const QueryTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.QueryTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTable::IsInitialized() const {
  return true;
}

void QueryTable::InternalSwap(QueryTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryTable, cols_)
      + sizeof(QueryTable::cols_)
      - PROTOBUF_FIELD_OFFSET(QueryTable, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SquaredErrorsTable::InitAsDefaultInstance() {
}
class SquaredErrorsTable::_Internal {
 public:
};

SquaredErrorsTable::SquaredErrorsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  content_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.SquaredErrorsTable)
}
SquaredErrorsTable::SquaredErrorsTable(const SquaredErrorsTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      content_(from.content_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:DATA.SquaredErrorsTable)
}

void SquaredErrorsTable::SharedCtor() {
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
}

SquaredErrorsTable::~SquaredErrorsTable() {
  // @@protoc_insertion_point(destructor:DATA.SquaredErrorsTable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SquaredErrorsTable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SquaredErrorsTable::ArenaDtor(void* object) {
  SquaredErrorsTable* _this = reinterpret_cast< SquaredErrorsTable* >(object);
  (void)_this;
}
void SquaredErrorsTable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SquaredErrorsTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SquaredErrorsTable& SquaredErrorsTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SquaredErrorsTable_fragment_2eproto.base);
  return *internal_default_instance();
}


void SquaredErrorsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.SquaredErrorsTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.Clear();
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SquaredErrorsTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_content(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SquaredErrorsTable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.SquaredErrorsTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rows = 1;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // repeated double content = 3;
  if (this->_internal_content_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.SquaredErrorsTable)
  return target;
}

size_t SquaredErrorsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.SquaredErrorsTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double content = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_content_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _content_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SquaredErrorsTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.SquaredErrorsTable)
  GOOGLE_DCHECK_NE(&from, this);
  const SquaredErrorsTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SquaredErrorsTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.SquaredErrorsTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.SquaredErrorsTable)
    MergeFrom(*source);
  }
}

void SquaredErrorsTable::MergeFrom(const SquaredErrorsTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.SquaredErrorsTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_.MergeFrom(from.content_);
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void SquaredErrorsTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.SquaredErrorsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SquaredErrorsTable::CopyFrom(const SquaredErrorsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.SquaredErrorsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SquaredErrorsTable::IsInitialized() const {
  return true;
}

void SquaredErrorsTable::InternalSwap(SquaredErrorsTable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.InternalSwap(&other->content_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SquaredErrorsTable, cols_)
      + sizeof(SquaredErrorsTable::cols_)
      - PROTOBUF_FIELD_OFFSET(SquaredErrorsTable, rows_)>(
          reinterpret_cast<char*>(&rows_),
          reinterpret_cast<char*>(&other->rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SquaredErrorsTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Variable::InitAsDefaultInstance() {
  ::DATA::_Variable_default_instance_._instance.get_mutable()->table_content_ = const_cast< ::DATA::QueryTable*>(
      ::DATA::QueryTable::internal_default_instance());
  ::DATA::_Variable_default_instance_._instance.get_mutable()->squared_errors_ = const_cast< ::DATA::SquaredErrorsTable*>(
      ::DATA::SquaredErrorsTable::internal_default_instance());
}
class Variable::_Internal {
 public:
  static const ::DATA::QueryTable& table_content(const Variable* msg);
  static const ::DATA::SquaredErrorsTable& squared_errors(const Variable* msg);
};

const ::DATA::QueryTable&
Variable::_Internal::table_content(const Variable* msg) {
  return *msg->table_content_;
}
const ::DATA::SquaredErrorsTable&
Variable::_Internal::squared_errors(const Variable* msg) {
  return *msg->squared_errors_;
}
Variable::Variable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dimensions_(arena),
  level_error_bounds_(arena),
  stopping_indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.Variable)
}
Variable::Variable(const Variable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dimensions_(from.dimensions_),
      level_error_bounds_(from.level_error_bounds_),
      stopping_indices_(from.stopping_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_table_content()) {
    table_content_ = new ::DATA::QueryTable(*from.table_content_);
  } else {
    table_content_ = nullptr;
  }
  if (from._internal_has_squared_errors()) {
    squared_errors_ = new ::DATA::SquaredErrorsTable(*from.squared_errors_);
  } else {
    squared_errors_ = nullptr;
  }
  ::memcpy(&levels_, &from.levels_,
    static_cast<size_t>(reinterpret_cast<char*>(&tiers_) -
    reinterpret_cast<char*>(&levels_)) + sizeof(tiers_));
  // @@protoc_insertion_point(copy_constructor:DATA.Variable)
}

void Variable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Variable_fragment_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tiers_) -
      reinterpret_cast<char*>(&table_content_)) + sizeof(tiers_));
}

Variable::~Variable() {
  // @@protoc_insertion_point(destructor:DATA.Variable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Variable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_content_;
  if (this != internal_default_instance()) delete squared_errors_;
}

void Variable::ArenaDtor(void* object) {
  Variable* _this = reinterpret_cast< Variable* >(object);
  (void)_this;
}
void Variable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Variable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Variable& Variable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Variable_fragment_2eproto.base);
  return *internal_default_instance();
}


void Variable::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Variable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimensions_.Clear();
  level_error_bounds_.Clear();
  stopping_indices_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && table_content_ != nullptr) {
    delete table_content_;
  }
  table_content_ = nullptr;
  if (GetArena() == nullptr && squared_errors_ != nullptr) {
    delete squared_errors_;
  }
  squared_errors_ = nullptr;
  ::memset(&levels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tiers_) -
      reinterpret_cast<char*>(&levels_)) + sizeof(tiers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Variable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.Variable.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.Variable.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 levels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double level_error_bounds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_level_error_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_level_error_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated uint32 stopping_indices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stopping_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_stopping_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DATA.QueryTable table_content = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DATA.SquaredErrorsTable squared_errors = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_squared_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tiers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Variable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Variable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Variable.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated uint32 dimensions = 2;
  {
    int byte_size = _dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_dimensions(), byte_size, target);
    }
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Variable.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // uint32 levels = 4;
  if (this->levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_levels(), target);
  }

  // repeated double level_error_bounds = 5;
  if (this->_internal_level_error_bounds_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_level_error_bounds(), target);
  }

  // repeated uint32 stopping_indices = 6;
  {
    int byte_size = _stopping_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_stopping_indices(), byte_size, target);
    }
  }

  // .DATA.QueryTable table_content = 7;
  if (this->has_table_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::table_content(this), target, stream);
  }

  // .DATA.SquaredErrorsTable squared_errors = 8;
  if (this->has_squared_errors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::squared_errors(this), target, stream);
  }

  // uint32 tiers = 9;
  if (this->tiers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_tiers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Variable)
  return target;
}

size_t Variable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Variable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dimensions = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double level_error_bounds = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_level_error_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _level_error_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 stopping_indices = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stopping_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stopping_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .DATA.QueryTable table_content = 7;
  if (this->has_table_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_content_);
  }

  // .DATA.SquaredErrorsTable squared_errors = 8;
  if (this->has_squared_errors()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *squared_errors_);
  }

  // uint32 levels = 4;
  if (this->levels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levels());
  }

  // uint32 tiers = 9;
  if (this->tiers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tiers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Variable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  const Variable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Variable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.Variable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.Variable)
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.Variable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dimensions_.MergeFrom(from.dimensions_);
  level_error_bounds_.MergeFrom(from.level_error_bounds_);
  stopping_indices_.MergeFrom(from.stopping_indices_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_table_content()) {
    _internal_mutable_table_content()->::DATA::QueryTable::MergeFrom(from._internal_table_content());
  }
  if (from.has_squared_errors()) {
    _internal_mutable_squared_errors()->::DATA::SquaredErrorsTable::MergeFrom(from._internal_squared_errors());
  }
  if (from.levels() != 0) {
    _internal_set_levels(from._internal_levels());
  }
  if (from.tiers() != 0) {
    _internal_set_tiers(from._internal_tiers());
  }
}

void Variable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Variable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  return true;
}

void Variable::InternalSwap(Variable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dimensions_.InternalSwap(&other->dimensions_);
  level_error_bounds_.InternalSwap(&other->level_error_bounds_);
  stopping_indices_.InternalSwap(&other->stopping_indices_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Variable, tiers_)
      + sizeof(Variable::tiers_)
      - PROTOBUF_FIELD_OFFSET(Variable, table_content_)>(
          reinterpret_cast<char*>(&table_content_),
          reinterpret_cast<char*>(&other->table_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Variable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tier::InitAsDefaultInstance() {
}
class Tier::_Internal {
 public:
};

Tier::Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.Tier)
}
Tier::Tier(const Tier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ec_backend_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ec_backend_name().empty()) {
    ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ec_backend_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hd_));
  // @@protoc_insertion_point(copy_constructor:DATA.Tier)
}

void Tier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tier_fragment_2eproto.base);
  ec_backend_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hd_));
}

Tier::~Tier() {
  // @@protoc_insertion_point(destructor:DATA.Tier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ec_backend_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tier::ArenaDtor(void* object) {
  Tier* _this = reinterpret_cast< Tier* >(object);
  (void)_this;
}
void Tier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tier& Tier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tier_fragment_2eproto.base);
  return *internal_default_instance();
}


void Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ec_backend_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(hd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ec_backend_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ec_backend_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.Tier.ec_backend_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 encoded_fragment_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          encoded_fragment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Tier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 k = 2;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_k(), target);
  }

  // int32 m = 3;
  if (this->m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_m(), target);
  }

  // int32 w = 4;
  if (this->w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_w(), target);
  }

  // int32 hd = 5;
  if (this->hd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hd(), target);
  }

  // string ec_backend_name = 6;
  if (this->ec_backend_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ec_backend_name().data(), static_cast<int>(this->_internal_ec_backend_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Tier.ec_backend_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ec_backend_name(), target);
  }

  // uint64 encoded_fragment_length = 7;
  if (this->encoded_fragment_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_encoded_fragment_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Tier)
  return target;
}

size_t Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Tier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ec_backend_name = 6;
  if (this->ec_backend_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ec_backend_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 k = 2;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // int32 m = 3;
  if (this->m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m());
  }

  // int32 w = 4;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  // uint64 encoded_fragment_length = 7;
  if (this->encoded_fragment_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_encoded_fragment_length());
  }

  // int32 hd = 5;
  if (this->hd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  const Tier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.Tier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.Tier)
    MergeFrom(*source);
  }
}

void Tier::MergeFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ec_backend_name().size() > 0) {
    _internal_set_ec_backend_name(from._internal_ec_backend_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.m() != 0) {
    _internal_set_m(from._internal_m());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.encoded_fragment_length() != 0) {
    _internal_set_encoded_fragment_length(from._internal_encoded_fragment_length());
  }
  if (from.hd() != 0) {
    _internal_set_hd(from._internal_hd());
  }
}

void Tier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tier::CopyFrom(const Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tier::IsInitialized() const {
  return true;
}

void Tier::InternalSwap(Tier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ec_backend_name_.Swap(&other->ec_backend_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tier, hd_)
      + sizeof(Tier::hd_)
      - PROTOBUF_FIELD_OFFSET(Tier, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Fragment::InitAsDefaultInstance() {
  ::DATA::_Fragment_default_instance_._instance.get_mutable()->var_table_content_ = const_cast< ::DATA::QueryTable*>(
      ::DATA::QueryTable::internal_default_instance());
  ::DATA::_Fragment_default_instance_._instance.get_mutable()->var_squared_errors_ = const_cast< ::DATA::SquaredErrorsTable*>(
      ::DATA::SquaredErrorsTable::internal_default_instance());
}
class Fragment::_Internal {
 public:
  static const ::DATA::QueryTable& var_table_content(const Fragment* msg);
  static const ::DATA::SquaredErrorsTable& var_squared_errors(const Fragment* msg);
};

const ::DATA::QueryTable&
Fragment::_Internal::var_table_content(const Fragment* msg) {
  return *msg->var_table_content_;
}
const ::DATA::SquaredErrorsTable&
Fragment::_Internal::var_squared_errors(const Fragment* msg) {
  return *msg->var_squared_errors_;
}
Fragment::Fragment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  var_dimensions_(arena),
  var_level_error_bounds_(arena),
  var_stopping_indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.Fragment)
}
Fragment::Fragment(const Fragment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      var_dimensions_(from.var_dimensions_),
      var_level_error_bounds_(from.var_level_error_bounds_),
      var_stopping_indices_(from.var_stopping_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ec_backend_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ec_backend_name().empty()) {
    ec_backend_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ec_backend_name(),
      GetArena());
  }
  frag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frag().empty()) {
    frag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frag(),
      GetArena());
  }
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_name().empty()) {
    var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_name(),
      GetArena());
  }
  var_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_type().empty()) {
    var_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_type(),
      GetArena());
  }
  if (from._internal_has_var_table_content()) {
    var_table_content_ = new ::DATA::QueryTable(*from.var_table_content_);
  } else {
    var_table_content_ = nullptr;
  }
  if (from._internal_has_var_squared_errors()) {
    var_squared_errors_ = new ::DATA::SquaredErrorsTable(*from.var_squared_errors_);
  } else {
    var_squared_errors_ = nullptr;
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&var_tiers_) -
    reinterpret_cast<char*>(&k_)) + sizeof(var_tiers_));
  // @@protoc_insertion_point(copy_constructor:DATA.Fragment)
}

void Fragment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Fragment_fragment_2eproto.base);
  ec_backend_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_table_content_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_tiers_) -
      reinterpret_cast<char*>(&var_table_content_)) + sizeof(var_tiers_));
}

Fragment::~Fragment() {
  // @@protoc_insertion_point(destructor:DATA.Fragment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Fragment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ec_backend_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete var_table_content_;
  if (this != internal_default_instance()) delete var_squared_errors_;
}

void Fragment::ArenaDtor(void* object) {
  Fragment* _this = reinterpret_cast< Fragment* >(object);
  (void)_this;
}
void Fragment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Fragment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Fragment& Fragment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Fragment_fragment_2eproto.base);
  return *internal_default_instance();
}


void Fragment::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Fragment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_dimensions_.Clear();
  var_level_error_bounds_.Clear();
  var_stopping_indices_.Clear();
  ec_backend_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  var_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && var_table_content_ != nullptr) {
    delete var_table_content_;
  }
  var_table_content_ = nullptr;
  if (GetArena() == nullptr && var_squared_errors_ != nullptr) {
    delete var_squared_errors_;
  }
  var_squared_errors_ = nullptr;
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_tiers_) -
      reinterpret_cast<char*>(&k_)) + sizeof(var_tiers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fragment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ec_backend_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ec_backend_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 encoded_fragment_length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          encoded_fragment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 idx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 orig_data_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          orig_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chksum_mismatch = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          chksum_mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 backend_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          backend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes frag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_frag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          is_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tier_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chunk_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          chunk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fragment_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          fragment_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string var_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.Fragment.var_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 var_dimensions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_var_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_var_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string var_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_var_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.Fragment.var_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 var_levels = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          var_levels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double var_level_error_bounds = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_var_level_error_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169) {
          _internal_add_var_level_error_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated bytes var_stopping_indices = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_var_stopping_indices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // .DATA.QueryTable var_table_content = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_table_content(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DATA.SquaredErrorsTable var_squared_errors = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_squared_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 var_tiers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          var_tiers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sequence_number = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Fragment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Fragment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // int32 m = 2;
  if (this->m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_m(), target);
  }

  // int32 w = 3;
  if (this->w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // int32 hd = 4;
  if (this->hd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hd(), target);
  }

  // bytes ec_backend_name = 5;
  if (this->ec_backend_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ec_backend_name(), target);
  }

  // uint32 encoded_fragment_length = 6;
  if (this->encoded_fragment_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_encoded_fragment_length(), target);
  }

  // uint32 idx = 7;
  if (this->idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_idx(), target);
  }

  // uint32 size = 8;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_size(), target);
  }

  // uint64 orig_data_size = 9;
  if (this->orig_data_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_orig_data_size(), target);
  }

  // uint32 chksum_mismatch = 10;
  if (this->chksum_mismatch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_chksum_mismatch(), target);
  }

  // uint32 backend_id = 11;
  if (this->backend_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_backend_id(), target);
  }

  // bytes frag = 12;
  if (this->frag().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_frag(), target);
  }

  // bool is_data = 13;
  if (this->is_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_data(), target);
  }

  // uint32 tier_id = 14;
  if (this->tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tier_id(), target);
  }

  // uint32 chunk_id = 15;
  if (this->chunk_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_chunk_id(), target);
  }

  // uint32 fragment_id = 16;
  if (this->fragment_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_fragment_id(), target);
  }

  // string var_name = 17;
  if (this->var_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Fragment.var_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_var_name(), target);
  }

  // repeated uint32 var_dimensions = 18;
  {
    int byte_size = _var_dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          18, _internal_var_dimensions(), byte_size, target);
    }
  }

  // string var_type = 19;
  if (this->var_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_type().data(), static_cast<int>(this->_internal_var_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.Fragment.var_type");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_var_type(), target);
  }

  // uint32 var_levels = 20;
  if (this->var_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_var_levels(), target);
  }

  // repeated double var_level_error_bounds = 21;
  if (this->_internal_var_level_error_bounds_size() > 0) {
    target = stream->WriteFixedPacked(21, _internal_var_level_error_bounds(), target);
  }

  // repeated bytes var_stopping_indices = 22;
  for (int i = 0, n = this->_internal_var_stopping_indices_size(); i < n; i++) {
    const auto& s = this->_internal_var_stopping_indices(i);
    target = stream->WriteBytes(22, s, target);
  }

  // .DATA.QueryTable var_table_content = 23;
  if (this->has_var_table_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::var_table_content(this), target, stream);
  }

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  if (this->has_var_squared_errors()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::var_squared_errors(this), target, stream);
  }

  // uint32 var_tiers = 25;
  if (this->var_tiers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_var_tiers(), target);
  }

  // uint64 timestamp = 26;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(26, this->_internal_timestamp(), target);
  }

  // uint64 sequence_number = 27;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Fragment)
  return target;
}

size_t Fragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Fragment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 var_dimensions = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->var_dimensions_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double var_level_error_bounds = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_var_level_error_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _var_level_error_bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes var_stopping_indices = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_stopping_indices_.size());
  for (int i = 0, n = var_stopping_indices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_stopping_indices_.Get(i));
  }

  // bytes ec_backend_name = 5;
  if (this->ec_backend_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ec_backend_name());
  }

  // bytes frag = 12;
  if (this->frag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frag());
  }

  // string var_name = 17;
  if (this->var_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  // string var_type = 19;
  if (this->var_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_type());
  }

  // .DATA.QueryTable var_table_content = 23;
  if (this->has_var_table_content()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_table_content_);
  }

  // .DATA.SquaredErrorsTable var_squared_errors = 24;
  if (this->has_var_squared_errors()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_squared_errors_);
  }

  // int32 k = 1;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  // int32 m = 2;
  if (this->m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_m());
  }

  // int32 w = 3;
  if (this->w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_w());
  }

  // int32 hd = 4;
  if (this->hd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hd());
  }

  // uint32 encoded_fragment_length = 6;
  if (this->encoded_fragment_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_encoded_fragment_length());
  }

  // uint32 idx = 7;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  // uint64 orig_data_size = 9;
  if (this->orig_data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_orig_data_size());
  }

  // uint32 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // uint32 chksum_mismatch = 10;
  if (this->chksum_mismatch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chksum_mismatch());
  }

  // uint32 backend_id = 11;
  if (this->backend_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_backend_id());
  }

  // bool is_data = 13;
  if (this->is_data() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tier_id = 14;
  if (this->tier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tier_id());
  }

  // uint32 chunk_id = 15;
  if (this->chunk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunk_id());
  }

  // uint32 fragment_id = 16;
  if (this->fragment_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fragment_id());
  }

  // uint32 var_levels = 20;
  if (this->var_levels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_var_levels());
  }

  // uint64 timestamp = 26;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 sequence_number = 27;
  if (this->sequence_number() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sequence_number());
  }

  // uint32 var_tiers = 25;
  if (this->var_tiers() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_var_tiers());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fragment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.Fragment)
  GOOGLE_DCHECK_NE(&from, this);
  const Fragment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Fragment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.Fragment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.Fragment)
    MergeFrom(*source);
  }
}

void Fragment::MergeFrom(const Fragment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.Fragment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_dimensions_.MergeFrom(from.var_dimensions_);
  var_level_error_bounds_.MergeFrom(from.var_level_error_bounds_);
  var_stopping_indices_.MergeFrom(from.var_stopping_indices_);
  if (from.ec_backend_name().size() > 0) {
    _internal_set_ec_backend_name(from._internal_ec_backend_name());
  }
  if (from.frag().size() > 0) {
    _internal_set_frag(from._internal_frag());
  }
  if (from.var_name().size() > 0) {
    _internal_set_var_name(from._internal_var_name());
  }
  if (from.var_type().size() > 0) {
    _internal_set_var_type(from._internal_var_type());
  }
  if (from.has_var_table_content()) {
    _internal_mutable_var_table_content()->::DATA::QueryTable::MergeFrom(from._internal_var_table_content());
  }
  if (from.has_var_squared_errors()) {
    _internal_mutable_var_squared_errors()->::DATA::SquaredErrorsTable::MergeFrom(from._internal_var_squared_errors());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from.m() != 0) {
    _internal_set_m(from._internal_m());
  }
  if (from.w() != 0) {
    _internal_set_w(from._internal_w());
  }
  if (from.hd() != 0) {
    _internal_set_hd(from._internal_hd());
  }
  if (from.encoded_fragment_length() != 0) {
    _internal_set_encoded_fragment_length(from._internal_encoded_fragment_length());
  }
  if (from.idx() != 0) {
    _internal_set_idx(from._internal_idx());
  }
  if (from.orig_data_size() != 0) {
    _internal_set_orig_data_size(from._internal_orig_data_size());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.chksum_mismatch() != 0) {
    _internal_set_chksum_mismatch(from._internal_chksum_mismatch());
  }
  if (from.backend_id() != 0) {
    _internal_set_backend_id(from._internal_backend_id());
  }
  if (from.is_data() != 0) {
    _internal_set_is_data(from._internal_is_data());
  }
  if (from.tier_id() != 0) {
    _internal_set_tier_id(from._internal_tier_id());
  }
  if (from.chunk_id() != 0) {
    _internal_set_chunk_id(from._internal_chunk_id());
  }
  if (from.fragment_id() != 0) {
    _internal_set_fragment_id(from._internal_fragment_id());
  }
  if (from.var_levels() != 0) {
    _internal_set_var_levels(from._internal_var_levels());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
  if (from.var_tiers() != 0) {
    _internal_set_var_tiers(from._internal_var_tiers());
  }
}

void Fragment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.Fragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fragment::CopyFrom(const Fragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Fragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fragment::IsInitialized() const {
  return true;
}

void Fragment::InternalSwap(Fragment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  var_dimensions_.InternalSwap(&other->var_dimensions_);
  var_level_error_bounds_.InternalSwap(&other->var_level_error_bounds_);
  var_stopping_indices_.InternalSwap(&other->var_stopping_indices_);
  ec_backend_name_.Swap(&other->ec_backend_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frag_.Swap(&other->frag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  var_type_.Swap(&other->var_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fragment, var_tiers_)
      + sizeof(Fragment::var_tiers_)
      - PROTOBUF_FIELD_OFFSET(Fragment, var_table_content_)>(
          reinterpret_cast<char*>(&var_table_content_),
          reinterpret_cast<char*>(&other->var_table_content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fragment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariableCollection::InitAsDefaultInstance() {
}
class VariableCollection::_Internal {
 public:
};

VariableCollection::VariableCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.VariableCollection)
}
VariableCollection::VariableCollection(const VariableCollection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.VariableCollection)
}

void VariableCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariableCollection_fragment_2eproto.base);
}

VariableCollection::~VariableCollection() {
  // @@protoc_insertion_point(destructor:DATA.VariableCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VariableCollection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VariableCollection::ArenaDtor(void* object) {
  VariableCollection* _this = reinterpret_cast< VariableCollection* >(object);
  (void)_this;
}
void VariableCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableCollection& VariableCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariableCollection_fragment_2eproto.base);
  return *internal_default_instance();
}


void VariableCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.VariableCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableCollection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DATA.Variable variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.VariableCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.Variable variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.VariableCollection)
  return target;
}

size_t VariableCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.VariableCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.Variable variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableCollection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.VariableCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableCollection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.VariableCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.VariableCollection)
    MergeFrom(*source);
  }
}

void VariableCollection::MergeFrom(const VariableCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.VariableCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void VariableCollection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.VariableCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableCollection::CopyFrom(const VariableCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.VariableCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableCollection::IsInitialized() const {
  return true;
}

void VariableCollection::InternalSwap(VariableCollection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableCollection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetransmissionRequest_VariableRequest_TierRequest::InitAsDefaultInstance() {
}
class RetransmissionRequest_VariableRequest_TierRequest::_Internal {
 public:
};

RetransmissionRequest_VariableRequest_TierRequest::RetransmissionRequest_VariableRequest_TierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunk_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
}
RetransmissionRequest_VariableRequest_TierRequest::RetransmissionRequest_VariableRequest_TierRequest(const RetransmissionRequest_VariableRequest_TierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_ids_(from.chunk_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tier_id_ = from.tier_id_;
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
}

void RetransmissionRequest_VariableRequest_TierRequest::SharedCtor() {
  tier_id_ = 0;
}

RetransmissionRequest_VariableRequest_TierRequest::~RetransmissionRequest_VariableRequest_TierRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetransmissionRequest_VariableRequest_TierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RetransmissionRequest_VariableRequest_TierRequest::ArenaDtor(void* object) {
  RetransmissionRequest_VariableRequest_TierRequest* _this = reinterpret_cast< RetransmissionRequest_VariableRequest_TierRequest* >(object);
  (void)_this;
}
void RetransmissionRequest_VariableRequest_TierRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetransmissionRequest_VariableRequest_TierRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetransmissionRequest_VariableRequest_TierRequest& RetransmissionRequest_VariableRequest_TierRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetransmissionRequest_VariableRequest_TierRequest_fragment_2eproto.base);
  return *internal_default_instance();
}


void RetransmissionRequest_VariableRequest_TierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_ids_.Clear();
  tier_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest_VariableRequest_TierRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 chunk_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_chunk_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetransmissionRequest_VariableRequest_TierRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tier_id = 1;
  if (this->tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tier_id(), target);
  }

  // repeated int32 chunk_ids = 2;
  {
    int byte_size = _chunk_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_chunk_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  return target;
}

size_t RetransmissionRequest_VariableRequest_TierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chunk_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->chunk_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunk_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 tier_id = 1;
  if (this->tier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tier_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetransmissionRequest_VariableRequest_TierRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RetransmissionRequest_VariableRequest_TierRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetransmissionRequest_VariableRequest_TierRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.RetransmissionRequest.VariableRequest.TierRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.RetransmissionRequest.VariableRequest.TierRequest)
    MergeFrom(*source);
  }
}

void RetransmissionRequest_VariableRequest_TierRequest::MergeFrom(const RetransmissionRequest_VariableRequest_TierRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_ids_.MergeFrom(from.chunk_ids_);
  if (from.tier_id() != 0) {
    _internal_set_tier_id(from._internal_tier_id());
  }
}

void RetransmissionRequest_VariableRequest_TierRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetransmissionRequest_VariableRequest_TierRequest::CopyFrom(const RetransmissionRequest_VariableRequest_TierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest.VariableRequest.TierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest_VariableRequest_TierRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest_VariableRequest_TierRequest::InternalSwap(RetransmissionRequest_VariableRequest_TierRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_ids_.InternalSwap(&other->chunk_ids_);
  swap(tier_id_, other->tier_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest_VariableRequest_TierRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetransmissionRequest_VariableRequest::InitAsDefaultInstance() {
}
class RetransmissionRequest_VariableRequest::_Internal {
 public:
};

RetransmissionRequest_VariableRequest::RetransmissionRequest_VariableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest.VariableRequest)
}
RetransmissionRequest_VariableRequest::RetransmissionRequest_VariableRequest(const RetransmissionRequest_VariableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_name().empty()) {
    var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest.VariableRequest)
}

void RetransmissionRequest_VariableRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RetransmissionRequest_VariableRequest::~RetransmissionRequest_VariableRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest.VariableRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetransmissionRequest_VariableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RetransmissionRequest_VariableRequest::ArenaDtor(void* object) {
  RetransmissionRequest_VariableRequest* _this = reinterpret_cast< RetransmissionRequest_VariableRequest* >(object);
  (void)_this;
}
void RetransmissionRequest_VariableRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetransmissionRequest_VariableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetransmissionRequest_VariableRequest& RetransmissionRequest_VariableRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetransmissionRequest_VariableRequest_fragment_2eproto.base);
  return *internal_default_instance();
}


void RetransmissionRequest_VariableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest.VariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiers_.Clear();
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest_VariableRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.RetransmissionRequest.VariableRequest.var_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetransmissionRequest_VariableRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest.VariableRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.RetransmissionRequest.VariableRequest.var_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tiers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest.VariableRequest)
  return target;
}

size_t RetransmissionRequest_VariableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest.VariableRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest.TierRequest tiers = 2;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetransmissionRequest_VariableRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.RetransmissionRequest.VariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RetransmissionRequest_VariableRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetransmissionRequest_VariableRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.RetransmissionRequest.VariableRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.RetransmissionRequest.VariableRequest)
    MergeFrom(*source);
  }
}

void RetransmissionRequest_VariableRequest::MergeFrom(const RetransmissionRequest_VariableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest.VariableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
  if (from.var_name().size() > 0) {
    _internal_set_var_name(from._internal_var_name());
  }
}

void RetransmissionRequest_VariableRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.RetransmissionRequest.VariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetransmissionRequest_VariableRequest::CopyFrom(const RetransmissionRequest_VariableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest.VariableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest_VariableRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest_VariableRequest::InternalSwap(RetransmissionRequest_VariableRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tiers_.InternalSwap(&other->tiers_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest_VariableRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetransmissionRequest::InitAsDefaultInstance() {
}
class RetransmissionRequest::_Internal {
 public:
};

RetransmissionRequest::RetransmissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.RetransmissionRequest)
}
RetransmissionRequest::RetransmissionRequest(const RetransmissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.RetransmissionRequest)
}

void RetransmissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetransmissionRequest_fragment_2eproto.base);
}

RetransmissionRequest::~RetransmissionRequest() {
  // @@protoc_insertion_point(destructor:DATA.RetransmissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetransmissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RetransmissionRequest::ArenaDtor(void* object) {
  RetransmissionRequest* _this = reinterpret_cast< RetransmissionRequest* >(object);
  (void)_this;
}
void RetransmissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetransmissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetransmissionRequest& RetransmissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetransmissionRequest_fragment_2eproto.base);
  return *internal_default_instance();
}


void RetransmissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.RetransmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetransmissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetransmissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.RetransmissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.RetransmissionRequest)
  return target;
}

size_t RetransmissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.RetransmissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.RetransmissionRequest.VariableRequest variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetransmissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.RetransmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RetransmissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetransmissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.RetransmissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.RetransmissionRequest)
    MergeFrom(*source);
  }
}

void RetransmissionRequest::MergeFrom(const RetransmissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.RetransmissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void RetransmissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.RetransmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetransmissionRequest::CopyFrom(const RetransmissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.RetransmissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetransmissionRequest::IsInitialized() const {
  return true;
}

void RetransmissionRequest::InternalSwap(RetransmissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetransmissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TierMetadata::InitAsDefaultInstance() {
}
class TierMetadata::_Internal {
 public:
};

TierMetadata::TierMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunk_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.TierMetadata)
}
TierMetadata::TierMetadata(const TierMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_ids_(from.chunk_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tier_id_, &from.tier_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&tier_id_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:DATA.TierMetadata)
}

void TierMetadata::SharedCtor() {
  ::memset(&tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&tier_id_)) + sizeof(k_));
}

TierMetadata::~TierMetadata() {
  // @@protoc_insertion_point(destructor:DATA.TierMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TierMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TierMetadata::ArenaDtor(void* object) {
  TierMetadata* _this = reinterpret_cast< TierMetadata* >(object);
  (void)_this;
}
void TierMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TierMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TierMetadata& TierMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TierMetadata_fragment_2eproto.base);
  return *internal_default_instance();
}


void TierMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.TierMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_ids_.Clear();
  ::memset(&tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&tier_id_)) + sizeof(k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TierMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 tier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 chunk_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chunk_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_chunk_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TierMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.TierMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tier_id = 1;
  if (this->tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tier_id(), target);
  }

  // uint32 k = 2;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_k(), target);
  }

  // repeated uint32 chunk_ids = 3;
  {
    int byte_size = _chunk_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_chunk_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.TierMetadata)
  return target;
}

size_t TierMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.TierMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 chunk_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->chunk_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _chunk_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 tier_id = 1;
  if (this->tier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tier_id());
  }

  // uint32 k = 2;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_k());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TierMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.TierMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const TierMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TierMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.TierMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.TierMetadata)
    MergeFrom(*source);
  }
}

void TierMetadata::MergeFrom(const TierMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.TierMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_ids_.MergeFrom(from.chunk_ids_);
  if (from.tier_id() != 0) {
    _internal_set_tier_id(from._internal_tier_id());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
}

void TierMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.TierMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TierMetadata::CopyFrom(const TierMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.TierMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TierMetadata::IsInitialized() const {
  return true;
}

void TierMetadata::InternalSwap(TierMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_ids_.InternalSwap(&other->chunk_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TierMetadata, k_)
      + sizeof(TierMetadata::k_)
      - PROTOBUF_FIELD_OFFSET(TierMetadata, tier_id_)>(
          reinterpret_cast<char*>(&tier_id_),
          reinterpret_cast<char*>(&other->tier_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TierMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariableMetadata::InitAsDefaultInstance() {
}
class VariableMetadata::_Internal {
 public:
};

VariableMetadata::VariableMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.VariableMetadata)
}
VariableMetadata::VariableMetadata(const VariableMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_name().empty()) {
    var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DATA.VariableMetadata)
}

void VariableMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariableMetadata_fragment_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VariableMetadata::~VariableMetadata() {
  // @@protoc_insertion_point(destructor:DATA.VariableMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VariableMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariableMetadata::ArenaDtor(void* object) {
  VariableMetadata* _this = reinterpret_cast< VariableMetadata* >(object);
  (void)_this;
}
void VariableMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariableMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariableMetadata& VariableMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariableMetadata_fragment_2eproto.base);
  return *internal_default_instance();
}


void VariableMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.VariableMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiers_.Clear();
  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DATA.VariableMetadata.var_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DATA.TierMetadata tiers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariableMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.VariableMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DATA.VariableMetadata.var_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // repeated .DATA.TierMetadata tiers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tiers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.VariableMetadata)
  return target;
}

size_t VariableMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.VariableMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.TierMetadata tiers = 2;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->tiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string var_name = 1;
  if (this->var_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariableMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.VariableMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const VariableMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariableMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.VariableMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.VariableMetadata)
    MergeFrom(*source);
  }
}

void VariableMetadata::MergeFrom(const VariableMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.VariableMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
  if (from.var_name().size() > 0) {
    _internal_set_var_name(from._internal_var_name());
  }
}

void VariableMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.VariableMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableMetadata::CopyFrom(const VariableMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.VariableMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableMetadata::IsInitialized() const {
  return true;
}

void VariableMetadata::InternalSwap(VariableMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tiers_.InternalSwap(&other->tiers_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Metadata::InitAsDefaultInstance() {
}
class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      variables_(from.variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DATA.Metadata)
}

void Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Metadata_fragment_2eproto.base);
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:DATA.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  (void)_this;
}
void Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Metadata& Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Metadata_fragment_2eproto.base);
  return *internal_default_instance();
}


void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DATA.VariableMetadata variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DATA.VariableMetadata variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DATA.VariableMetadata variables = 1;
  total_size += 1UL * this->_internal_variables_size();
  for (const auto& msg : this->variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.Metadata)
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  variables_.MergeFrom(from.variables_);
}

void Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  variables_.InternalSwap(&other->variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FragmentsReport::InitAsDefaultInstance() {
}
class FragmentsReport::_Internal {
 public:
};

FragmentsReport::FragmentsReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DATA.FragmentsReport)
}
FragmentsReport::FragmentsReport(const FragmentsReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_var_name().empty()) {
    var_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_var_name(),
      GetArena());
  }
  ::memcpy(&tier_id_, &from.tier_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lambda_) -
    reinterpret_cast<char*>(&tier_id_)) + sizeof(lambda_));
  // @@protoc_insertion_point(copy_constructor:DATA.FragmentsReport)
}

void FragmentsReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FragmentsReport_fragment_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lambda_) -
      reinterpret_cast<char*>(&tier_id_)) + sizeof(lambda_));
}

FragmentsReport::~FragmentsReport() {
  // @@protoc_insertion_point(destructor:DATA.FragmentsReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FragmentsReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FragmentsReport::ArenaDtor(void* object) {
  FragmentsReport* _this = reinterpret_cast< FragmentsReport* >(object);
  (void)_this;
}
void FragmentsReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FragmentsReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FragmentsReport& FragmentsReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FragmentsReport_fragment_2eproto.base);
  return *internal_default_instance();
}


void FragmentsReport::Clear() {
// @@protoc_insertion_point(message_clear_start:DATA.FragmentsReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tier_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lambda_) -
      reinterpret_cast<char*>(&tier_id_)) + sizeof(lambda_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FragmentsReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes var_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tier_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tier_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 chunks_processed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chunks_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_fragments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expected_fragments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expected_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time_window = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lambda = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          lambda_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FragmentsReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DATA.FragmentsReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes var_name = 1;
  if (this->var_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_var_name(), target);
  }

  // uint32 tier_id = 2;
  if (this->tier_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tier_id(), target);
  }

  // uint32 chunks_processed = 3;
  if (this->chunks_processed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chunks_processed(), target);
  }

  // uint32 total_fragments = 4;
  if (this->total_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_fragments(), target);
  }

  // uint32 expected_fragments = 5;
  if (this->expected_fragments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expected_fragments(), target);
  }

  // uint64 time_window = 6;
  if (this->time_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_time_window(), target);
  }

  // double lambda = 7;
  if (!(this->lambda() <= 0 && this->lambda() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lambda(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DATA.FragmentsReport)
  return target;
}

size_t FragmentsReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DATA.FragmentsReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes var_name = 1;
  if (this->var_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_name());
  }

  // uint32 tier_id = 2;
  if (this->tier_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tier_id());
  }

  // uint32 chunks_processed = 3;
  if (this->chunks_processed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chunks_processed());
  }

  // uint32 total_fragments = 4;
  if (this->total_fragments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_fragments());
  }

  // uint32 expected_fragments = 5;
  if (this->expected_fragments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expected_fragments());
  }

  // uint64 time_window = 6;
  if (this->time_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_window());
  }

  // double lambda = 7;
  if (!(this->lambda() <= 0 && this->lambda() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FragmentsReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DATA.FragmentsReport)
  GOOGLE_DCHECK_NE(&from, this);
  const FragmentsReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FragmentsReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DATA.FragmentsReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DATA.FragmentsReport)
    MergeFrom(*source);
  }
}

void FragmentsReport::MergeFrom(const FragmentsReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DATA.FragmentsReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.var_name().size() > 0) {
    _internal_set_var_name(from._internal_var_name());
  }
  if (from.tier_id() != 0) {
    _internal_set_tier_id(from._internal_tier_id());
  }
  if (from.chunks_processed() != 0) {
    _internal_set_chunks_processed(from._internal_chunks_processed());
  }
  if (from.total_fragments() != 0) {
    _internal_set_total_fragments(from._internal_total_fragments());
  }
  if (from.expected_fragments() != 0) {
    _internal_set_expected_fragments(from._internal_expected_fragments());
  }
  if (from.time_window() != 0) {
    _internal_set_time_window(from._internal_time_window());
  }
  if (!(from.lambda() <= 0 && from.lambda() >= 0)) {
    _internal_set_lambda(from._internal_lambda());
  }
}

void FragmentsReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DATA.FragmentsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragmentsReport::CopyFrom(const FragmentsReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DATA.FragmentsReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragmentsReport::IsInitialized() const {
  return true;
}

void FragmentsReport::InternalSwap(FragmentsReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FragmentsReport, lambda_)
      + sizeof(FragmentsReport::lambda_)
      - PROTOBUF_FIELD_OFFSET(FragmentsReport, tier_id_)>(
          reinterpret_cast<char*>(&tier_id_),
          reinterpret_cast<char*>(&other->tier_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FragmentsReport::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DATA
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DATA::QueryTable* Arena::CreateMaybeMessage< ::DATA::QueryTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::QueryTable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::SquaredErrorsTable* Arena::CreateMaybeMessage< ::DATA::SquaredErrorsTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::SquaredErrorsTable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Variable* Arena::CreateMaybeMessage< ::DATA::Variable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Variable >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Tier* Arena::CreateMaybeMessage< ::DATA::Tier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Tier >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Fragment* Arena::CreateMaybeMessage< ::DATA::Fragment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Fragment >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::VariableCollection* Arena::CreateMaybeMessage< ::DATA::VariableCollection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::VariableCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest_VariableRequest_TierRequest* Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest_VariableRequest_TierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest_VariableRequest* Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest_VariableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest_VariableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::RetransmissionRequest* Arena::CreateMaybeMessage< ::DATA::RetransmissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::RetransmissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::TierMetadata* Arena::CreateMaybeMessage< ::DATA::TierMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::TierMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::VariableMetadata* Arena::CreateMaybeMessage< ::DATA::VariableMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::VariableMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::Metadata* Arena::CreateMaybeMessage< ::DATA::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::DATA::FragmentsReport* Arena::CreateMaybeMessage< ::DATA::FragmentsReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DATA::FragmentsReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
